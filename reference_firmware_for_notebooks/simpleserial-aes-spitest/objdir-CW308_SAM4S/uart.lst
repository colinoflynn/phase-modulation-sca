   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,4
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "uart.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.uart_init,"ax",%progbits
  16              	 .align 1
  17              	 .global uart_init
  18              	 .arch armv7e-m
  19              	 .syntax unified
  20              	 .thumb
  21              	 .thumb_func
  22              	 .fpu softvfp
  24              	uart_init:
  25              	.LVL0:
  26              	.LFB136:
  27              	 .file 1 ".././hal/sam4s/uart.c"
   1:.././hal/sam4s/uart.c **** /**
   2:.././hal/sam4s/uart.c ****  * \file
   3:.././hal/sam4s/uart.c ****  *
   4:.././hal/sam4s/uart.c ****  * \brief Universal Asynchronous Receiver Transceiver (UART) driver for SAM.
   5:.././hal/sam4s/uart.c ****  *
   6:.././hal/sam4s/uart.c ****  * Copyright (c) 2011-2018 Microchip Technology Inc. and its subsidiaries.
   7:.././hal/sam4s/uart.c ****  *
   8:.././hal/sam4s/uart.c ****  * \asf_license_start
   9:.././hal/sam4s/uart.c ****  *
  10:.././hal/sam4s/uart.c ****  * \page License
  11:.././hal/sam4s/uart.c ****  *
  12:.././hal/sam4s/uart.c ****  * Subject to your compliance with these terms, you may use Microchip
  13:.././hal/sam4s/uart.c ****  * software and any derivatives exclusively with Microchip products.
  14:.././hal/sam4s/uart.c ****  * It is your responsibility to comply with third party license terms applicable
  15:.././hal/sam4s/uart.c ****  * to your use of third party software (including open source software) that
  16:.././hal/sam4s/uart.c ****  * may accompany Microchip software.
  17:.././hal/sam4s/uart.c ****  *
  18:.././hal/sam4s/uart.c ****  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES,
  19:.././hal/sam4s/uart.c ****  * WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE,
  20:.././hal/sam4s/uart.c ****  * INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY,
  21:.././hal/sam4s/uart.c ****  * AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT WILL MICROCHIP BE
  22:.././hal/sam4s/uart.c ****  * LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, INCIDENTAL OR CONSEQUENTIAL
  23:.././hal/sam4s/uart.c ****  * LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE
  24:.././hal/sam4s/uart.c ****  * SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE
  25:.././hal/sam4s/uart.c ****  * POSSIBILITY OR THE DAMAGES ARE FORESEEABLE.  TO THE FULLEST EXTENT
  26:.././hal/sam4s/uart.c ****  * ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN ANY WAY
  27:.././hal/sam4s/uart.c ****  * RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
  28:.././hal/sam4s/uart.c ****  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
  29:.././hal/sam4s/uart.c ****  *
  30:.././hal/sam4s/uart.c ****  * \asf_license_stop
  31:.././hal/sam4s/uart.c ****  *
  32:.././hal/sam4s/uart.c ****  */
  33:.././hal/sam4s/uart.c **** /*
  34:.././hal/sam4s/uart.c ****  * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
  35:.././hal/sam4s/uart.c ****  */
  36:.././hal/sam4s/uart.c **** 
  37:.././hal/sam4s/uart.c **** #include "uart.h"
  38:.././hal/sam4s/uart.c **** 
  39:.././hal/sam4s/uart.c **** /// @cond 0
  40:.././hal/sam4s/uart.c **** /**INDENT-OFF**/
  41:.././hal/sam4s/uart.c **** #ifdef __cplusplus
  42:.././hal/sam4s/uart.c **** extern "C" {
  43:.././hal/sam4s/uart.c **** #endif
  44:.././hal/sam4s/uart.c **** /**INDENT-ON**/
  45:.././hal/sam4s/uart.c **** /// @endcond
  46:.././hal/sam4s/uart.c **** 
  47:.././hal/sam4s/uart.c **** /**
  48:.././hal/sam4s/uart.c ****  * \defgroup sam_drivers_uart_group Universal Asynchronous Receiver Transceiver (UART)
  49:.././hal/sam4s/uart.c ****  *
  50:.././hal/sam4s/uart.c ****  * The Universal Asynchronous Receiver Transmitter features a two-pin UART that
  51:.././hal/sam4s/uart.c ****  * can be used for communication and trace purposes and offers an ideal medium
  52:.././hal/sam4s/uart.c ****  * for in-situ programming solutions. Moreover, the association with two
  53:.././hal/sam4s/uart.c ****  * peripheral DMA controller (PDC) channels permits packet handling for these
  54:.././hal/sam4s/uart.c ****  * tasks with processor time reduced to a minimum.
  55:.././hal/sam4s/uart.c ****  *
  56:.././hal/sam4s/uart.c ****  * \par Usage
  57:.././hal/sam4s/uart.c ****  *
  58:.././hal/sam4s/uart.c ****  * -# Enable the UART peripheral clock in the PMC.
  59:.././hal/sam4s/uart.c ****  * -# Enable the required UART PIOs (see pio.h).
  60:.././hal/sam4s/uart.c ****  * -# Configure the UART by calling uart_init.
  61:.././hal/sam4s/uart.c ****  * -# Send data through the UART using the uart_write.
  62:.././hal/sam4s/uart.c ****  * -# Receive data from the UART using the uart_read; the availability of data
  63:.././hal/sam4s/uart.c ****  *    can be polled with uart_is_rx_ready.
  64:.././hal/sam4s/uart.c ****  * -# Disable the transmitter and/or the receiver of the UART with
  65:.././hal/sam4s/uart.c ****  *    uart_disable_tx and uart_disable_rx.
  66:.././hal/sam4s/uart.c ****  *
  67:.././hal/sam4s/uart.c ****  * @{
  68:.././hal/sam4s/uart.c ****  */
  69:.././hal/sam4s/uart.c **** 
  70:.././hal/sam4s/uart.c **** /**
  71:.././hal/sam4s/uart.c ****  * \brief Configure UART with the specified parameters.
  72:.././hal/sam4s/uart.c ****  *
  73:.././hal/sam4s/uart.c ****  * \note The PMC and PIOs must be configured first.
  74:.././hal/sam4s/uart.c ****  *
  75:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
  76:.././hal/sam4s/uart.c ****  * \param p_uart_opt Pointer to sam_uart_opt_t instance.
  77:.././hal/sam4s/uart.c ****  *
  78:.././hal/sam4s/uart.c ****  * \retval 0 Success.
  79:.././hal/sam4s/uart.c ****  * \retval 1 Bad baud rate generator value.
  80:.././hal/sam4s/uart.c ****  */
  81:.././hal/sam4s/uart.c **** uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
  82:.././hal/sam4s/uart.c **** {
  28              	 .loc 1 82 1 view-0
  29              	 .cfi_startproc
  30              	 
  31              	 
  83:.././hal/sam4s/uart.c **** 	uint32_t cd = 0;
  32              	 .loc 1 83 2 view .LVU1
  84:.././hal/sam4s/uart.c **** 
  85:.././hal/sam4s/uart.c **** 	/* Reset and disable receiver & transmitter */
  86:.././hal/sam4s/uart.c **** 	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
  33              	 .loc 1 86 2 view .LVU2
  34              	 .loc 1 86 18 is_stmt 0 view .LVU3
  35 0000 AC23     	 movs r3,#172
  82:.././hal/sam4s/uart.c **** 	uint32_t cd = 0;
  36              	 .loc 1 82 1 view .LVU4
  37 0002 10B5     	 push {r4,lr}
  38              	.LCFI0:
  39              	 .cfi_def_cfa_offset 8
  40              	 .cfi_offset 4,-8
  41              	 .cfi_offset 14,-4
  42              	 .loc 1 86 18 view .LVU5
  43 0004 0360     	 str r3,[r0]
  87:.././hal/sam4s/uart.c **** 			| UART_CR_RXDIS | UART_CR_TXDIS;
  88:.././hal/sam4s/uart.c **** 
  89:.././hal/sam4s/uart.c **** 	/* Check and configure baudrate */
  90:.././hal/sam4s/uart.c **** 	/* Asynchronous, no oversampling */
  91:.././hal/sam4s/uart.c **** 	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
  44              	 .loc 1 91 2 is_stmt 1 view .LVU6
  45              	 .loc 1 91 27 is_stmt 0 view .LVU7
  46 0006 D1E90032 	 ldrd r3,r2,[r1]
  47 000a B3FBF2F3 	 udiv r3,r3,r2
  48              	 .loc 1 91 5 view .LVU8
  49 000e 1B09     	 lsrs r3,r3,#4
  50              	.LVL1:
  92:.././hal/sam4s/uart.c **** 	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
  51              	 .loc 1 92 2 is_stmt 1 view .LVU9
  52              	 .loc 1 92 35 is_stmt 0 view .LVU10
  53 0010 5C1E     	 subs r4,r3,#1
  54              	 .loc 1 92 5 view .LVU11
  55 0012 4FF6FE72 	 movw r2,#65534
  56 0016 9442     	 cmp r4,r2
  57 0018 0AD8     	 bhi .L3
  93:.././hal/sam4s/uart.c **** 		return 1;
  94:.././hal/sam4s/uart.c **** 
  95:.././hal/sam4s/uart.c **** 	p_uart->UART_BRGR = cd;
  58              	 .loc 1 95 2 is_stmt 1 view .LVU12
  59              	 .loc 1 95 20 is_stmt 0 view .LVU13
  60 001a 0362     	 str r3,[r0,#32]
  96:.././hal/sam4s/uart.c **** 	/* Configure mode */
  97:.././hal/sam4s/uart.c **** 	p_uart->UART_MR = p_uart_opt->ul_mode;
  61              	 .loc 1 97 2 is_stmt 1 view .LVU14
  62              	 .loc 1 97 30 is_stmt 0 view .LVU15
  63 001c 8B68     	 ldr r3,[r1,#8]
  64              	.LVL2:
  65              	 .loc 1 97 18 view .LVU16
  66 001e 4360     	 str r3,[r0,#4]
  67              	.LVL3:
  98:.././hal/sam4s/uart.c **** 
  99:.././hal/sam4s/uart.c **** #if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
 100:.././hal/sam4s/uart.c **** 	/* Disable PDC channel */
 101:.././hal/sam4s/uart.c **** 	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
  68              	 .loc 1 101 2 is_stmt 1 view .LVU17
  69              	 .loc 1 101 20 is_stmt 0 view .LVU18
  70 0020 40F20223 	 movw r3,#514
  71 0024 C0F82031 	 str r3,[r0,#288]
 102:.././hal/sam4s/uart.c **** #endif
 103:.././hal/sam4s/uart.c **** 
 104:.././hal/sam4s/uart.c **** 	/* Enable receiver and transmitter */
 105:.././hal/sam4s/uart.c **** 	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
  72              	 .loc 1 105 2 is_stmt 1 view .LVU19
  73              	 .loc 1 105 18 is_stmt 0 view .LVU20
  74 0028 5023     	 movs r3,#80
  75 002a 0360     	 str r3,[r0]
 106:.././hal/sam4s/uart.c **** 
 107:.././hal/sam4s/uart.c **** 	return 0;
  76              	 .loc 1 107 2 is_stmt 1 view .LVU21
  77              	 .loc 1 107 9 is_stmt 0 view .LVU22
  78 002c 0020     	 movs r0,#0
  79              	.LVL4:
  80              	.L1:
 108:.././hal/sam4s/uart.c **** }
  81              	 .loc 1 108 1 view .LVU23
  82 002e 10BD     	 pop {r4,pc}
  83              	.LVL5:
  84              	.L3:
  93:.././hal/sam4s/uart.c **** 
  85              	 .loc 1 93 10 view .LVU24
  86 0030 0120     	 movs r0,#1
  87              	.LVL6:
  93:.././hal/sam4s/uart.c **** 
  88              	 .loc 1 93 10 view .LVU25
  89 0032 FCE7     	 b .L1
  90              	 .cfi_endproc
  91              	.LFE136:
  93              	 .section .text.uart_enable_tx,"ax",%progbits
  94              	 .align 1
  95              	 .global uart_enable_tx
  96              	 .syntax unified
  97              	 .thumb
  98              	 .thumb_func
  99              	 .fpu softvfp
 101              	uart_enable_tx:
 102              	.LVL7:
 103              	.LFB137:
 109:.././hal/sam4s/uart.c **** 
 110:.././hal/sam4s/uart.c **** /**
 111:.././hal/sam4s/uart.c ****  * \brief Enable UART transmitter.
 112:.././hal/sam4s/uart.c ****  *
 113:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 114:.././hal/sam4s/uart.c ****  */
 115:.././hal/sam4s/uart.c **** void uart_enable_tx(Uart *p_uart)
 116:.././hal/sam4s/uart.c **** {
 104              	 .loc 1 116 1 is_stmt 1 view-0
 105              	 .cfi_startproc
 106              	 
 107              	 
 108              	 
 117:.././hal/sam4s/uart.c **** 	/* Enable transmitter */
 118:.././hal/sam4s/uart.c **** 	p_uart->UART_CR = UART_CR_TXEN;
 109              	 .loc 1 118 2 view .LVU27
 110              	 .loc 1 118 18 is_stmt 0 view .LVU28
 111 0000 4023     	 movs r3,#64
 112 0002 0360     	 str r3,[r0]
 119:.././hal/sam4s/uart.c **** }
 113              	 .loc 1 119 1 view .LVU29
 114 0004 7047     	 bx lr
 115              	 .cfi_endproc
 116              	.LFE137:
 118              	 .section .text.uart_disable_tx,"ax",%progbits
 119              	 .align 1
 120              	 .global uart_disable_tx
 121              	 .syntax unified
 122              	 .thumb
 123              	 .thumb_func
 124              	 .fpu softvfp
 126              	uart_disable_tx:
 127              	.LVL8:
 128              	.LFB138:
 120:.././hal/sam4s/uart.c **** 
 121:.././hal/sam4s/uart.c **** /**
 122:.././hal/sam4s/uart.c ****  * \brief Disable UART transmitter.
 123:.././hal/sam4s/uart.c ****  *
 124:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 125:.././hal/sam4s/uart.c ****  */
 126:.././hal/sam4s/uart.c **** void uart_disable_tx(Uart *p_uart)
 127:.././hal/sam4s/uart.c **** {
 129              	 .loc 1 127 1 is_stmt 1 view-0
 130              	 .cfi_startproc
 131              	 
 132              	 
 133              	 
 128:.././hal/sam4s/uart.c **** 	/* Disable transmitter */
 129:.././hal/sam4s/uart.c **** 	p_uart->UART_CR = UART_CR_TXDIS;
 134              	 .loc 1 129 2 view .LVU31
 135              	 .loc 1 129 18 is_stmt 0 view .LVU32
 136 0000 8023     	 movs r3,#128
 137 0002 0360     	 str r3,[r0]
 130:.././hal/sam4s/uart.c **** }
 138              	 .loc 1 130 1 view .LVU33
 139 0004 7047     	 bx lr
 140              	 .cfi_endproc
 141              	.LFE138:
 143              	 .section .text.uart_reset_tx,"ax",%progbits
 144              	 .align 1
 145              	 .global uart_reset_tx
 146              	 .syntax unified
 147              	 .thumb
 148              	 .thumb_func
 149              	 .fpu softvfp
 151              	uart_reset_tx:
 152              	.LVL9:
 153              	.LFB139:
 131:.././hal/sam4s/uart.c **** 
 132:.././hal/sam4s/uart.c **** /**
 133:.././hal/sam4s/uart.c ****  * \brief Reset UART transmitter.
 134:.././hal/sam4s/uart.c ****  *
 135:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 136:.././hal/sam4s/uart.c ****  */
 137:.././hal/sam4s/uart.c **** void uart_reset_tx(Uart *p_uart)
 138:.././hal/sam4s/uart.c **** {
 154              	 .loc 1 138 1 is_stmt 1 view-0
 155              	 .cfi_startproc
 156              	 
 157              	 
 158              	 
 139:.././hal/sam4s/uart.c **** 	/* Reset transmitter */
 140:.././hal/sam4s/uart.c **** 	p_uart->UART_CR = UART_CR_RSTTX | UART_CR_TXDIS;
 159              	 .loc 1 140 2 view .LVU35
 160              	 .loc 1 140 18 is_stmt 0 view .LVU36
 161 0000 8823     	 movs r3,#136
 162 0002 0360     	 str r3,[r0]
 141:.././hal/sam4s/uart.c **** }
 163              	 .loc 1 141 1 view .LVU37
 164 0004 7047     	 bx lr
 165              	 .cfi_endproc
 166              	.LFE139:
 168              	 .section .text.uart_enable_rx,"ax",%progbits
 169              	 .align 1
 170              	 .global uart_enable_rx
 171              	 .syntax unified
 172              	 .thumb
 173              	 .thumb_func
 174              	 .fpu softvfp
 176              	uart_enable_rx:
 177              	.LVL10:
 178              	.LFB140:
 142:.././hal/sam4s/uart.c **** 
 143:.././hal/sam4s/uart.c **** /**
 144:.././hal/sam4s/uart.c ****  * \brief Enable UART receiver.
 145:.././hal/sam4s/uart.c ****  *
 146:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 147:.././hal/sam4s/uart.c ****  */
 148:.././hal/sam4s/uart.c **** void uart_enable_rx(Uart *p_uart)
 149:.././hal/sam4s/uart.c **** {
 179              	 .loc 1 149 1 is_stmt 1 view-0
 180              	 .cfi_startproc
 181              	 
 182              	 
 183              	 
 150:.././hal/sam4s/uart.c **** 	/* Enable receiver */
 151:.././hal/sam4s/uart.c **** 	p_uart->UART_CR = UART_CR_RXEN;
 184              	 .loc 1 151 2 view .LVU39
 185              	 .loc 1 151 18 is_stmt 0 view .LVU40
 186 0000 1023     	 movs r3,#16
 187 0002 0360     	 str r3,[r0]
 152:.././hal/sam4s/uart.c **** }
 188              	 .loc 1 152 1 view .LVU41
 189 0004 7047     	 bx lr
 190              	 .cfi_endproc
 191              	.LFE140:
 193              	 .section .text.uart_disable_rx,"ax",%progbits
 194              	 .align 1
 195              	 .global uart_disable_rx
 196              	 .syntax unified
 197              	 .thumb
 198              	 .thumb_func
 199              	 .fpu softvfp
 201              	uart_disable_rx:
 202              	.LVL11:
 203              	.LFB141:
 153:.././hal/sam4s/uart.c **** 
 154:.././hal/sam4s/uart.c **** /**
 155:.././hal/sam4s/uart.c ****  * \brief Disable UART receiver.
 156:.././hal/sam4s/uart.c ****  *
 157:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 158:.././hal/sam4s/uart.c ****  */
 159:.././hal/sam4s/uart.c **** void uart_disable_rx(Uart *p_uart)
 160:.././hal/sam4s/uart.c **** {
 204              	 .loc 1 160 1 is_stmt 1 view-0
 205              	 .cfi_startproc
 206              	 
 207              	 
 208              	 
 161:.././hal/sam4s/uart.c **** 	/* Disable receiver */
 162:.././hal/sam4s/uart.c **** 	p_uart->UART_CR = UART_CR_RXDIS;
 209              	 .loc 1 162 2 view .LVU43
 210              	 .loc 1 162 18 is_stmt 0 view .LVU44
 211 0000 2023     	 movs r3,#32
 212 0002 0360     	 str r3,[r0]
 163:.././hal/sam4s/uart.c **** }
 213              	 .loc 1 163 1 view .LVU45
 214 0004 7047     	 bx lr
 215              	 .cfi_endproc
 216              	.LFE141:
 218              	 .section .text.uart_reset_rx,"ax",%progbits
 219              	 .align 1
 220              	 .global uart_reset_rx
 221              	 .syntax unified
 222              	 .thumb
 223              	 .thumb_func
 224              	 .fpu softvfp
 226              	uart_reset_rx:
 227              	.LVL12:
 228              	.LFB142:
 164:.././hal/sam4s/uart.c **** 
 165:.././hal/sam4s/uart.c **** /**
 166:.././hal/sam4s/uart.c ****  * \brief Reset UART receiver.
 167:.././hal/sam4s/uart.c ****  *
 168:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 169:.././hal/sam4s/uart.c ****  */
 170:.././hal/sam4s/uart.c **** void uart_reset_rx(Uart *p_uart)
 171:.././hal/sam4s/uart.c **** {
 229              	 .loc 1 171 1 is_stmt 1 view-0
 230              	 .cfi_startproc
 231              	 
 232              	 
 233              	 
 172:.././hal/sam4s/uart.c **** 	/* Reset receiver */
 173:.././hal/sam4s/uart.c **** 	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RXDIS;
 234              	 .loc 1 173 2 view .LVU47
 235              	 .loc 1 173 18 is_stmt 0 view .LVU48
 236 0000 2423     	 movs r3,#36
 237 0002 0360     	 str r3,[r0]
 174:.././hal/sam4s/uart.c **** }
 238              	 .loc 1 174 1 view .LVU49
 239 0004 7047     	 bx lr
 240              	 .cfi_endproc
 241              	.LFE142:
 243              	 .section .text.uart_enable,"ax",%progbits
 244              	 .align 1
 245              	 .global uart_enable
 246              	 .syntax unified
 247              	 .thumb
 248              	 .thumb_func
 249              	 .fpu softvfp
 251              	uart_enable:
 252              	.LVL13:
 253              	.LFB143:
 175:.././hal/sam4s/uart.c **** 
 176:.././hal/sam4s/uart.c **** /**
 177:.././hal/sam4s/uart.c ****  * \brief Enable UART receiver and transmitter.
 178:.././hal/sam4s/uart.c ****  *
 179:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 180:.././hal/sam4s/uart.c ****  */
 181:.././hal/sam4s/uart.c **** void uart_enable(Uart *p_uart)
 182:.././hal/sam4s/uart.c **** {
 254              	 .loc 1 182 1 is_stmt 1 view-0
 255              	 .cfi_startproc
 256              	 
 257              	 
 258              	 
 183:.././hal/sam4s/uart.c **** 	/* Enable receiver and transmitter */
 184:.././hal/sam4s/uart.c **** 	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
 259              	 .loc 1 184 2 view .LVU51
 260              	 .loc 1 184 18 is_stmt 0 view .LVU52
 261 0000 5023     	 movs r3,#80
 262 0002 0360     	 str r3,[r0]
 185:.././hal/sam4s/uart.c **** }
 263              	 .loc 1 185 1 view .LVU53
 264 0004 7047     	 bx lr
 265              	 .cfi_endproc
 266              	.LFE143:
 268              	 .section .text.uart_disable,"ax",%progbits
 269              	 .align 1
 270              	 .global uart_disable
 271              	 .syntax unified
 272              	 .thumb
 273              	 .thumb_func
 274              	 .fpu softvfp
 276              	uart_disable:
 277              	.LVL14:
 278              	.LFB144:
 186:.././hal/sam4s/uart.c **** 
 187:.././hal/sam4s/uart.c **** /**
 188:.././hal/sam4s/uart.c ****  * \brief Disable UART receiver and transmitter.
 189:.././hal/sam4s/uart.c ****  *
 190:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 191:.././hal/sam4s/uart.c ****  */
 192:.././hal/sam4s/uart.c **** void uart_disable(Uart *p_uart)
 193:.././hal/sam4s/uart.c **** {
 279              	 .loc 1 193 1 is_stmt 1 view-0
 280              	 .cfi_startproc
 281              	 
 282              	 
 283              	 
 194:.././hal/sam4s/uart.c **** 	/* Disable receiver and transmitter */
 195:.././hal/sam4s/uart.c **** 	p_uart->UART_CR = UART_CR_RXDIS | UART_CR_TXDIS;
 284              	 .loc 1 195 2 view .LVU55
 285              	 .loc 1 195 18 is_stmt 0 view .LVU56
 286 0000 A023     	 movs r3,#160
 287 0002 0360     	 str r3,[r0]
 196:.././hal/sam4s/uart.c **** }
 288              	 .loc 1 196 1 view .LVU57
 289 0004 7047     	 bx lr
 290              	 .cfi_endproc
 291              	.LFE144:
 293              	 .section .text.uart_reset,"ax",%progbits
 294              	 .align 1
 295              	 .global uart_reset
 296              	 .syntax unified
 297              	 .thumb
 298              	 .thumb_func
 299              	 .fpu softvfp
 301              	uart_reset:
 302              	.LVL15:
 303              	.LFB145:
 197:.././hal/sam4s/uart.c **** 
 198:.././hal/sam4s/uart.c **** /**
 199:.././hal/sam4s/uart.c ****  * \brief Reset UART receiver and transmitter.
 200:.././hal/sam4s/uart.c ****  *
 201:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 202:.././hal/sam4s/uart.c ****  */
 203:.././hal/sam4s/uart.c **** void uart_reset(Uart *p_uart)
 204:.././hal/sam4s/uart.c **** {
 304              	 .loc 1 204 1 is_stmt 1 view-0
 305              	 .cfi_startproc
 306              	 
 307              	 
 308              	 
 205:.././hal/sam4s/uart.c **** 	/* Reset and disable receiver & transmitter */
 206:.././hal/sam4s/uart.c **** 	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
 309              	 .loc 1 206 2 view .LVU59
 310              	 .loc 1 206 18 is_stmt 0 view .LVU60
 311 0000 AC23     	 movs r3,#172
 312 0002 0360     	 str r3,[r0]
 207:.././hal/sam4s/uart.c **** 			| UART_CR_RXDIS | UART_CR_TXDIS;
 208:.././hal/sam4s/uart.c **** }
 313              	 .loc 1 208 1 view .LVU61
 314 0004 7047     	 bx lr
 315              	 .cfi_endproc
 316              	.LFE145:
 318              	 .section .text.uart_enable_interrupt,"ax",%progbits
 319              	 .align 1
 320              	 .global uart_enable_interrupt
 321              	 .syntax unified
 322              	 .thumb
 323              	 .thumb_func
 324              	 .fpu softvfp
 326              	uart_enable_interrupt:
 327              	.LVL16:
 328              	.LFB146:
 209:.././hal/sam4s/uart.c **** 
 210:.././hal/sam4s/uart.c **** /** \brief Enable UART interrupts.
 211:.././hal/sam4s/uart.c ****  *
 212:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 213:.././hal/sam4s/uart.c ****  *  \param ul_sources Interrupts to be enabled.
 214:.././hal/sam4s/uart.c ****  */
 215:.././hal/sam4s/uart.c **** void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
 216:.././hal/sam4s/uart.c **** {
 329              	 .loc 1 216 1 is_stmt 1 view-0
 330              	 .cfi_startproc
 331              	 
 332              	 
 333              	 
 217:.././hal/sam4s/uart.c **** 	p_uart->UART_IER = ul_sources;
 334              	 .loc 1 217 2 view .LVU63
 335              	 .loc 1 217 19 is_stmt 0 view .LVU64
 336 0000 8160     	 str r1,[r0,#8]
 218:.././hal/sam4s/uart.c **** }
 337              	 .loc 1 218 1 view .LVU65
 338 0002 7047     	 bx lr
 339              	 .cfi_endproc
 340              	.LFE146:
 342              	 .section .text.uart_disable_interrupt,"ax",%progbits
 343              	 .align 1
 344              	 .global uart_disable_interrupt
 345              	 .syntax unified
 346              	 .thumb
 347              	 .thumb_func
 348              	 .fpu softvfp
 350              	uart_disable_interrupt:
 351              	.LVL17:
 352              	.LFB147:
 219:.././hal/sam4s/uart.c **** 
 220:.././hal/sam4s/uart.c **** /** \brief Disable UART interrupts.
 221:.././hal/sam4s/uart.c ****  *
 222:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 223:.././hal/sam4s/uart.c ****  *  \param ul_sources Interrupts to be disabled.
 224:.././hal/sam4s/uart.c ****  */
 225:.././hal/sam4s/uart.c **** void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
 226:.././hal/sam4s/uart.c **** {
 353              	 .loc 1 226 1 is_stmt 1 view-0
 354              	 .cfi_startproc
 355              	 
 356              	 
 357              	 
 227:.././hal/sam4s/uart.c **** 	p_uart->UART_IDR = ul_sources;
 358              	 .loc 1 227 2 view .LVU67
 359              	 .loc 1 227 19 is_stmt 0 view .LVU68
 360 0000 C160     	 str r1,[r0,#12]
 228:.././hal/sam4s/uart.c **** }
 361              	 .loc 1 228 1 view .LVU69
 362 0002 7047     	 bx lr
 363              	 .cfi_endproc
 364              	.LFE147:
 366              	 .section .text.uart_get_interrupt_mask,"ax",%progbits
 367              	 .align 1
 368              	 .global uart_get_interrupt_mask
 369              	 .syntax unified
 370              	 .thumb
 371              	 .thumb_func
 372              	 .fpu softvfp
 374              	uart_get_interrupt_mask:
 375              	.LVL18:
 376              	.LFB148:
 229:.././hal/sam4s/uart.c **** 
 230:.././hal/sam4s/uart.c **** /** \brief Read UART interrupt mask.
 231:.././hal/sam4s/uart.c ****  *
 232:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 233:.././hal/sam4s/uart.c ****  *
 234:.././hal/sam4s/uart.c ****  *  \return The interrupt mask value.
 235:.././hal/sam4s/uart.c ****  */
 236:.././hal/sam4s/uart.c **** uint32_t uart_get_interrupt_mask(Uart *p_uart)
 237:.././hal/sam4s/uart.c **** {
 377              	 .loc 1 237 1 is_stmt 1 view-0
 378              	 .cfi_startproc
 379              	 
 380              	 
 381              	 
 238:.././hal/sam4s/uart.c **** 	return p_uart->UART_IMR;
 382              	 .loc 1 238 2 view .LVU71
 383              	 .loc 1 238 15 is_stmt 0 view .LVU72
 384 0000 0069     	 ldr r0,[r0,#16]
 385              	.LVL19:
 239:.././hal/sam4s/uart.c **** }
 386              	 .loc 1 239 1 view .LVU73
 387 0002 7047     	 bx lr
 388              	 .cfi_endproc
 389              	.LFE148:
 391              	 .section .text.uart_get_status,"ax",%progbits
 392              	 .align 1
 393              	 .global uart_get_status
 394              	 .syntax unified
 395              	 .thumb
 396              	 .thumb_func
 397              	 .fpu softvfp
 399              	uart_get_status:
 400              	.LVL20:
 401              	.LFB149:
 240:.././hal/sam4s/uart.c **** 
 241:.././hal/sam4s/uart.c **** /**
 242:.././hal/sam4s/uart.c ****  * \brief Get current status.
 243:.././hal/sam4s/uart.c ****  *
 244:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 245:.././hal/sam4s/uart.c ****  *
 246:.././hal/sam4s/uart.c ****  * \return The current UART status.
 247:.././hal/sam4s/uart.c ****  */
 248:.././hal/sam4s/uart.c **** uint32_t uart_get_status(Uart *p_uart)
 249:.././hal/sam4s/uart.c **** {
 402              	 .loc 1 249 1 is_stmt 1 view-0
 403              	 .cfi_startproc
 404              	 
 405              	 
 406              	 
 250:.././hal/sam4s/uart.c **** 	return p_uart->UART_SR;
 407              	 .loc 1 250 2 view .LVU75
 408              	 .loc 1 250 15 is_stmt 0 view .LVU76
 409 0000 4069     	 ldr r0,[r0,#20]
 410              	.LVL21:
 251:.././hal/sam4s/uart.c **** }
 411              	 .loc 1 251 1 view .LVU77
 412 0002 7047     	 bx lr
 413              	 .cfi_endproc
 414              	.LFE149:
 416              	 .section .text.uart_reset_status,"ax",%progbits
 417              	 .align 1
 418              	 .global uart_reset_status
 419              	 .syntax unified
 420              	 .thumb
 421              	 .thumb_func
 422              	 .fpu softvfp
 424              	uart_reset_status:
 425              	.LVL22:
 426              	.LFB150:
 252:.././hal/sam4s/uart.c **** 
 253:.././hal/sam4s/uart.c **** /**
 254:.././hal/sam4s/uart.c ****  * \brief Reset status bits.
 255:.././hal/sam4s/uart.c ****  *
 256:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 257:.././hal/sam4s/uart.c ****  */
 258:.././hal/sam4s/uart.c **** void uart_reset_status(Uart *p_uart)
 259:.././hal/sam4s/uart.c **** {
 427              	 .loc 1 259 1 is_stmt 1 view-0
 428              	 .cfi_startproc
 429              	 
 430              	 
 431              	 
 260:.././hal/sam4s/uart.c **** 	p_uart->UART_CR = UART_CR_RSTSTA;
 432              	 .loc 1 260 2 view .LVU79
 433              	 .loc 1 260 18 is_stmt 0 view .LVU80
 434 0000 4FF48073 	 mov r3,#256
 435 0004 0360     	 str r3,[r0]
 261:.././hal/sam4s/uart.c **** }
 436              	 .loc 1 261 1 view .LVU81
 437 0006 7047     	 bx lr
 438              	 .cfi_endproc
 439              	.LFE150:
 441              	 .section .text.uart_is_tx_ready,"ax",%progbits
 442              	 .align 1
 443              	 .global uart_is_tx_ready
 444              	 .syntax unified
 445              	 .thumb
 446              	 .thumb_func
 447              	 .fpu softvfp
 449              	uart_is_tx_ready:
 450              	.LVL23:
 451              	.LFB151:
 262:.././hal/sam4s/uart.c **** 
 263:.././hal/sam4s/uart.c **** /**
 264:.././hal/sam4s/uart.c ****  * \brief Check if Transmit is Ready.
 265:.././hal/sam4s/uart.c ****  * Check if data has been loaded in UART_THR and is waiting to be loaded in the
 266:.././hal/sam4s/uart.c ****  * Transmit Shift Register (TSR).
 267:.././hal/sam4s/uart.c ****  *
 268:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 269:.././hal/sam4s/uart.c ****  *
 270:.././hal/sam4s/uart.c ****  * \retval 1 Data has been transmitted.
 271:.././hal/sam4s/uart.c ****  * \retval 0 Transmit is not ready, data pending.
 272:.././hal/sam4s/uart.c ****  */
 273:.././hal/sam4s/uart.c **** uint32_t uart_is_tx_ready(Uart *p_uart)
 274:.././hal/sam4s/uart.c **** {
 452              	 .loc 1 274 1 is_stmt 1 view-0
 453              	 .cfi_startproc
 454              	 
 455              	 
 456              	 
 275:.././hal/sam4s/uart.c **** 	return (p_uart->UART_SR & UART_SR_TXRDY) > 0;
 457              	 .loc 1 275 2 view .LVU83
 458              	 .loc 1 275 16 is_stmt 0 view .LVU84
 459 0000 4069     	 ldr r0,[r0,#20]
 460              	.LVL24:
 276:.././hal/sam4s/uart.c **** }
 461              	 .loc 1 276 1 view .LVU85
 462 0002 C0F34000 	 ubfx r0,r0,#1,#1
 463 0006 7047     	 bx lr
 464              	 .cfi_endproc
 465              	.LFE151:
 467              	 .section .text.uart_is_tx_empty,"ax",%progbits
 468              	 .align 1
 469              	 .global uart_is_tx_empty
 470              	 .syntax unified
 471              	 .thumb
 472              	 .thumb_func
 473              	 .fpu softvfp
 475              	uart_is_tx_empty:
 476              	.LVL25:
 477              	.LFB152:
 277:.././hal/sam4s/uart.c **** 
 278:.././hal/sam4s/uart.c **** /**
 279:.././hal/sam4s/uart.c ****  * \brief Check if Transmit Hold Register is empty.
 280:.././hal/sam4s/uart.c ****  * Check if the last data written in UART_THR has been loaded in TSR and the
 281:.././hal/sam4s/uart.c ****  * last data loaded in TSR has been transmitted.
 282:.././hal/sam4s/uart.c ****  *
 283:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 284:.././hal/sam4s/uart.c ****  *
 285:.././hal/sam4s/uart.c ****  * \retval 1 Transmitter is empty.
 286:.././hal/sam4s/uart.c ****  * \retval 0 Transmitter is not empty.
 287:.././hal/sam4s/uart.c ****  */
 288:.././hal/sam4s/uart.c **** uint32_t uart_is_tx_empty(Uart *p_uart)
 289:.././hal/sam4s/uart.c **** {
 478              	 .loc 1 289 1 is_stmt 1 view-0
 479              	 .cfi_startproc
 480              	 
 481              	 
 482              	 
 290:.././hal/sam4s/uart.c **** 	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
 483              	 .loc 1 290 2 view .LVU87
 484              	 .loc 1 290 16 is_stmt 0 view .LVU88
 485 0000 4069     	 ldr r0,[r0,#20]
 486              	.LVL26:
 291:.././hal/sam4s/uart.c **** }
 487              	 .loc 1 291 1 view .LVU89
 488 0002 C0F34020 	 ubfx r0,r0,#9,#1
 489 0006 7047     	 bx lr
 490              	 .cfi_endproc
 491              	.LFE152:
 493              	 .section .text.uart_is_rx_ready,"ax",%progbits
 494              	 .align 1
 495              	 .global uart_is_rx_ready
 496              	 .syntax unified
 497              	 .thumb
 498              	 .thumb_func
 499              	 .fpu softvfp
 501              	uart_is_rx_ready:
 502              	.LVL27:
 503              	.LFB153:
 292:.././hal/sam4s/uart.c **** 
 293:.././hal/sam4s/uart.c **** /**
 294:.././hal/sam4s/uart.c ****  * \brief Check if Received data is ready.
 295:.././hal/sam4s/uart.c ****  * Check if data has been received and loaded in UART_RHR.
 296:.././hal/sam4s/uart.c ****  *
 297:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 298:.././hal/sam4s/uart.c ****  *
 299:.././hal/sam4s/uart.c ****  * \retval 1 One data has been received.
 300:.././hal/sam4s/uart.c ****  * \retval 0 No data has been received.
 301:.././hal/sam4s/uart.c ****  */
 302:.././hal/sam4s/uart.c **** uint32_t uart_is_rx_ready(Uart *p_uart)
 303:.././hal/sam4s/uart.c **** {
 504              	 .loc 1 303 1 is_stmt 1 view-0
 505              	 .cfi_startproc
 506              	 
 507              	 
 508              	 
 304:.././hal/sam4s/uart.c **** 	return (p_uart->UART_SR & UART_SR_RXRDY) > 0;
 509              	 .loc 1 304 2 view .LVU91
 510              	 .loc 1 304 16 is_stmt 0 view .LVU92
 511 0000 4069     	 ldr r0,[r0,#20]
 512              	.LVL28:
 305:.././hal/sam4s/uart.c **** }
 513              	 .loc 1 305 1 view .LVU93
 514 0002 00F00100 	 and r0,r0,#1
 515 0006 7047     	 bx lr
 516              	 .cfi_endproc
 517              	.LFE153:
 519              	 .section .text.uart_is_tx_buf_empty,"ax",%progbits
 520              	 .align 1
 521              	 .global uart_is_tx_buf_empty
 522              	 .syntax unified
 523              	 .thumb
 524              	 .thumb_func
 525              	 .fpu softvfp
 527              	uart_is_tx_buf_empty:
 528              	.LFB163:
 529              	 .cfi_startproc
 530              	 
 531              	 
 532              	 
 533 0000 4069     	 ldr r0,[r0,#20]
 534 0002 C0F34020 	 ubfx r0,r0,#9,#1
 535 0006 7047     	 bx lr
 536              	 .cfi_endproc
 537              	.LFE163:
 539              	 .section .text.uart_set_clock_divisor,"ax",%progbits
 540              	 .align 1
 541              	 .global uart_set_clock_divisor
 542              	 .syntax unified
 543              	 .thumb
 544              	 .thumb_func
 545              	 .fpu softvfp
 547              	uart_set_clock_divisor:
 548              	.LVL29:
 549              	.LFB155:
 306:.././hal/sam4s/uart.c **** 
 307:.././hal/sam4s/uart.c **** /**
 308:.././hal/sam4s/uart.c ****  * \brief Check if both transmit buffers are sent out.
 309:.././hal/sam4s/uart.c ****  *
 310:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 311:.././hal/sam4s/uart.c ****  *
 312:.././hal/sam4s/uart.c ****  * \retval 1 Transmit buffer is empty.
 313:.././hal/sam4s/uart.c ****  * \retval 0 Transmit buffer is not empty.
 314:.././hal/sam4s/uart.c ****  */
 315:.././hal/sam4s/uart.c **** uint32_t uart_is_tx_buf_empty(Uart *p_uart)
 316:.././hal/sam4s/uart.c **** {
 317:.././hal/sam4s/uart.c **** 	return (p_uart->UART_SR & UART_SR_TXEMPTY) > 0;
 318:.././hal/sam4s/uart.c **** }
 319:.././hal/sam4s/uart.c **** 
 320:.././hal/sam4s/uart.c **** /**
 321:.././hal/sam4s/uart.c ****  * \brief Set UART clock divisor value
 322:.././hal/sam4s/uart.c ****  *
 323:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 324:.././hal/sam4s/uart.c ****  * \param us_divisor Value to be set.
 325:.././hal/sam4s/uart.c ****  *
 326:.././hal/sam4s/uart.c ****  */
 327:.././hal/sam4s/uart.c **** void uart_set_clock_divisor(Uart *p_uart, uint16_t us_divisor)
 328:.././hal/sam4s/uart.c **** {
 550              	 .loc 1 328 1 is_stmt 1 view-0
 551              	 .cfi_startproc
 552              	 
 553              	 
 554              	 
 329:.././hal/sam4s/uart.c **** 	p_uart->UART_BRGR = us_divisor;
 555              	 .loc 1 329 2 view .LVU95
 556              	 .loc 1 329 20 is_stmt 0 view .LVU96
 557 0000 0162     	 str r1,[r0,#32]
 330:.././hal/sam4s/uart.c **** }
 558              	 .loc 1 330 1 view .LVU97
 559 0002 7047     	 bx lr
 560              	 .cfi_endproc
 561              	.LFE155:
 563              	 .section .text.uart_write,"ax",%progbits
 564              	 .align 1
 565              	 .global uart_write
 566              	 .syntax unified
 567              	 .thumb
 568              	 .thumb_func
 569              	 .fpu softvfp
 571              	uart_write:
 572              	.LVL30:
 573              	.LFB156:
 331:.././hal/sam4s/uart.c **** 
 332:.././hal/sam4s/uart.c **** /**
 333:.././hal/sam4s/uart.c ****  * \brief Write to UART Transmit Holding Register
 334:.././hal/sam4s/uart.c ****  * Before writing user should check if tx is ready (or empty).
 335:.././hal/sam4s/uart.c ****  *
 336:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 337:.././hal/sam4s/uart.c ****  * \param data Data to be sent.
 338:.././hal/sam4s/uart.c ****  *
 339:.././hal/sam4s/uart.c ****  * \retval 0 Success.
 340:.././hal/sam4s/uart.c ****  * \retval 1 I/O Failure, UART is not ready.
 341:.././hal/sam4s/uart.c ****  */
 342:.././hal/sam4s/uart.c **** uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
 343:.././hal/sam4s/uart.c **** {
 574              	 .loc 1 343 1 is_stmt 1 view-0
 575              	 .cfi_startproc
 576              	 
 577              	 
 578              	 
 344:.././hal/sam4s/uart.c **** 	/* Check if the transmitter is ready */
 345:.././hal/sam4s/uart.c **** 	if (!(p_uart->UART_SR & UART_SR_TXRDY))
 579              	 .loc 1 345 2 view .LVU99
 580              	 .loc 1 345 14 is_stmt 0 view .LVU100
 581 0000 4369     	 ldr r3,[r0,#20]
 582              	 .loc 1 345 5 view .LVU101
 583 0002 9B07     	 lsls r3,r3,#30
 346:.././hal/sam4s/uart.c **** 		return 1;
 347:.././hal/sam4s/uart.c **** 
 348:.././hal/sam4s/uart.c **** 	/* Send character */
 349:.././hal/sam4s/uart.c **** 	p_uart->UART_THR = uc_data;
 584              	 .loc 1 349 2 is_stmt 1 view .LVU102
 585              	 .loc 1 349 19 is_stmt 0 view .LVU103
 586 0004 46BF     	 itte mi
 587 0006 C161     	 strmi r1,[r0,#28]
 350:.././hal/sam4s/uart.c **** 	return 0;
 588              	 .loc 1 350 2 is_stmt 1 view .LVU104
 589              	 .loc 1 350 9 is_stmt 0 view .LVU105
 590 0008 0020     	 movmi r0,#0
 591              	.LVL31:
 346:.././hal/sam4s/uart.c **** 		return 1;
 592              	 .loc 1 346 10 view .LVU106
 593 000a 0120     	 movpl r0,#1
 351:.././hal/sam4s/uart.c **** }
 594              	 .loc 1 351 1 view .LVU107
 595 000c 7047     	 bx lr
 596              	 .cfi_endproc
 597              	.LFE156:
 599              	 .section .text.uart_read,"ax",%progbits
 600              	 .align 1
 601              	 .global uart_read
 602              	 .syntax unified
 603              	 .thumb
 604              	 .thumb_func
 605              	 .fpu softvfp
 607              	uart_read:
 608              	.LVL32:
 609              	.LFB157:
 352:.././hal/sam4s/uart.c **** 
 353:.././hal/sam4s/uart.c **** /**
 354:.././hal/sam4s/uart.c ****  * \brief Read from UART Receive Holding Register.
 355:.././hal/sam4s/uart.c ****  * Before reading user should check if rx is ready.
 356:.././hal/sam4s/uart.c ****  *
 357:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 358:.././hal/sam4s/uart.c ****  *
 359:.././hal/sam4s/uart.c ****  * \retval 0 Success.
 360:.././hal/sam4s/uart.c ****  * \retval 1 I/O Failure, UART is not ready.
 361:.././hal/sam4s/uart.c ****  */
 362:.././hal/sam4s/uart.c **** uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
 363:.././hal/sam4s/uart.c **** {
 610              	 .loc 1 363 1 is_stmt 1 view-0
 611              	 .cfi_startproc
 612              	 
 613              	 
 614              	 
 364:.././hal/sam4s/uart.c **** 	/* Check if the receiver is ready */
 365:.././hal/sam4s/uart.c **** 	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
 615              	 .loc 1 365 2 view .LVU109
 616              	 .loc 1 365 13 is_stmt 0 view .LVU110
 617 0000 4369     	 ldr r3,[r0,#20]
 618              	 .loc 1 365 5 view .LVU111
 619 0002 DB07     	 lsls r3,r3,#31
 366:.././hal/sam4s/uart.c **** 		return 1;
 367:.././hal/sam4s/uart.c **** 
 368:.././hal/sam4s/uart.c **** 	/* Read character */
 369:.././hal/sam4s/uart.c **** 	*puc_data = (uint8_t) p_uart->UART_RHR;
 620              	 .loc 1 369 2 is_stmt 1 view .LVU112
 621              	 .loc 1 369 30 is_stmt 0 view .LVU113
 622 0004 43BF     	 ittte mi
 623 0006 8369     	 ldrmi r3,[r0,#24]
 624              	 .loc 1 369 14 view .LVU114
 625 0008 0B70     	 strbmi r3,[r1]
 370:.././hal/sam4s/uart.c **** 	return 0;
 626              	 .loc 1 370 2 is_stmt 1 view .LVU115
 627              	 .loc 1 370 9 is_stmt 0 view .LVU116
 628 000a 0020     	 movmi r0,#0
 629              	.LVL33:
 366:.././hal/sam4s/uart.c **** 		return 1;
 630              	 .loc 1 366 10 view .LVU117
 631 000c 0120     	 movpl r0,#1
 371:.././hal/sam4s/uart.c **** }
 632              	 .loc 1 371 1 view .LVU118
 633 000e 7047     	 bx lr
 634              	 .cfi_endproc
 635              	.LFE157:
 637              	 .section .text.uart_is_rx_buf_end,"ax",%progbits
 638              	 .align 1
 639              	 .global uart_is_rx_buf_end
 640              	 .syntax unified
 641              	 .thumb
 642              	 .thumb_func
 643              	 .fpu softvfp
 645              	uart_is_rx_buf_end:
 646              	.LVL34:
 647              	.LFB158:
 372:.././hal/sam4s/uart.c **** 
 373:.././hal/sam4s/uart.c **** #if (!SAMV71 && !SAMV70 && !SAME70 && !SAMS70)
 374:.././hal/sam4s/uart.c **** /**
 375:.././hal/sam4s/uart.c ****  * \brief Check if one receive buffer is filled.
 376:.././hal/sam4s/uart.c ****  *
 377:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 378:.././hal/sam4s/uart.c ****  *
 379:.././hal/sam4s/uart.c ****  * \retval 1 Receive is completed.
 380:.././hal/sam4s/uart.c ****  * \retval 0 Receive is still pending.
 381:.././hal/sam4s/uart.c ****  */
 382:.././hal/sam4s/uart.c **** uint32_t uart_is_rx_buf_end(Uart *p_uart)
 383:.././hal/sam4s/uart.c **** {
 648              	 .loc 1 383 1 is_stmt 1 view-0
 649              	 .cfi_startproc
 650              	 
 651              	 
 652              	 
 384:.././hal/sam4s/uart.c **** 	return (p_uart->UART_SR & UART_SR_ENDRX) > 0;
 653              	 .loc 1 384 2 view .LVU120
 654              	 .loc 1 384 16 is_stmt 0 view .LVU121
 655 0000 4069     	 ldr r0,[r0,#20]
 656              	.LVL35:
 385:.././hal/sam4s/uart.c **** }
 657              	 .loc 1 385 1 view .LVU122
 658 0002 C0F3C000 	 ubfx r0,r0,#3,#1
 659 0006 7047     	 bx lr
 660              	 .cfi_endproc
 661              	.LFE158:
 663              	 .section .text.uart_is_tx_buf_end,"ax",%progbits
 664              	 .align 1
 665              	 .global uart_is_tx_buf_end
 666              	 .syntax unified
 667              	 .thumb
 668              	 .thumb_func
 669              	 .fpu softvfp
 671              	uart_is_tx_buf_end:
 672              	.LVL36:
 673              	.LFB159:
 386:.././hal/sam4s/uart.c **** 
 387:.././hal/sam4s/uart.c **** /**
 388:.././hal/sam4s/uart.c ****  * \brief Check if one transmit buffer is sent out.
 389:.././hal/sam4s/uart.c ****  *
 390:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 391:.././hal/sam4s/uart.c ****  *
 392:.././hal/sam4s/uart.c ****  * \retval 1 Transmit is completed.
 393:.././hal/sam4s/uart.c ****  * \retval 0 Transmit is still pending.
 394:.././hal/sam4s/uart.c ****  */
 395:.././hal/sam4s/uart.c **** uint32_t uart_is_tx_buf_end(Uart *p_uart)
 396:.././hal/sam4s/uart.c **** {
 674              	 .loc 1 396 1 is_stmt 1 view-0
 675              	 .cfi_startproc
 676              	 
 677              	 
 678              	 
 397:.././hal/sam4s/uart.c **** 	return (p_uart->UART_SR & UART_SR_ENDTX) > 0;
 679              	 .loc 1 397 2 view .LVU124
 680              	 .loc 1 397 16 is_stmt 0 view .LVU125
 681 0000 4069     	 ldr r0,[r0,#20]
 682              	.LVL37:
 398:.././hal/sam4s/uart.c **** }
 683              	 .loc 1 398 1 view .LVU126
 684 0002 C0F30010 	 ubfx r0,r0,#4,#1
 685 0006 7047     	 bx lr
 686              	 .cfi_endproc
 687              	.LFE159:
 689              	 .section .text.uart_is_rx_buf_full,"ax",%progbits
 690              	 .align 1
 691              	 .global uart_is_rx_buf_full
 692              	 .syntax unified
 693              	 .thumb
 694              	 .thumb_func
 695              	 .fpu softvfp
 697              	uart_is_rx_buf_full:
 698              	.LVL38:
 699              	.LFB160:
 399:.././hal/sam4s/uart.c **** 
 400:.././hal/sam4s/uart.c **** /**
 401:.././hal/sam4s/uart.c ****  * \brief Check if both receive buffers are full.
 402:.././hal/sam4s/uart.c ****  *
 403:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 404:.././hal/sam4s/uart.c ****  *
 405:.././hal/sam4s/uart.c ****  * \retval 1 Receive buffers are full.
 406:.././hal/sam4s/uart.c ****  * \retval 0 Receive buffers are not full.
 407:.././hal/sam4s/uart.c ****  */
 408:.././hal/sam4s/uart.c **** uint32_t uart_is_rx_buf_full(Uart *p_uart)
 409:.././hal/sam4s/uart.c **** {
 700              	 .loc 1 409 1 is_stmt 1 view-0
 701              	 .cfi_startproc
 702              	 
 703              	 
 704              	 
 410:.././hal/sam4s/uart.c **** 	return (p_uart->UART_SR & UART_SR_RXBUFF) > 0;
 705              	 .loc 1 410 2 view .LVU128
 706              	 .loc 1 410 16 is_stmt 0 view .LVU129
 707 0000 4069     	 ldr r0,[r0,#20]
 708              	.LVL39:
 411:.././hal/sam4s/uart.c **** }
 709              	 .loc 1 411 1 view .LVU130
 710 0002 C0F30030 	 ubfx r0,r0,#12,#1
 711 0006 7047     	 bx lr
 712              	 .cfi_endproc
 713              	.LFE160:
 715              	 .section .text.uart_get_pdc_base,"ax",%progbits
 716              	 .align 1
 717              	 .global uart_get_pdc_base
 718              	 .syntax unified
 719              	 .thumb
 720              	 .thumb_func
 721              	 .fpu softvfp
 723              	uart_get_pdc_base:
 724              	.LVL40:
 725              	.LFB161:
 412:.././hal/sam4s/uart.c **** 
 413:.././hal/sam4s/uart.c **** /**
 414:.././hal/sam4s/uart.c ****  * \brief Get UART PDC base address.
 415:.././hal/sam4s/uart.c ****  *
 416:.././hal/sam4s/uart.c ****  * \param p_uart Pointer to a UART instance.
 417:.././hal/sam4s/uart.c ****  *
 418:.././hal/sam4s/uart.c ****  * \return UART PDC registers base for PDC driver to access.
 419:.././hal/sam4s/uart.c ****  */
 420:.././hal/sam4s/uart.c **** Pdc *uart_get_pdc_base(Uart *p_uart)
 421:.././hal/sam4s/uart.c **** {
 726              	 .loc 1 421 1 is_stmt 1 view-0
 727              	 .cfi_startproc
 728              	 
 729              	 
 730              	 
 422:.././hal/sam4s/uart.c **** 	Pdc *p_pdc_base;
 731              	 .loc 1 422 2 view .LVU132
 423:.././hal/sam4s/uart.c **** 
 424:.././hal/sam4s/uart.c **** #if (SAM3S || SAM3N || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
 425:.././hal/sam4s/uart.c **** 	if (p_uart == UART0)
 732              	 .loc 1 425 2 view .LVU133
 426:.././hal/sam4s/uart.c **** 		p_pdc_base = PDC_UART0;
 427:.././hal/sam4s/uart.c **** #elif (SAM3XA || SAM3U)
 428:.././hal/sam4s/uart.c **** 	if (p_uart == UART)
 429:.././hal/sam4s/uart.c **** 		p_pdc_base = PDC_UART;
 430:.././hal/sam4s/uart.c **** #else
 431:.././hal/sam4s/uart.c **** #error "Unsupported device"
 432:.././hal/sam4s/uart.c **** #endif
 433:.././hal/sam4s/uart.c **** 
 434:.././hal/sam4s/uart.c **** #if (SAM3S || SAM4S || SAM4E || SAM4N || SAM4C || SAMG || SAM4CP || SAM4CM)
 435:.././hal/sam4s/uart.c **** 	if (p_uart == UART1)
 733              	 .loc 1 435 2 view .LVU134
 436:.././hal/sam4s/uart.c **** 		p_pdc_base = PDC_UART1;
 437:.././hal/sam4s/uart.c **** #endif
 438:.././hal/sam4s/uart.c **** 
 439:.././hal/sam4s/uart.c **** #if (SAM4N)
 440:.././hal/sam4s/uart.c **** 	if (p_uart == UART2)
 441:.././hal/sam4s/uart.c **** 		p_pdc_base = PDC_UART2;
 442:.././hal/sam4s/uart.c **** #endif
 443:.././hal/sam4s/uart.c **** 
 444:.././hal/sam4s/uart.c **** 	return p_pdc_base;
 445:.././hal/sam4s/uart.c **** }
 734              	 .loc 1 445 1 is_stmt 0 view .LVU135
 735 0000 0349     	 ldr r1,.L35
 736 0002 044A     	 ldr r2,.L35+4
 737 0004 044B     	 ldr r3,.L35+8
 738 0006 8842     	 cmp r0,r1
 739 0008 14BF     	 ite ne
 740 000a 1046     	 movne r0,r2
 741 000c 1846     	 moveq r0,r3
 742              	.LVL41:
 743              	 .loc 1 445 1 view .LVU136
 744 000e 7047     	 bx lr
 745              	.L36:
 746              	 .align 2
 747              	.L35:
 748 0010 00080E40 	 .word 1074661376
 749 0014 00070E40 	 .word 1074661120
 750 0018 00090E40 	 .word 1074661632
 751              	 .cfi_endproc
 752              	.LFE161:
 754              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
 755              	 .align 2
 758              	cpu_irq_critical_section_counter:
 759 0000 00000000 	 .space 4
 760              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
 763              	cpu_irq_prev_interrupt_state:
 764 0000 00       	 .space 1
 765              	 .text
 766              	.Letext0:
 767              	 .file 2 "c:\\chipwh~2\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 768              	 .file 3 "c:\\chipwh~2\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 769              	 .file 4 ".././hal/sam4s/inc/component/component_pdc.h"
 770              	 .file 5 ".././hal/sam4s/inc/component/component_uart.h"
 771              	 .file 6 ".././hal/sam4s/inc/interrupt/interrupt_sam_nvic.h"
 772              	 .file 7 ".././hal/sam4s/inc/uart.h"
DEFINED SYMBOLS
                            *ABS*:00000000 uart.c
    {standard input}:16     .text.uart_init:00000000 $t
    {standard input}:24     .text.uart_init:00000000 uart_init
    {standard input}:94     .text.uart_enable_tx:00000000 $t
    {standard input}:101    .text.uart_enable_tx:00000000 uart_enable_tx
    {standard input}:119    .text.uart_disable_tx:00000000 $t
    {standard input}:126    .text.uart_disable_tx:00000000 uart_disable_tx
    {standard input}:144    .text.uart_reset_tx:00000000 $t
    {standard input}:151    .text.uart_reset_tx:00000000 uart_reset_tx
    {standard input}:169    .text.uart_enable_rx:00000000 $t
    {standard input}:176    .text.uart_enable_rx:00000000 uart_enable_rx
    {standard input}:194    .text.uart_disable_rx:00000000 $t
    {standard input}:201    .text.uart_disable_rx:00000000 uart_disable_rx
    {standard input}:219    .text.uart_reset_rx:00000000 $t
    {standard input}:226    .text.uart_reset_rx:00000000 uart_reset_rx
    {standard input}:244    .text.uart_enable:00000000 $t
    {standard input}:251    .text.uart_enable:00000000 uart_enable
    {standard input}:269    .text.uart_disable:00000000 $t
    {standard input}:276    .text.uart_disable:00000000 uart_disable
    {standard input}:294    .text.uart_reset:00000000 $t
    {standard input}:301    .text.uart_reset:00000000 uart_reset
    {standard input}:319    .text.uart_enable_interrupt:00000000 $t
    {standard input}:326    .text.uart_enable_interrupt:00000000 uart_enable_interrupt
    {standard input}:343    .text.uart_disable_interrupt:00000000 $t
    {standard input}:350    .text.uart_disable_interrupt:00000000 uart_disable_interrupt
    {standard input}:367    .text.uart_get_interrupt_mask:00000000 $t
    {standard input}:374    .text.uart_get_interrupt_mask:00000000 uart_get_interrupt_mask
    {standard input}:392    .text.uart_get_status:00000000 $t
    {standard input}:399    .text.uart_get_status:00000000 uart_get_status
    {standard input}:417    .text.uart_reset_status:00000000 $t
    {standard input}:424    .text.uart_reset_status:00000000 uart_reset_status
    {standard input}:442    .text.uart_is_tx_ready:00000000 $t
    {standard input}:449    .text.uart_is_tx_ready:00000000 uart_is_tx_ready
    {standard input}:468    .text.uart_is_tx_empty:00000000 $t
    {standard input}:475    .text.uart_is_tx_empty:00000000 uart_is_tx_empty
    {standard input}:494    .text.uart_is_rx_ready:00000000 $t
    {standard input}:501    .text.uart_is_rx_ready:00000000 uart_is_rx_ready
    {standard input}:520    .text.uart_is_tx_buf_empty:00000000 $t
    {standard input}:527    .text.uart_is_tx_buf_empty:00000000 uart_is_tx_buf_empty
    {standard input}:540    .text.uart_set_clock_divisor:00000000 $t
    {standard input}:547    .text.uart_set_clock_divisor:00000000 uart_set_clock_divisor
    {standard input}:564    .text.uart_write:00000000 $t
    {standard input}:571    .text.uart_write:00000000 uart_write
    {standard input}:600    .text.uart_read:00000000 $t
    {standard input}:607    .text.uart_read:00000000 uart_read
    {standard input}:638    .text.uart_is_rx_buf_end:00000000 $t
    {standard input}:645    .text.uart_is_rx_buf_end:00000000 uart_is_rx_buf_end
    {standard input}:664    .text.uart_is_tx_buf_end:00000000 $t
    {standard input}:671    .text.uart_is_tx_buf_end:00000000 uart_is_tx_buf_end
    {standard input}:690    .text.uart_is_rx_buf_full:00000000 $t
    {standard input}:697    .text.uart_is_rx_buf_full:00000000 uart_is_rx_buf_full
    {standard input}:716    .text.uart_get_pdc_base:00000000 $t
    {standard input}:723    .text.uart_get_pdc_base:00000000 uart_get_pdc_base
    {standard input}:748    .text.uart_get_pdc_base:00000010 $d
    {standard input}:755    .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:758    .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:763    .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:764    .bss.cpu_irq_prev_interrupt_state:00000000 $d
                           .group:00000000 wm4.0.545a0e1134fc651afe6e71660705947f
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.parts.h.38.09ccce703cc30b12360b0e797fac8cb6
                           .group:00000000 wm4.tpaste.h.38.f9caafafc33cddaf7097f68661fce374
                           .group:00000000 wm4.stringz.h.38.451b1c9629f877d07c6b3529fe5b37b2
                           .group:00000000 wm4.mrepeat.h.52.224450943b2762ae34ad2cae2fa96ad2
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam4s2b.h.221.db99b1f5dbb5d4301dbbbaff13b63e70
                           .group:00000000 wm4.core_cm4.h.43.9593ac0dcec24a3a6f1d638d754e90b2
                           .group:00000000 wm4.core_cmInstr.h.39.53f0cdf363d7ba01993152fdcb6be5d3
                           .group:00000000 wm4.core_cmSimd.h.43.c355993beb49ccd10586af5b1cfe5aee
                           .group:00000000 wm4.core_cm4.h.201.504dd1a6bdf57a6296d26f255ae618b9
                           .group:00000000 wm4.component_acc.h.36.308f7d4c1685c8ebd00910c37bbeab26
                           .group:00000000 wm4.component_adc.h.36.b8477219496e42be1d01ccb1b6f6b02b
                           .group:00000000 wm4.component_chipid.h.36.cb4a4222aca9bee8d01f4aa49afe4d6d
                           .group:00000000 wm4.component_crccu.h.36.1d71ce61706000275b271d03beaec6d2
                           .group:00000000 wm4.component_dacc.h.36.0b87b1e719912b5885bdf9531e0e43d6
                           .group:00000000 wm4.component_efc.h.36.a6b4458c43d27669aaa6147006e1eb74
                           .group:00000000 wm4.component_gpbr.h.36.595122ea9c79505c4e73c9e7421802a8
                           .group:00000000 wm4.component_hsmci.h.36.ccf6dd1a128877835aec3d40c12745dd
                           .group:00000000 wm4.component_matrix.h.36.8f1d7aeed86a08ab4d936e5a0f026440
                           .group:00000000 wm4.component_pdc.h.36.363e6546b41ce8a14a922d18930df184
                           .group:00000000 wm4.component_pio.h.36.f033c3341fbeea7d2a04545c9a72bd24
                           .group:00000000 wm4.component_pmc.h.36.2771b76afbda6351cb4cf4c6708887d5
                           .group:00000000 wm4.component_pwm.h.36.0cd735c74e99ef7d330cb87d1f16c213
                           .group:00000000 wm4.component_rstc.h.36.1af4b8140176d86bc0af5b861fd3a623
                           .group:00000000 wm4.component_rtc.h.36.c865407d28492a40a128dee548893efe
                           .group:00000000 wm4.component_rtt.h.36.46adad6456893b38ef49ae9a2d0afea1
                           .group:00000000 wm4.component_spi.h.36.a18850bcdd90fcb2d130155fa94829ea
                           .group:00000000 wm4.component_ssc.h.36.6ffc46b5a0a9219bd5c90b3f63510b0f
                           .group:00000000 wm4.component_supc.h.36.0db4554695c6e864e5338e4faca84d88
                           .group:00000000 wm4.component_tc.h.36.af47419b07ade32b2d1423414983d2f7
                           .group:00000000 wm4.component_twi.h.36.3496bc3884f63f906fd446649da75de1
                           .group:00000000 wm4.component_uart.h.36.74e9355d463b56860c56764a9be37213
                           .group:00000000 wm4.component_udp.h.36.8cb9530d4bf5319aabe6158f5e738b3d
                           .group:00000000 wm4.component_usart.h.36.5e91c114006f7b551a45955ae29cb6cf
                           .group:00000000 wm4.component_wdt.h.36.277adc27b017beabbb9f7b11b0fa46f2
                           .group:00000000 wm4.instance_hsmci.h.36.9855cb84ff287cffb479099857800873
                           .group:00000000 wm4.instance_ssc.h.36.630afe78e802d5fc05c6224c23890fe1
                           .group:00000000 wm4.instance_spi.h.36.325bf539a06b58ad3327698a7ef68d81
                           .group:00000000 wm4.instance_tc0.h.36.fbfa021f96aebd3d46fa1937156b0b0a
                           .group:00000000 wm4.instance_twi0.h.36.13a0f0822f7bd9074e9b846b04ed10b9
                           .group:00000000 wm4.instance_twi1.h.36.6c6b55c3fab76b3818eb5314bf7bc410
                           .group:00000000 wm4.instance_pwm.h.36.1b555f9fd14d69df968818a3882b2cde
                           .group:00000000 wm4.instance_usart0.h.36.3b6138f7be7c01038525724f6c5d6c1e
                           .group:00000000 wm4.instance_usart1.h.36.137c36ec170c7ca2c1f8e046f5d0e0c9
                           .group:00000000 wm4.instance_udp.h.36.b94eabb27893117a74b4d6faebd80bc6
                           .group:00000000 wm4.instance_adc.h.36.84184448551cb0a3c52160d178904d14
                           .group:00000000 wm4.instance_dacc.h.36.28a68c12285ab1a6b24d06876c4b8807
                           .group:00000000 wm4.instance_acc.h.36.71d96a8f2214f8a9d18eec4d2d93f130
                           .group:00000000 wm4.instance_crccu.h.36.549cca511b407ab33982b56bae0c25ac
                           .group:00000000 wm4.instance_matrix.h.36.da03b47f7e819cfcead8ef1cd71b60ce
                           .group:00000000 wm4.instance_pmc.h.36.002f4765e9f18dc4b183b779163ab06e
                           .group:00000000 wm4.instance_uart0.h.36.fa62b2ed6ce17806cd77556aa65a73f5
                           .group:00000000 wm4.instance_chipid.h.36.6f5f676d52e3e21dba5d88a4bb87d922
                           .group:00000000 wm4.instance_uart1.h.36.bc11f9c4189a4ac15cce81cf9f40fcf9
                           .group:00000000 wm4.instance_efc0.h.36.67a3a70e962ac1d6ef8fcee0e9fd4a9b
                           .group:00000000 wm4.instance_pioa.h.36.27d92aa6d00d8b6a2b34acdeee1aa60a
                           .group:00000000 wm4.instance_piob.h.36.b0f95d3fb66ff01bcd91fb6a4cb54dc3
                           .group:00000000 wm4.instance_rstc.h.36.f8bcddbd3310cbb6a39c155e9e6b3cfb
                           .group:00000000 wm4.instance_supc.h.36.17878f57a77a9d368090917738ff3e02
                           .group:00000000 wm4.instance_rtt.h.36.8759ab7e2580c101b6db702769407cb0
                           .group:00000000 wm4.instance_wdt.h.36.ab83587b138c65dcd29a29119835b92a
                           .group:00000000 wm4.instance_rtc.h.36.52aa67a6a7c945bf00db9fb9d057e3e0
                           .group:00000000 wm4.instance_gpbr.h.36.b2cfd4dee03ed0c28ecb9eb233d2ac42
                           .group:00000000 wm4.sam4s2b.h.313.04ed20c80f538f8fadb9388a8469283e
                           .group:00000000 wm4.pio_sam4s2b.h.36.e1b33fead6a6e1ee98b2f4cba4bb11b4
                           .group:00000000 wm4.sam4s2b.h.450.98a9c8ea67d90470c8554ffe87c8398a
                           .group:00000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.cdefs.h.49.3d0fe8ea14e93bda8c589d4f684b21b8
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.81.f75af8228a71cd19fa09df23f58333e2
                           .group:00000000 wm4.interrupt_sam_nvic.h.77.5650b866702c5f625c80d648ec551823
                           .group:00000000 wm4.compiler.h.420.b563cf39b91298e26f28e0fd38c47072
                           .group:00000000 wm4.uart.h.51.1990b5699ac49b40fc65ef377d2247a6

NO UNDEFINED SYMBOLS

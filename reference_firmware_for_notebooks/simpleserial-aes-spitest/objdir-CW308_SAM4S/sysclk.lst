   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,4
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "sysclk.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.sysclk_set_prescalers,"ax",%progbits
  16              	 .align 1
  17              	 .global sysclk_set_prescalers
  18              	 .arch armv7e-m
  19              	 .syntax unified
  20              	 .thumb
  21              	 .thumb_func
  22              	 .fpu softvfp
  24              	sysclk_set_prescalers:
  25              	.LVL0:
  26              	.LFB156:
  27              	 .file 1 ".././hal/sam4s/sysclk.c"
   1:.././hal/sam4s/sysclk.c **** /**
   2:.././hal/sam4s/sysclk.c ****  * \file
   3:.././hal/sam4s/sysclk.c ****  *
   4:.././hal/sam4s/sysclk.c ****  * \brief Chip-specific system clock management functions.
   5:.././hal/sam4s/sysclk.c ****  *
   6:.././hal/sam4s/sysclk.c ****  * Copyright (c) 2011-2018 Microchip Technology Inc. and its subsidiaries.
   7:.././hal/sam4s/sysclk.c ****  *
   8:.././hal/sam4s/sysclk.c ****  * \asf_license_start
   9:.././hal/sam4s/sysclk.c ****  *
  10:.././hal/sam4s/sysclk.c ****  * \page License
  11:.././hal/sam4s/sysclk.c ****  *
  12:.././hal/sam4s/sysclk.c ****  * Subject to your compliance with these terms, you may use Microchip
  13:.././hal/sam4s/sysclk.c ****  * software and any derivatives exclusively with Microchip products.
  14:.././hal/sam4s/sysclk.c ****  * It is your responsibility to comply with third party license terms applicable
  15:.././hal/sam4s/sysclk.c ****  * to your use of third party software (including open source software) that
  16:.././hal/sam4s/sysclk.c ****  * may accompany Microchip software.
  17:.././hal/sam4s/sysclk.c ****  *
  18:.././hal/sam4s/sysclk.c ****  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES,
  19:.././hal/sam4s/sysclk.c ****  * WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE,
  20:.././hal/sam4s/sysclk.c ****  * INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY,
  21:.././hal/sam4s/sysclk.c ****  * AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT WILL MICROCHIP BE
  22:.././hal/sam4s/sysclk.c ****  * LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, INCIDENTAL OR CONSEQUENTIAL
  23:.././hal/sam4s/sysclk.c ****  * LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE
  24:.././hal/sam4s/sysclk.c ****  * SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE
  25:.././hal/sam4s/sysclk.c ****  * POSSIBILITY OR THE DAMAGES ARE FORESEEABLE.  TO THE FULLEST EXTENT
  26:.././hal/sam4s/sysclk.c ****  * ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN ANY WAY
  27:.././hal/sam4s/sysclk.c ****  * RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
  28:.././hal/sam4s/sysclk.c ****  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
  29:.././hal/sam4s/sysclk.c ****  *
  30:.././hal/sam4s/sysclk.c ****  * \asf_license_stop
  31:.././hal/sam4s/sysclk.c ****  *
  32:.././hal/sam4s/sysclk.c ****  */
  33:.././hal/sam4s/sysclk.c **** /*
  34:.././hal/sam4s/sysclk.c ****  * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
  35:.././hal/sam4s/sysclk.c ****  */
  36:.././hal/sam4s/sysclk.c **** 
  37:.././hal/sam4s/sysclk.c **** #include <sysclk.h>
  38:.././hal/sam4s/sysclk.c **** 
  39:.././hal/sam4s/sysclk.c **** /// @cond 0
  40:.././hal/sam4s/sysclk.c **** /**INDENT-OFF**/
  41:.././hal/sam4s/sysclk.c **** #ifdef __cplusplus
  42:.././hal/sam4s/sysclk.c **** extern "C" {
  43:.././hal/sam4s/sysclk.c **** #endif
  44:.././hal/sam4s/sysclk.c **** /**INDENT-ON**/
  45:.././hal/sam4s/sysclk.c **** /// @endcond
  46:.././hal/sam4s/sysclk.c **** 
  47:.././hal/sam4s/sysclk.c **** /**
  48:.././hal/sam4s/sysclk.c ****  * \weakgroup sysclk_group
  49:.././hal/sam4s/sysclk.c ****  * @{
  50:.././hal/sam4s/sysclk.c ****  */
  51:.././hal/sam4s/sysclk.c **** 
  52:.././hal/sam4s/sysclk.c **** #if defined(CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
  53:.././hal/sam4s/sysclk.c **** /**
  54:.././hal/sam4s/sysclk.c ****  * \brief boolean signalling that the sysclk_init is done.
  55:.././hal/sam4s/sysclk.c ****  */
  56:.././hal/sam4s/sysclk.c **** uint32_t sysclk_initialized = 0;
  57:.././hal/sam4s/sysclk.c **** #endif
  58:.././hal/sam4s/sysclk.c **** 
  59:.././hal/sam4s/sysclk.c **** /**
  60:.././hal/sam4s/sysclk.c ****  * \brief Set system clock prescaler configuration
  61:.././hal/sam4s/sysclk.c ****  *
  62:.././hal/sam4s/sysclk.c ****  * This function will change the system clock prescaler configuration to
  63:.././hal/sam4s/sysclk.c ****  * match the parameters.
  64:.././hal/sam4s/sysclk.c ****  *
  65:.././hal/sam4s/sysclk.c ****  * \note The parameters to this function are device-specific.
  66:.././hal/sam4s/sysclk.c ****  *
  67:.././hal/sam4s/sysclk.c ****  * \param cpu_shift The CPU clock will be divided by \f$2^{mck\_pres}\f$
  68:.././hal/sam4s/sysclk.c ****  */
  69:.././hal/sam4s/sysclk.c **** void sysclk_set_prescalers(uint32_t ul_pres)
  70:.././hal/sam4s/sysclk.c **** {
  28              	 .loc 1 70 1 view-0
  29              	 .cfi_startproc
  30              	 
  31              	 
  71:.././hal/sam4s/sysclk.c **** 	pmc_mck_set_prescaler(ul_pres);
  32              	 .loc 1 71 2 view .LVU1
  70:.././hal/sam4s/sysclk.c **** 	pmc_mck_set_prescaler(ul_pres);
  33              	 .loc 1 70 1 is_stmt 0 view .LVU2
  34 0000 10B5     	 push {r4,lr}
  35              	.LCFI0:
  36              	 .cfi_def_cfa_offset 8
  37              	 .cfi_offset 4,-8
  38              	 .cfi_offset 14,-4
  39              	 .loc 1 71 2 view .LVU3
  40 0002 034B     	 ldr r3,.L2
  41 0004 9847     	 blx r3
  42              	.LVL1:
  72:.././hal/sam4s/sysclk.c **** 	SystemCoreClockUpdate();
  43              	 .loc 1 72 2 is_stmt 1 view .LVU4
  73:.././hal/sam4s/sysclk.c **** }
  44              	 .loc 1 73 1 is_stmt 0 view .LVU5
  45 0006 BDE81040 	 pop {r4,lr}
  46              	.LCFI1:
  47              	 .cfi_restore 14
  48              	 .cfi_restore 4
  49              	 .cfi_def_cfa_offset 0
  72:.././hal/sam4s/sysclk.c **** 	SystemCoreClockUpdate();
  50              	 .loc 1 72 2 view .LVU6
  51 000a 024B     	 ldr r3,.L2+4
  52 000c 1847     	 bx r3
  53              	.LVL2:
  54              	.L3:
  55 000e 00BF     	 .align 2
  56              	.L2:
  57 0010 00000000 	 .word pmc_mck_set_prescaler
  58 0014 00000000 	 .word SystemCoreClockUpdate
  59              	 .cfi_endproc
  60              	.LFE156:
  62              	 .section .text.sysclk_set_source,"ax",%progbits
  63              	 .align 1
  64              	 .global sysclk_set_source
  65              	 .syntax unified
  66              	 .thumb
  67              	 .thumb_func
  68              	 .fpu softvfp
  70              	sysclk_set_source:
  71              	.LVL3:
  72              	.LFB157:
  74:.././hal/sam4s/sysclk.c **** 
  75:.././hal/sam4s/sysclk.c **** /**
  76:.././hal/sam4s/sysclk.c ****  * \brief Change the source of the main system clock.
  77:.././hal/sam4s/sysclk.c ****  *
  78:.././hal/sam4s/sysclk.c ****  * \param src The new system clock source. Must be one of the constants
  79:.././hal/sam4s/sysclk.c ****  * from the <em>System Clock Sources</em> section.
  80:.././hal/sam4s/sysclk.c ****  */
  81:.././hal/sam4s/sysclk.c **** void sysclk_set_source(uint32_t ul_src)
  82:.././hal/sam4s/sysclk.c **** {
  73              	 .loc 1 82 1 is_stmt 1 view-0
  74              	 .cfi_startproc
  75              	 
  76              	 
  83:.././hal/sam4s/sysclk.c **** 	switch (ul_src) {
  77              	 .loc 1 83 2 view .LVU8
  82:.././hal/sam4s/sysclk.c **** 	switch (ul_src) {
  78              	 .loc 1 82 1 is_stmt 0 view .LVU9
  79 0000 10B5     	 push {r4,lr}
  80              	.LCFI2:
  81              	 .cfi_def_cfa_offset 8
  82              	 .cfi_offset 4,-8
  83              	 .cfi_offset 14,-4
  84 0002 0928     	 cmp r0,#9
  85 0004 09D8     	 bhi .L5
  86 0006 DFE800F0 	 tbb [pc,r0]
  87              	.L7:
  88 000a 05       	 .byte (.L10-.L7)/2
  89 000b 05       	 .byte (.L10-.L7)/2
  90 000c 05       	 .byte (.L10-.L7)/2
  91 000d 0C       	 .byte (.L9-.L7)/2
  92 000e 0C       	 .byte (.L9-.L7)/2
  93 000f 0C       	 .byte (.L9-.L7)/2
  94 0010 0C       	 .byte (.L9-.L7)/2
  95 0011 0C       	 .byte (.L9-.L7)/2
  96 0012 0E       	 .byte (.L8-.L7)/2
  97 0013 10       	 .byte (.L6-.L7)/2
  98              	 .p2align 1
  99              	.L10:
  84:.././hal/sam4s/sysclk.c **** 	case SYSCLK_SRC_SLCK_RC:
  85:.././hal/sam4s/sysclk.c **** 	case SYSCLK_SRC_SLCK_XTAL:
  86:.././hal/sam4s/sysclk.c **** 	case SYSCLK_SRC_SLCK_BYPASS:
  87:.././hal/sam4s/sysclk.c **** 		pmc_mck_set_source(PMC_MCKR_CSS_SLOW_CLK);
 100              	 .loc 1 87 3 is_stmt 1 view .LVU10
 101 0014 0020     	 movs r0,#0
 102              	.LVL4:
 103              	.L11:
  88:.././hal/sam4s/sysclk.c **** 		break;
  89:.././hal/sam4s/sysclk.c **** 
  90:.././hal/sam4s/sysclk.c **** 	case SYSCLK_SRC_MAINCK_4M_RC:
  91:.././hal/sam4s/sysclk.c **** 	case SYSCLK_SRC_MAINCK_8M_RC:
  92:.././hal/sam4s/sysclk.c **** 	case SYSCLK_SRC_MAINCK_12M_RC:
  93:.././hal/sam4s/sysclk.c **** 	case SYSCLK_SRC_MAINCK_XTAL:
  94:.././hal/sam4s/sysclk.c **** 	case SYSCLK_SRC_MAINCK_BYPASS:
  95:.././hal/sam4s/sysclk.c **** 		pmc_mck_set_source(PMC_MCKR_CSS_MAIN_CLK);
  96:.././hal/sam4s/sysclk.c **** 		break;
  97:.././hal/sam4s/sysclk.c **** 
  98:.././hal/sam4s/sysclk.c **** 	case SYSCLK_SRC_PLLACK:
  99:.././hal/sam4s/sysclk.c **** 		pmc_mck_set_source(PMC_MCKR_CSS_PLLA_CLK);
 100:.././hal/sam4s/sysclk.c **** 		break;
 101:.././hal/sam4s/sysclk.c **** 
 102:.././hal/sam4s/sysclk.c **** 	case SYSCLK_SRC_PLLBCK:
 103:.././hal/sam4s/sysclk.c **** 		pmc_mck_set_source(PMC_MCKR_CSS_PLLB_CLK);
 104              	 .loc 1 103 3 is_stmt 0 view .LVU11
 105 0016 064B     	 ldr r3,.L12
 106 0018 9847     	 blx r3
 107              	.LVL5:
 104:.././hal/sam4s/sysclk.c **** 		break;
 108              	 .loc 1 104 3 is_stmt 1 view .LVU12
 109              	.L5:
 105:.././hal/sam4s/sysclk.c **** 	}
 106:.././hal/sam4s/sysclk.c **** 
 107:.././hal/sam4s/sysclk.c **** 	SystemCoreClockUpdate();
 110              	 .loc 1 107 2 view .LVU13
 108:.././hal/sam4s/sysclk.c **** }
 111              	 .loc 1 108 1 is_stmt 0 view .LVU14
 112 001a BDE81040 	 pop {r4,lr}
 113              	.LCFI3:
 114              	 .cfi_remember_state
 115              	 .cfi_restore 14
 116              	 .cfi_restore 4
 117              	 .cfi_def_cfa_offset 0
 107:.././hal/sam4s/sysclk.c **** }
 118              	 .loc 1 107 2 view .LVU15
 119 001e 054B     	 ldr r3,.L12+4
 120 0020 1847     	 bx r3
 121              	.LVL6:
 122              	.L9:
 123              	.LCFI4:
 124              	 .cfi_restore_state
  95:.././hal/sam4s/sysclk.c **** 		break;
 125              	 .loc 1 95 3 is_stmt 1 view .LVU16
 126 0022 0120     	 movs r0,#1
 127              	.LVL7:
  95:.././hal/sam4s/sysclk.c **** 		break;
 128              	 .loc 1 95 3 is_stmt 0 view .LVU17
 129 0024 F7E7     	 b .L11
 130              	.LVL8:
 131              	.L8:
  99:.././hal/sam4s/sysclk.c **** 		break;
 132              	 .loc 1 99 3 is_stmt 1 view .LVU18
 133 0026 0220     	 movs r0,#2
 134              	.LVL9:
  99:.././hal/sam4s/sysclk.c **** 		break;
 135              	 .loc 1 99 3 is_stmt 0 view .LVU19
 136 0028 F5E7     	 b .L11
 137              	.LVL10:
 138              	.L6:
 103:.././hal/sam4s/sysclk.c **** 		break;
 139              	 .loc 1 103 3 is_stmt 1 view .LVU20
 140 002a 0320     	 movs r0,#3
 141              	.LVL11:
 103:.././hal/sam4s/sysclk.c **** 		break;
 142              	 .loc 1 103 3 is_stmt 0 view .LVU21
 143 002c F3E7     	 b .L11
 144              	.L13:
 145 002e 00BF     	 .align 2
 146              	.L12:
 147 0030 00000000 	 .word pmc_mck_set_source
 148 0034 00000000 	 .word SystemCoreClockUpdate
 149              	 .cfi_endproc
 150              	.LFE157:
 152              	 .section .text.sysclk_init,"ax",%progbits
 153              	 .align 1
 154              	 .global sysclk_init
 155              	 .syntax unified
 156              	 .thumb
 157              	 .thumb_func
 158              	 .fpu softvfp
 160              	sysclk_init:
 161              	.LFB158:
 109:.././hal/sam4s/sysclk.c **** 
 110:.././hal/sam4s/sysclk.c **** #if defined(CONFIG_USBCLK_SOURCE) || defined(__DOXYGEN__)
 111:.././hal/sam4s/sysclk.c **** /**
 112:.././hal/sam4s/sysclk.c ****  * \brief Enable USB clock.
 113:.././hal/sam4s/sysclk.c ****  *
 114:.././hal/sam4s/sysclk.c ****  * \note The SAM3S UDP hardware interprets div as div+1. For readability the hardware div+1
 115:.././hal/sam4s/sysclk.c ****  * is hidden in this implementation. Use div as div effective value.
 116:.././hal/sam4s/sysclk.c ****  *
 117:.././hal/sam4s/sysclk.c ****  * \param pll_id Source of the USB clock.
 118:.././hal/sam4s/sysclk.c ****  * \param div Actual clock divisor. Must be superior to 0.
 119:.././hal/sam4s/sysclk.c ****  */
 120:.././hal/sam4s/sysclk.c **** void sysclk_enable_usb(void)
 121:.././hal/sam4s/sysclk.c **** {
 122:.././hal/sam4s/sysclk.c **** 	Assert(CONFIG_USBCLK_DIV > 0);
 123:.././hal/sam4s/sysclk.c **** 
 124:.././hal/sam4s/sysclk.c **** #ifdef CONFIG_PLL0_SOURCE
 125:.././hal/sam4s/sysclk.c **** 	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_PLL0) {
 126:.././hal/sam4s/sysclk.c **** 		struct pll_config pllcfg;
 127:.././hal/sam4s/sysclk.c **** 
 128:.././hal/sam4s/sysclk.c **** 		pll_enable_source(CONFIG_PLL0_SOURCE);
 129:.././hal/sam4s/sysclk.c **** 		pll_config_defaults(&pllcfg, 0);
 130:.././hal/sam4s/sysclk.c **** 		pll_enable(&pllcfg, 0);
 131:.././hal/sam4s/sysclk.c **** 		pll_wait_for_lock(0);
 132:.././hal/sam4s/sysclk.c **** 		pmc_switch_udpck_to_pllack(CONFIG_USBCLK_DIV - 1);
 133:.././hal/sam4s/sysclk.c **** 		pmc_enable_udpck();
 134:.././hal/sam4s/sysclk.c **** 		return;
 135:.././hal/sam4s/sysclk.c **** 	}
 136:.././hal/sam4s/sysclk.c **** #endif
 137:.././hal/sam4s/sysclk.c **** 
 138:.././hal/sam4s/sysclk.c **** #ifdef CONFIG_PLL1_SOURCE
 139:.././hal/sam4s/sysclk.c **** 	if (CONFIG_USBCLK_SOURCE == USBCLK_SRC_PLL1) {
 140:.././hal/sam4s/sysclk.c **** 		struct pll_config pllcfg;
 141:.././hal/sam4s/sysclk.c **** 
 142:.././hal/sam4s/sysclk.c **** 		pll_enable_source(CONFIG_PLL1_SOURCE);
 143:.././hal/sam4s/sysclk.c **** 		pll_config_defaults(&pllcfg, 1);
 144:.././hal/sam4s/sysclk.c **** 		pll_enable(&pllcfg, 1);
 145:.././hal/sam4s/sysclk.c **** 		pll_wait_for_lock(1);
 146:.././hal/sam4s/sysclk.c **** 		pmc_switch_udpck_to_pllbck(CONFIG_USBCLK_DIV - 1);
 147:.././hal/sam4s/sysclk.c **** 		pmc_enable_udpck();
 148:.././hal/sam4s/sysclk.c **** 		return;
 149:.././hal/sam4s/sysclk.c **** 	}
 150:.././hal/sam4s/sysclk.c **** #endif
 151:.././hal/sam4s/sysclk.c **** }
 152:.././hal/sam4s/sysclk.c **** 
 153:.././hal/sam4s/sysclk.c **** /**
 154:.././hal/sam4s/sysclk.c ****  * \brief Disable the USB clock.
 155:.././hal/sam4s/sysclk.c ****  *
 156:.././hal/sam4s/sysclk.c ****  * \note This implementation does not switch off the PLL, it just turns off the USB clock.
 157:.././hal/sam4s/sysclk.c ****  */
 158:.././hal/sam4s/sysclk.c **** void sysclk_disable_usb(void)
 159:.././hal/sam4s/sysclk.c **** {
 160:.././hal/sam4s/sysclk.c **** 	pmc_disable_udpck();
 161:.././hal/sam4s/sysclk.c **** }
 162:.././hal/sam4s/sysclk.c **** #endif // CONFIG_USBCLK_SOURCE
 163:.././hal/sam4s/sysclk.c **** 
 164:.././hal/sam4s/sysclk.c **** void sysclk_init(void)
 165:.././hal/sam4s/sysclk.c **** {
 162              	 .loc 1 165 1 is_stmt 1 view-0
 163              	 .cfi_startproc
 164              	 
 165              	 
 166:.././hal/sam4s/sysclk.c **** 	/* Set flash wait state to max in case the below clock switching. */
 167:.././hal/sam4s/sysclk.c **** 	system_init_flash(CHIP_FREQ_CPU_MAX);
 166              	 .loc 1 167 2 view .LVU23
 165:.././hal/sam4s/sysclk.c **** 	/* Set flash wait state to max in case the below clock switching. */
 167              	 .loc 1 165 1 is_stmt 0 view .LVU24
 168 0000 10B5     	 push {r4,lr}
 169              	.LCFI5:
 170              	 .cfi_def_cfa_offset 8
 171              	 .cfi_offset 4,-8
 172              	 .cfi_offset 14,-4
 173              	 .loc 1 167 2 view .LVU25
 174 0002 0548     	 ldr r0,.L15
 175 0004 054C     	 ldr r4,.L15+4
 176 0006 A047     	 blx r4
 177              	.LVL12:
 168:.././hal/sam4s/sysclk.c **** 
 169:.././hal/sam4s/sysclk.c **** 	/* Config system clock setting */
 170:.././hal/sam4s/sysclk.c **** 	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_RC) {
 178              	 .loc 1 170 2 is_stmt 1 view .LVU26
 171:.././hal/sam4s/sysclk.c **** 		osc_enable(OSC_SLCK_32K_RC);
 172:.././hal/sam4s/sysclk.c **** 		osc_wait_ready(OSC_SLCK_32K_RC);
 173:.././hal/sam4s/sysclk.c **** 		pmc_switch_mck_to_sclk(CONFIG_SYSCLK_PRES);
 174:.././hal/sam4s/sysclk.c **** 	}
 175:.././hal/sam4s/sysclk.c **** 
 176:.././hal/sam4s/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_XTAL) {
 179              	 .loc 1 176 7 view .LVU27
 177:.././hal/sam4s/sysclk.c **** 		osc_enable(OSC_SLCK_32K_XTAL);
 178:.././hal/sam4s/sysclk.c **** 		osc_wait_ready(OSC_SLCK_32K_XTAL);
 179:.././hal/sam4s/sysclk.c **** 		pmc_switch_mck_to_sclk(CONFIG_SYSCLK_PRES);
 180:.././hal/sam4s/sysclk.c **** 	}
 181:.././hal/sam4s/sysclk.c **** 
 182:.././hal/sam4s/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_BYPASS) {
 180              	 .loc 1 182 7 view .LVU28
 183:.././hal/sam4s/sysclk.c **** 		osc_enable(OSC_SLCK_32K_BYPASS);
 184:.././hal/sam4s/sysclk.c **** 		osc_wait_ready(OSC_SLCK_32K_BYPASS);
 185:.././hal/sam4s/sysclk.c **** 		pmc_switch_mck_to_sclk(CONFIG_SYSCLK_PRES);
 186:.././hal/sam4s/sysclk.c **** 	}
 187:.././hal/sam4s/sysclk.c **** 
 188:.././hal/sam4s/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_4M_RC) {
 181              	 .loc 1 188 7 view .LVU29
 189:.././hal/sam4s/sysclk.c **** 		/* Already running from SYSCLK_SRC_MAINCK_4M_RC */
 190:.././hal/sam4s/sysclk.c **** 	}
 182              	 .loc 1 190 2 view .LVU30
 191:.././hal/sam4s/sysclk.c **** 
 192:.././hal/sam4s/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_8M_RC) {
 193:.././hal/sam4s/sysclk.c **** 		osc_enable(OSC_MAINCK_8M_RC);
 194:.././hal/sam4s/sysclk.c **** 		osc_wait_ready(OSC_MAINCK_8M_RC);
 195:.././hal/sam4s/sysclk.c **** 		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 196:.././hal/sam4s/sysclk.c **** 	}
 197:.././hal/sam4s/sysclk.c **** 
 198:.././hal/sam4s/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_12M_RC) {
 199:.././hal/sam4s/sysclk.c **** 		osc_enable(OSC_MAINCK_12M_RC);
 200:.././hal/sam4s/sysclk.c **** 		osc_wait_ready(OSC_MAINCK_12M_RC);
 201:.././hal/sam4s/sysclk.c **** 		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 202:.././hal/sam4s/sysclk.c **** 	}
 203:.././hal/sam4s/sysclk.c **** 
 204:.././hal/sam4s/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_XTAL) {
 205:.././hal/sam4s/sysclk.c **** 		osc_enable(OSC_MAINCK_XTAL);
 206:.././hal/sam4s/sysclk.c **** 		osc_wait_ready(OSC_MAINCK_XTAL);
 207:.././hal/sam4s/sysclk.c **** 		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 208:.././hal/sam4s/sysclk.c **** 	}
 209:.././hal/sam4s/sysclk.c **** 
 210:.././hal/sam4s/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
 211:.././hal/sam4s/sysclk.c **** 		osc_enable(OSC_MAINCK_BYPASS);
 212:.././hal/sam4s/sysclk.c **** 		osc_wait_ready(OSC_MAINCK_BYPASS);
 213:.././hal/sam4s/sysclk.c **** 		pmc_switch_mck_to_mainck(CONFIG_SYSCLK_PRES);
 214:.././hal/sam4s/sysclk.c **** 	}
 215:.././hal/sam4s/sysclk.c **** 
 216:.././hal/sam4s/sysclk.c **** #ifdef CONFIG_PLL0_SOURCE
 217:.././hal/sam4s/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
 218:.././hal/sam4s/sysclk.c **** 		struct pll_config pllcfg;
 219:.././hal/sam4s/sysclk.c **** 
 220:.././hal/sam4s/sysclk.c **** 		pll_enable_source(CONFIG_PLL0_SOURCE);
 221:.././hal/sam4s/sysclk.c **** 		pll_config_defaults(&pllcfg, 0);
 222:.././hal/sam4s/sysclk.c **** 		pll_enable(&pllcfg, 0);
 223:.././hal/sam4s/sysclk.c **** 		pll_wait_for_lock(0);
 224:.././hal/sam4s/sysclk.c **** 		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
 225:.././hal/sam4s/sysclk.c **** 	}
 226:.././hal/sam4s/sysclk.c **** #endif
 227:.././hal/sam4s/sysclk.c **** 
 228:.././hal/sam4s/sysclk.c **** #ifdef CONFIG_PLL1_SOURCE
 229:.././hal/sam4s/sysclk.c **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLBCK) {
 230:.././hal/sam4s/sysclk.c **** 		struct pll_config pllcfg;
 231:.././hal/sam4s/sysclk.c **** 
 232:.././hal/sam4s/sysclk.c **** 		pll_enable_source(CONFIG_PLL1_SOURCE);
 233:.././hal/sam4s/sysclk.c **** 		pll_config_defaults(&pllcfg, 1);
 234:.././hal/sam4s/sysclk.c **** 		pll_enable(&pllcfg, 1);
 235:.././hal/sam4s/sysclk.c **** 		pll_wait_for_lock(1);
 236:.././hal/sam4s/sysclk.c **** 		pmc_switch_mck_to_pllbck(CONFIG_SYSCLK_PRES);
 237:.././hal/sam4s/sysclk.c **** 	}
 238:.././hal/sam4s/sysclk.c **** #endif
 239:.././hal/sam4s/sysclk.c **** 
 240:.././hal/sam4s/sysclk.c **** 	/* Update the SystemFrequency variable */
 241:.././hal/sam4s/sysclk.c **** 	SystemCoreClockUpdate();
 183              	 .loc 1 241 2 view .LVU31
 184 0008 054B     	 ldr r3,.L15+8
 185 000a 9847     	 blx r3
 186              	.LVL13:
 242:.././hal/sam4s/sysclk.c **** 
 243:.././hal/sam4s/sysclk.c **** 	/* Set a flash wait state depending on the new cpu frequency */
 244:.././hal/sam4s/sysclk.c **** 	system_init_flash(sysclk_get_cpu_hz());
 187              	 .loc 1 244 2 view .LVU32
 188              	 .file 2 ".././hal/sam4s/inc/sam4s/sysclk.h"
   1:.././hal/sam4s/inc/sam4s/sysclk.h **** /**
   2:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \file
   3:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
   4:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \brief Chip-specific system clock management functions.
   5:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
   6:.././hal/sam4s/inc/sam4s/sysclk.h ****  * Copyright (c) 2011-2018 Microchip Technology Inc. and its subsidiaries.
   7:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
   8:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \asf_license_start
   9:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
  10:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \page License
  11:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
  12:.././hal/sam4s/inc/sam4s/sysclk.h ****  * Subject to your compliance with these terms, you may use Microchip
  13:.././hal/sam4s/inc/sam4s/sysclk.h ****  * software and any derivatives exclusively with Microchip products.
  14:.././hal/sam4s/inc/sam4s/sysclk.h ****  * It is your responsibility to comply with third party license terms applicable
  15:.././hal/sam4s/inc/sam4s/sysclk.h ****  * to your use of third party software (including open source software) that
  16:.././hal/sam4s/inc/sam4s/sysclk.h ****  * may accompany Microchip software.
  17:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
  18:.././hal/sam4s/inc/sam4s/sysclk.h ****  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES,
  19:.././hal/sam4s/inc/sam4s/sysclk.h ****  * WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE,
  20:.././hal/sam4s/inc/sam4s/sysclk.h ****  * INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY,
  21:.././hal/sam4s/inc/sam4s/sysclk.h ****  * AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT WILL MICROCHIP BE
  22:.././hal/sam4s/inc/sam4s/sysclk.h ****  * LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, INCIDENTAL OR CONSEQUENTIAL
  23:.././hal/sam4s/inc/sam4s/sysclk.h ****  * LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE
  24:.././hal/sam4s/inc/sam4s/sysclk.h ****  * SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE
  25:.././hal/sam4s/inc/sam4s/sysclk.h ****  * POSSIBILITY OR THE DAMAGES ARE FORESEEABLE.  TO THE FULLEST EXTENT
  26:.././hal/sam4s/inc/sam4s/sysclk.h ****  * ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN ANY WAY
  27:.././hal/sam4s/inc/sam4s/sysclk.h ****  * RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
  28:.././hal/sam4s/inc/sam4s/sysclk.h ****  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
  29:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
  30:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \asf_license_stop
  31:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
  32:.././hal/sam4s/inc/sam4s/sysclk.h ****  */
  33:.././hal/sam4s/inc/sam4s/sysclk.h **** /*
  34:.././hal/sam4s/inc/sam4s/sysclk.h ****  * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
  35:.././hal/sam4s/inc/sam4s/sysclk.h ****  */
  36:.././hal/sam4s/inc/sam4s/sysclk.h **** 
  37:.././hal/sam4s/inc/sam4s/sysclk.h **** #ifndef CHIP_SYSCLK_H_INCLUDED
  38:.././hal/sam4s/inc/sam4s/sysclk.h **** #define CHIP_SYSCLK_H_INCLUDED
  39:.././hal/sam4s/inc/sam4s/sysclk.h **** 
  40:.././hal/sam4s/inc/sam4s/sysclk.h **** #include <osc.h>
  41:.././hal/sam4s/inc/sam4s/sysclk.h **** #include <pll.h>
  42:.././hal/sam4s/inc/sam4s/sysclk.h **** 
  43:.././hal/sam4s/inc/sam4s/sysclk.h **** /**
  44:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \page sysclk_quickstart Quick Start Guide for the System Clock Management service (SAM4S)
  45:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
  46:.././hal/sam4s/inc/sam4s/sysclk.h ****  * This is the quick start guide for the \ref sysclk_group "System Clock Management"
  47:.././hal/sam4s/inc/sam4s/sysclk.h ****  * service, with step-by-step instructions on how to configure and use the service for
  48:.././hal/sam4s/inc/sam4s/sysclk.h ****  * specific use cases.
  49:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
  50:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \section sysclk_quickstart_usecases System Clock Management use cases
  51:.././hal/sam4s/inc/sam4s/sysclk.h ****  * - \ref sysclk_quickstart_basic
  52:.././hal/sam4s/inc/sam4s/sysclk.h ****  * - \ref sysclk_quickstart_use_case_2
  53:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
  54:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \section sysclk_quickstart_basic Basic usage of the System Clock Management service
  55:.././hal/sam4s/inc/sam4s/sysclk.h ****  * This section will present a basic use case for the System Clock Management service.
  56:.././hal/sam4s/inc/sam4s/sysclk.h ****  * This use case will configure the main system clock to 120MHz, using an internal PLL
  57:.././hal/sam4s/inc/sam4s/sysclk.h ****  * module to multiply the frequency of a crystal attached to the microcontroller.
  58:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
  59:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_prereq Prerequisites
  60:.././hal/sam4s/inc/sam4s/sysclk.h ****  *  - None
  61:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
  62:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_setup_steps Initialization code
  63:.././hal/sam4s/inc/sam4s/sysclk.h ****  * Add to the application initialization code:
  64:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \code
  65:.././hal/sam4s/inc/sam4s/sysclk.h **** 	sysclk_init();
  66:.././hal/sam4s/inc/sam4s/sysclk.h **** \endcode
  67:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
  68:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_setup_steps_workflow Workflow
  69:.././hal/sam4s/inc/sam4s/sysclk.h ****  * -# Configure the system clocks according to the settings in conf_clock.h:
  70:.././hal/sam4s/inc/sam4s/sysclk.h ****  *    \code sysclk_init(); \endcode
  71:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
  72:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_example_code Example code
  73:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   Add or uncomment the following in your conf_clock.h header file, commenting out all other
  74:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   definitions of the same symbol(s):
  75:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   \code
  76:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_SYSCLK_SOURCE        SYSCLK_SRC_PLLACK
  77:.././hal/sam4s/inc/sam4s/sysclk.h **** 
  78:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   // Fpll0 = (Fclk * PLL_mul) / PLL_div
  79:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_PLL0_SOURCE          PLL_SRC_MAINCK_XTAL
  80:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_PLL0_MUL             (120000000UL / BOARD_FREQ_MAINCK_XTAL)
  81:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_PLL0_DIV             1
  82:.././hal/sam4s/inc/sam4s/sysclk.h **** 
  83:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   // Fbus = Fsys / BUS_div
  84:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_SYSCLK_PRES          SYSCLK_PRES_1
  85:.././hal/sam4s/inc/sam4s/sysclk.h **** \endcode
  86:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
  87:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \subsection sysclk_quickstart_use_case_1_example_workflow Workflow
  88:.././hal/sam4s/inc/sam4s/sysclk.h ****  *  -# Configure the main system clock to use the output of the PLL module as its source:
  89:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   \code #define CONFIG_SYSCLK_SOURCE          SYSCLK_SRC_PLLACK \endcode
  90:.././hal/sam4s/inc/sam4s/sysclk.h ****  *  -# Configure the PLL module to use the fast external fast crystal oscillator as its source:
  91:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   \code #define CONFIG_PLL0_SOURCE            PLL_SRC_MAINCK_XTAL \endcode
  92:.././hal/sam4s/inc/sam4s/sysclk.h ****  *  -# Configure the PLL module to multiply the external fast crystal oscillator frequency up to 12
  93:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   \code
  94:.././hal/sam4s/inc/sam4s/sysclk.h **** 	#define CONFIG_PLL0_MUL             (120000000UL / BOARD_FREQ_MAINCK_XTAL)
  95:.././hal/sam4s/inc/sam4s/sysclk.h **** 	#define CONFIG_PLL0_DIV             1
  96:.././hal/sam4s/inc/sam4s/sysclk.h **** \endcode
  97:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   \note For user boards, \c BOARD_FREQ_MAINCK_XTAL should be defined in the board \c conf_board.
  98:.././hal/sam4s/inc/sam4s/sysclk.h ****  *         file as the frequency of the fast crystal attached to the microcontroller.
  99:.././hal/sam4s/inc/sam4s/sysclk.h ****  *  -# Configure the main clock to run at the full 120MHz, disable scaling of the main system clock
 100:.././hal/sam4s/inc/sam4s/sysclk.h ****  *    \code
 101:.././hal/sam4s/inc/sam4s/sysclk.h **** 	#define CONFIG_SYSCLK_PRES         SYSCLK_PRES_1
 102:.././hal/sam4s/inc/sam4s/sysclk.h **** \endcode
 103:.././hal/sam4s/inc/sam4s/sysclk.h ****  *    \note Some dividers are powers of two, while others are integer division factors. Refer to th
 104:.././hal/sam4s/inc/sam4s/sysclk.h ****  *          formulas in the conf_clock.h template commented above each division define.
 105:.././hal/sam4s/inc/sam4s/sysclk.h ****  */
 106:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 107:.././hal/sam4s/inc/sam4s/sysclk.h **** /**
 108:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \page sysclk_quickstart_use_case_2 Advanced use case - Peripheral Bus Clock Management (SAM4S)
 109:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 110:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \section sysclk_quickstart_use_case_2 Advanced use case - Peripheral Bus Clock Management
 111:.././hal/sam4s/inc/sam4s/sysclk.h ****  * This section will present a more advanced use case for the System Clock Management service.
 112:.././hal/sam4s/inc/sam4s/sysclk.h ****  * This use case will configure the main system clock to 120MHz, using an internal PLL
 113:.././hal/sam4s/inc/sam4s/sysclk.h ****  * module to multiply the frequency of a crystal attached to the microcontroller. The USB clock
 114:.././hal/sam4s/inc/sam4s/sysclk.h ****  * will be configured via a separate PLL module.
 115:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 116:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \subsection sysclk_quickstart_use_case_2_prereq Prerequisites
 117:.././hal/sam4s/inc/sam4s/sysclk.h ****  *  - None
 118:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 119:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \subsection sysclk_quickstart_use_case_2_setup_steps Initialization code
 120:.././hal/sam4s/inc/sam4s/sysclk.h ****  * Add to the application initialization code:
 121:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \code
 122:.././hal/sam4s/inc/sam4s/sysclk.h **** 	sysclk_init();
 123:.././hal/sam4s/inc/sam4s/sysclk.h **** \endcode
 124:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 125:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \subsection sysclk_quickstart_use_case_2_setup_steps_workflow Workflow
 126:.././hal/sam4s/inc/sam4s/sysclk.h ****  * -# Configure the system clocks according to the settings in conf_clock.h:
 127:.././hal/sam4s/inc/sam4s/sysclk.h ****  *    \code sysclk_init(); \endcode
 128:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 129:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \subsection sysclk_quickstart_use_case_2_example_code Example code
 130:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   Add or uncomment the following in your conf_clock.h header file, commenting out all other
 131:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   definitions of the same symbol(s):
 132:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   \code
 133:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_SYSCLK_SOURCE        SYSCLK_SRC_PLLACK
 134:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 135:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   // Fpll0 = (Fclk * PLL_mul) / PLL_div
 136:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_PLL0_SOURCE          PLL_SRC_MAINCK_XTAL
 137:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_PLL0_MUL             (120000000UL / BOARD_FREQ_MAINCK_XTAL)
 138:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_PLL0_DIV             1
 139:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 140:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   // Fbus = Fsys / BUS_div
 141:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_SYSCLK_PRES          SYSCLK_PRES_1
 142:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 143:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   // Fusb = Fsys / USB_div
 144:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_USBCLK_SOURCE        USBCLK_SRC_PLL1
 145:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_USBCLK_DIV           1
 146:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 147:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   // Fpll1 = (Fclk * PLL_mul) / PLL_div
 148:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_PLL1_SOURCE          PLL_SRC_MAINCK_XTAL
 149:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_PLL1_MUL             (48000000UL / BOARD_FREQ_MAINCK_XTAL)
 150:.././hal/sam4s/inc/sam4s/sysclk.h **** 	   #define CONFIG_PLL1_DIV             1
 151:.././hal/sam4s/inc/sam4s/sysclk.h **** \endcode
 152:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 153:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \subsection sysclk_quickstart_use_case_2_example_workflow Workflow
 154:.././hal/sam4s/inc/sam4s/sysclk.h ****  *  -# Configure the main system clock to use the output of the PLL0 module as its source:
 155:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   \code #define CONFIG_SYSCLK_SOURCE          SYSCLK_SRC_PLLACK \endcode
 156:.././hal/sam4s/inc/sam4s/sysclk.h ****  *  -# Configure the PLL0 module to use the fast external fast crystal oscillator as its source:
 157:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   \code #define CONFIG_PLL0_SOURCE            PLL_SRC_MAINCK_XTAL \endcode
 158:.././hal/sam4s/inc/sam4s/sysclk.h ****  *  -# Configure the PLL0 module to multiply the external fast crystal oscillator frequency up to 1
 159:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   \code
 160:.././hal/sam4s/inc/sam4s/sysclk.h **** 	#define CONFIG_PLL0_MUL             (120000000UL / BOARD_FREQ_MAINCK_XTAL)
 161:.././hal/sam4s/inc/sam4s/sysclk.h **** 	#define CONFIG_PLL0_DIV             1
 162:.././hal/sam4s/inc/sam4s/sysclk.h **** \endcode
 163:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   \note For user boards, \c BOARD_FREQ_MAINCK_XTAL should be defined in the board \c conf_board.
 164:.././hal/sam4s/inc/sam4s/sysclk.h ****  *         file as the frequency of the fast crystal attached to the microcontroller.
 165:.././hal/sam4s/inc/sam4s/sysclk.h ****  *  -# Configure the main clock to run at the full 120MHz, disable scaling of the main system clock
 166:.././hal/sam4s/inc/sam4s/sysclk.h ****  *    \code
 167:.././hal/sam4s/inc/sam4s/sysclk.h **** 	#define CONFIG_SYSCLK_PRES         SYSCLK_PRES_1
 168:.././hal/sam4s/inc/sam4s/sysclk.h **** \endcode
 169:.././hal/sam4s/inc/sam4s/sysclk.h ****  *    \note Some dividers are powers of two, while others are integer division factors. Refer to th
 170:.././hal/sam4s/inc/sam4s/sysclk.h ****  *          formulas in the conf_clock.h template commented above each division define.
 171:.././hal/sam4s/inc/sam4s/sysclk.h ****  *  -# Configure the USB module clock to use the output of the PLL1 module as its source:
 172:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   \code #define CONFIG_SYSCLK_SOURCE          USBCLK_SRC_PLL1 \endcode
 173:.././hal/sam4s/inc/sam4s/sysclk.h ****  *  -# Configure the PLL1 module to use the fast external fast crystal oscillator as its source:
 174:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   \code #define CONFIG_PLL1_SOURCE            PLL_SRC_MAINCK_XTAL \endcode
 175:.././hal/sam4s/inc/sam4s/sysclk.h ****  *  -# Configure the PLL1 module to multiply the external fast crystal oscillator frequency up to 4
 176:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   \code
 177:.././hal/sam4s/inc/sam4s/sysclk.h **** 	#define CONFIG_PLL1_MUL             (48000000UL / BOARD_FREQ_MAINCK_XTAL)
 178:.././hal/sam4s/inc/sam4s/sysclk.h **** 	#define CONFIG_PLL1_DIV             1
 179:.././hal/sam4s/inc/sam4s/sysclk.h **** \endcode
 180:.././hal/sam4s/inc/sam4s/sysclk.h ****  */
 181:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 182:.././hal/sam4s/inc/sam4s/sysclk.h **** /// @cond 0
 183:.././hal/sam4s/inc/sam4s/sysclk.h **** /**INDENT-OFF**/
 184:.././hal/sam4s/inc/sam4s/sysclk.h **** #ifdef __cplusplus
 185:.././hal/sam4s/inc/sam4s/sysclk.h **** extern "C" {
 186:.././hal/sam4s/inc/sam4s/sysclk.h **** #endif
 187:.././hal/sam4s/inc/sam4s/sysclk.h **** /**INDENT-ON**/
 188:.././hal/sam4s/inc/sam4s/sysclk.h **** /// @endcond
 189:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 190:.././hal/sam4s/inc/sam4s/sysclk.h **** /**
 191:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \weakgroup sysclk_group
 192:.././hal/sam4s/inc/sam4s/sysclk.h ****  * @{
 193:.././hal/sam4s/inc/sam4s/sysclk.h ****  */
 194:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 195:.././hal/sam4s/inc/sam4s/sysclk.h **** //! \name Configuration Symbols
 196:.././hal/sam4s/inc/sam4s/sysclk.h **** //@{
 197:.././hal/sam4s/inc/sam4s/sysclk.h **** /**
 198:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \def CONFIG_SYSCLK_SOURCE
 199:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \brief Initial/static main system clock source
 200:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 201:.././hal/sam4s/inc/sam4s/sysclk.h ****  * The main system clock will be configured to use this clock during
 202:.././hal/sam4s/inc/sam4s/sysclk.h ****  * initialization.
 203:.././hal/sam4s/inc/sam4s/sysclk.h ****  */
 204:.././hal/sam4s/inc/sam4s/sysclk.h **** #ifndef CONFIG_SYSCLK_SOURCE
 205:.././hal/sam4s/inc/sam4s/sysclk.h **** # define CONFIG_SYSCLK_SOURCE   SYSCLK_SRC_MAINCK_4M_RC
 206:.././hal/sam4s/inc/sam4s/sysclk.h **** #endif
 207:.././hal/sam4s/inc/sam4s/sysclk.h **** /**
 208:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \def CONFIG_SYSCLK_PRES
 209:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \brief Initial CPU clock divider (mck)
 210:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 211:.././hal/sam4s/inc/sam4s/sysclk.h ****  * The MCK will run at
 212:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \f[
 213:.././hal/sam4s/inc/sam4s/sysclk.h ****  *   f_{MCK} = \frac{f_{sys}}{\mathrm{CONFIG\_SYSCLK\_PRES}}\,\mbox{Hz}
 214:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \f]
 215:.././hal/sam4s/inc/sam4s/sysclk.h ****  * after initialization.
 216:.././hal/sam4s/inc/sam4s/sysclk.h ****  */
 217:.././hal/sam4s/inc/sam4s/sysclk.h **** #ifndef CONFIG_SYSCLK_PRES
 218:.././hal/sam4s/inc/sam4s/sysclk.h **** # define CONFIG_SYSCLK_PRES  0
 219:.././hal/sam4s/inc/sam4s/sysclk.h **** #endif
 220:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 221:.././hal/sam4s/inc/sam4s/sysclk.h **** //@}
 222:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 223:.././hal/sam4s/inc/sam4s/sysclk.h **** //! \name Master Clock Sources (MCK)
 224:.././hal/sam4s/inc/sam4s/sysclk.h **** //@{
 225:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_SRC_SLCK_RC              0       //!< Internal 32kHz RC oscillator as master source 
 226:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_SRC_SLCK_XTAL            1       //!< External 32kHz crystal oscillator as master so
 227:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_SRC_SLCK_BYPASS          2       //!< External 32kHz bypass oscillator as master sou
 228:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_SRC_MAINCK_4M_RC         3       //!< Internal 4MHz RC oscillator as master source c
 229:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_SRC_MAINCK_8M_RC         4       //!< Internal 8MHz RC oscillator as master source c
 230:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_SRC_MAINCK_12M_RC        5       //!< Internal 12MHz RC oscillator as master source 
 231:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_SRC_MAINCK_XTAL          6       //!< External crystal oscillator as master source c
 232:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_SRC_MAINCK_BYPASS        7       //!< External bypass oscillator as master source cl
 233:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_SRC_PLLACK               8       //!< Use PLLACK as master source clock
 234:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_SRC_PLLBCK               9       //!< Use PLLBCK as master source clock
 235:.././hal/sam4s/inc/sam4s/sysclk.h **** //@}
 236:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 237:.././hal/sam4s/inc/sam4s/sysclk.h **** //! \name Master Clock Prescalers (MCK)
 238:.././hal/sam4s/inc/sam4s/sysclk.h **** //@{
 239:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_PRES_1           PMC_MCKR_PRES_CLK_1     //!< Set master clock prescaler to 1
 240:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_PRES_2           PMC_MCKR_PRES_CLK_2     //!< Set master clock prescaler to 2
 241:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_PRES_4           PMC_MCKR_PRES_CLK_4     //!< Set master clock prescaler to 4
 242:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_PRES_8           PMC_MCKR_PRES_CLK_8     //!< Set master clock prescaler to 8
 243:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_PRES_16          PMC_MCKR_PRES_CLK_16    //!< Set master clock prescaler to 16
 244:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_PRES_32          PMC_MCKR_PRES_CLK_32    //!< Set master clock prescaler to 32
 245:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_PRES_64          PMC_MCKR_PRES_CLK_64    //!< Set master clock prescaler to 64
 246:.././hal/sam4s/inc/sam4s/sysclk.h **** #define SYSCLK_PRES_3           PMC_MCKR_PRES_CLK_3     //!< Set master clock prescaler to 3
 247:.././hal/sam4s/inc/sam4s/sysclk.h **** //@}
 248:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 249:.././hal/sam4s/inc/sam4s/sysclk.h **** //! \name USB Clock Sources
 250:.././hal/sam4s/inc/sam4s/sysclk.h **** //@{
 251:.././hal/sam4s/inc/sam4s/sysclk.h **** #define USBCLK_SRC_PLL0       0     //!< Use PLLA
 252:.././hal/sam4s/inc/sam4s/sysclk.h **** #define USBCLK_SRC_PLL1       1     //!< Use PLLB
 253:.././hal/sam4s/inc/sam4s/sysclk.h **** //@}
 254:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 255:.././hal/sam4s/inc/sam4s/sysclk.h **** /**
 256:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \def CONFIG_USBCLK_SOURCE
 257:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \brief Configuration symbol for the USB generic clock source
 258:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 259:.././hal/sam4s/inc/sam4s/sysclk.h ****  * Sets the clock source to use for the USB. The source must also be properly
 260:.././hal/sam4s/inc/sam4s/sysclk.h ****  * configured.
 261:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 262:.././hal/sam4s/inc/sam4s/sysclk.h ****  * Define this to one of the \c USBCLK_SRC_xxx settings. Leave it undefined if
 263:.././hal/sam4s/inc/sam4s/sysclk.h ****  * USB is not required.
 264:.././hal/sam4s/inc/sam4s/sysclk.h ****  */
 265:.././hal/sam4s/inc/sam4s/sysclk.h ****  #ifdef __DOXYGEN__
 266:.././hal/sam4s/inc/sam4s/sysclk.h **** # define CONFIG_USBCLK_SOURCE
 267:.././hal/sam4s/inc/sam4s/sysclk.h **** #endif
 268:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 269:.././hal/sam4s/inc/sam4s/sysclk.h **** /**
 270:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \def CONFIG_USBCLK_DIV
 271:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \brief Configuration symbol for the USB generic clock divider setting
 272:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 273:.././hal/sam4s/inc/sam4s/sysclk.h ****  * Sets the clock division for the USB generic clock. If a USB clock source is
 274:.././hal/sam4s/inc/sam4s/sysclk.h ****  * selected with CONFIG_USBCLK_SOURCE, this configuration symbol must also be
 275:.././hal/sam4s/inc/sam4s/sysclk.h ****  * defined.
 276:.././hal/sam4s/inc/sam4s/sysclk.h ****  */
 277:.././hal/sam4s/inc/sam4s/sysclk.h **** #ifdef __DOXYGEN__
 278:.././hal/sam4s/inc/sam4s/sysclk.h **** # define CONFIG_USBCLK_DIV
 279:.././hal/sam4s/inc/sam4s/sysclk.h **** #endif
 280:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 281:.././hal/sam4s/inc/sam4s/sysclk.h **** /**
 282:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \name Querying the system clock
 283:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 284:.././hal/sam4s/inc/sam4s/sysclk.h ****  * The following functions may be used to query the current frequency of
 285:.././hal/sam4s/inc/sam4s/sysclk.h ****  * the system clock and the CPU and bus clocks derived from it.
 286:.././hal/sam4s/inc/sam4s/sysclk.h ****  * sysclk_get_main_hz() and sysclk_get_cpu_hz() can be assumed to be
 287:.././hal/sam4s/inc/sam4s/sysclk.h ****  * available on all platforms, although some platforms may define
 288:.././hal/sam4s/inc/sam4s/sysclk.h ****  * additional accessors for various chip-internal bus clocks. These are
 289:.././hal/sam4s/inc/sam4s/sysclk.h ****  * usually not intended to be queried directly by generic code.
 290:.././hal/sam4s/inc/sam4s/sysclk.h ****  */
 291:.././hal/sam4s/inc/sam4s/sysclk.h **** //@{
 292:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 293:.././hal/sam4s/inc/sam4s/sysclk.h **** /**
 294:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \brief Return the current rate in Hz of the main system clock
 295:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 296:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \todo This function assumes that the main clock source never changes
 297:.././hal/sam4s/inc/sam4s/sysclk.h ****  * once it's been set up, and that PLL0 always runs at the compile-time
 298:.././hal/sam4s/inc/sam4s/sysclk.h ****  * configured default rate. While this is probably the most common
 299:.././hal/sam4s/inc/sam4s/sysclk.h ****  * configuration, which we want to support as a special case for
 300:.././hal/sam4s/inc/sam4s/sysclk.h ****  * performance reasons, we will at some point need to support more
 301:.././hal/sam4s/inc/sam4s/sysclk.h ****  * dynamic setups as well.
 302:.././hal/sam4s/inc/sam4s/sysclk.h ****  */
 303:.././hal/sam4s/inc/sam4s/sysclk.h **** #if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
 304:.././hal/sam4s/inc/sam4s/sysclk.h **** extern uint32_t sysclk_initialized;
 305:.././hal/sam4s/inc/sam4s/sysclk.h **** #endif
 306:.././hal/sam4s/inc/sam4s/sysclk.h **** static inline uint32_t sysclk_get_main_hz(void)
 307:.././hal/sam4s/inc/sam4s/sysclk.h **** {
 308:.././hal/sam4s/inc/sam4s/sysclk.h **** #if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
 309:.././hal/sam4s/inc/sam4s/sysclk.h **** 	if (!sysclk_initialized ) {
 310:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return OSC_MAINCK_4M_RC_HZ;
 311:.././hal/sam4s/inc/sam4s/sysclk.h **** 	}
 312:.././hal/sam4s/inc/sam4s/sysclk.h **** #endif
 313:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 314:.././hal/sam4s/inc/sam4s/sysclk.h **** 	/* Config system clock setting */
 315:.././hal/sam4s/inc/sam4s/sysclk.h **** 	if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_RC) {
 316:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return OSC_SLCK_32K_RC_HZ;
 317:.././hal/sam4s/inc/sam4s/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_XTAL) {
 318:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return OSC_SLCK_32K_XTAL_HZ;
 319:.././hal/sam4s/inc/sam4s/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_SLCK_BYPASS) {
 320:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return OSC_SLCK_32K_BYPASS_HZ;
 321:.././hal/sam4s/inc/sam4s/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_4M_RC) {
 322:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return OSC_MAINCK_4M_RC_HZ;
 323:.././hal/sam4s/inc/sam4s/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_8M_RC) {
 324:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return OSC_MAINCK_8M_RC_HZ;
 325:.././hal/sam4s/inc/sam4s/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_12M_RC) {
 326:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return OSC_MAINCK_12M_RC_HZ;
 327:.././hal/sam4s/inc/sam4s/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_XTAL) {
 328:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return OSC_MAINCK_XTAL_HZ;
 329:.././hal/sam4s/inc/sam4s/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_BYPASS) {
 330:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return OSC_MAINCK_BYPASS_HZ;
 331:.././hal/sam4s/inc/sam4s/sysclk.h **** 	}
 332:.././hal/sam4s/inc/sam4s/sysclk.h **** #ifdef CONFIG_PLL0_SOURCE
 333:.././hal/sam4s/inc/sam4s/sysclk.h **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
 334:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return pll_get_default_rate(0);
 335:.././hal/sam4s/inc/sam4s/sysclk.h **** 	}
 336:.././hal/sam4s/inc/sam4s/sysclk.h **** #endif
 337:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 338:.././hal/sam4s/inc/sam4s/sysclk.h **** #ifdef CONFIG_PLL1_SOURCE
 339:.././hal/sam4s/inc/sam4s/sysclk.h **** 	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLBCK) {
 340:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return pll_get_default_rate(1);
 341:.././hal/sam4s/inc/sam4s/sysclk.h **** 	}
 342:.././hal/sam4s/inc/sam4s/sysclk.h **** #endif
 343:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 344:.././hal/sam4s/inc/sam4s/sysclk.h **** 	else {
 345:.././hal/sam4s/inc/sam4s/sysclk.h **** 		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
 346:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return 0;
 347:.././hal/sam4s/inc/sam4s/sysclk.h **** 	}
 348:.././hal/sam4s/inc/sam4s/sysclk.h **** }
 349:.././hal/sam4s/inc/sam4s/sysclk.h **** 
 350:.././hal/sam4s/inc/sam4s/sysclk.h **** /**
 351:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \brief Return the current rate in Hz of the CPU clock
 352:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 353:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \todo This function assumes that the CPU always runs at the system
 354:.././hal/sam4s/inc/sam4s/sysclk.h ****  * clock frequency. We want to support at least two more scenarios:
 355:.././hal/sam4s/inc/sam4s/sysclk.h ****  * Fixed CPU/bus clock dividers (config symbols) and dynamic CPU/bus
 356:.././hal/sam4s/inc/sam4s/sysclk.h ****  * clock dividers (which may change at run time). Ditto for all the bus
 357:.././hal/sam4s/inc/sam4s/sysclk.h ****  * clocks.
 358:.././hal/sam4s/inc/sam4s/sysclk.h ****  *
 359:.././hal/sam4s/inc/sam4s/sysclk.h ****  * \return Frequency of the CPU clock, in Hz.
 360:.././hal/sam4s/inc/sam4s/sysclk.h ****  */
 361:.././hal/sam4s/inc/sam4s/sysclk.h **** static inline uint32_t sysclk_get_cpu_hz(void)
 362:.././hal/sam4s/inc/sam4s/sysclk.h **** {
 363:.././hal/sam4s/inc/sam4s/sysclk.h **** 	/* CONFIG_SYSCLK_PRES is the register value for setting the expected */
 364:.././hal/sam4s/inc/sam4s/sysclk.h **** 	/* prescaler, not an immediate value. */
 365:.././hal/sam4s/inc/sam4s/sysclk.h **** 	return sysclk_get_main_hz() /
 189              	 .loc 2 365 2 view .LVU33
 315:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return OSC_SLCK_32K_RC_HZ;
 190              	 .loc 2 315 2 view .LVU34
 317:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return OSC_SLCK_32K_XTAL_HZ;
 191              	 .loc 2 317 9 view .LVU35
 319:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return OSC_SLCK_32K_BYPASS_HZ;
 192              	 .loc 2 319 9 view .LVU36
 321:.././hal/sam4s/inc/sam4s/sysclk.h **** 		return OSC_MAINCK_4M_RC_HZ;
 193              	 .loc 2 321 9 view .LVU37
 322:.././hal/sam4s/inc/sam4s/sysclk.h **** 	} else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_MAINCK_8M_RC) {
 194              	 .loc 2 322 3 view .LVU38
 195              	 .loc 1 244 2 is_stmt 0 view .LVU39
 196 000c 2346     	 mov r3,r4
 197 000e 0548     	 ldr r0,.L15+12
 245:.././hal/sam4s/sysclk.c **** 
 246:.././hal/sam4s/sysclk.c **** #if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
 247:.././hal/sam4s/sysclk.c **** 	/* Signal that the internal frequencies are setup */
 248:.././hal/sam4s/sysclk.c **** 	sysclk_initialized = 1;
 249:.././hal/sam4s/sysclk.c **** #endif
 250:.././hal/sam4s/sysclk.c **** }
 198              	 .loc 1 250 1 view .LVU40
 199 0010 BDE81040 	 pop {r4,lr}
 200              	.LCFI6:
 201              	 .cfi_restore 14
 202              	 .cfi_restore 4
 203              	 .cfi_def_cfa_offset 0
 244:.././hal/sam4s/sysclk.c **** 
 204              	 .loc 1 244 2 view .LVU41
 205 0014 1847     	 bx r3
 206              	.LVL14:
 207              	.L16:
 208 0016 00BF     	 .align 2
 209              	.L15:
 210 0018 000E2707 	 .word 120000000
 211 001c 00000000 	 .word system_init_flash
 212 0020 00000000 	 .word SystemCoreClockUpdate
 213 0024 00093D00 	 .word 4000000
 214              	 .cfi_endproc
 215              	.LFE158:
 217              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
 218              	 .align 2
 221              	cpu_irq_critical_section_counter:
 222 0000 00000000 	 .space 4
 223              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
 226              	cpu_irq_prev_interrupt_state:
 227 0000 00       	 .space 1
 228              	 .text
 229              	.Letext0:
 230              	 .file 3 "c:\\chipwh~2\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 231              	 .file 4 "c:\\chipwh~2\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 232              	 .file 5 ".././hal/sam4s/inc/interrupt/interrupt_sam_nvic.h"
 233              	 .file 6 ".././hal/sam4s/inc/system_sam4s.h"
 234              	 .file 7 ".././hal/sam4s/inc/pmc.h"
DEFINED SYMBOLS
                            *ABS*:00000000 sysclk.c
    {standard input}:16     .text.sysclk_set_prescalers:00000000 $t
    {standard input}:24     .text.sysclk_set_prescalers:00000000 sysclk_set_prescalers
    {standard input}:57     .text.sysclk_set_prescalers:00000010 $d
    {standard input}:63     .text.sysclk_set_source:00000000 $t
    {standard input}:70     .text.sysclk_set_source:00000000 sysclk_set_source
    {standard input}:88     .text.sysclk_set_source:0000000a $d
    {standard input}:98     .text.sysclk_set_source:00000014 $t
    {standard input}:147    .text.sysclk_set_source:00000030 $d
    {standard input}:153    .text.sysclk_init:00000000 $t
    {standard input}:160    .text.sysclk_init:00000000 sysclk_init
    {standard input}:210    .text.sysclk_init:00000018 $d
    {standard input}:218    .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:221    .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:226    .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:227    .bss.cpu_irq_prev_interrupt_state:00000000 $d
                           .group:00000000 wm4.0.545a0e1134fc651afe6e71660705947f
                           .group:00000000 wm4.parts.h.38.09ccce703cc30b12360b0e797fac8cb6
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.tpaste.h.38.f9caafafc33cddaf7097f68661fce374
                           .group:00000000 wm4.stringz.h.38.451b1c9629f877d07c6b3529fe5b37b2
                           .group:00000000 wm4.mrepeat.h.52.224450943b2762ae34ad2cae2fa96ad2
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam4s2b.h.221.db99b1f5dbb5d4301dbbbaff13b63e70
                           .group:00000000 wm4.core_cm4.h.43.9593ac0dcec24a3a6f1d638d754e90b2
                           .group:00000000 wm4.core_cmInstr.h.39.53f0cdf363d7ba01993152fdcb6be5d3
                           .group:00000000 wm4.core_cmSimd.h.43.c355993beb49ccd10586af5b1cfe5aee
                           .group:00000000 wm4.core_cm4.h.201.504dd1a6bdf57a6296d26f255ae618b9
                           .group:00000000 wm4.component_acc.h.36.308f7d4c1685c8ebd00910c37bbeab26
                           .group:00000000 wm4.component_adc.h.36.b8477219496e42be1d01ccb1b6f6b02b
                           .group:00000000 wm4.component_chipid.h.36.cb4a4222aca9bee8d01f4aa49afe4d6d
                           .group:00000000 wm4.component_crccu.h.36.1d71ce61706000275b271d03beaec6d2
                           .group:00000000 wm4.component_dacc.h.36.0b87b1e719912b5885bdf9531e0e43d6
                           .group:00000000 wm4.component_efc.h.36.a6b4458c43d27669aaa6147006e1eb74
                           .group:00000000 wm4.component_gpbr.h.36.595122ea9c79505c4e73c9e7421802a8
                           .group:00000000 wm4.component_hsmci.h.36.ccf6dd1a128877835aec3d40c12745dd
                           .group:00000000 wm4.component_matrix.h.36.8f1d7aeed86a08ab4d936e5a0f026440
                           .group:00000000 wm4.component_pdc.h.36.363e6546b41ce8a14a922d18930df184
                           .group:00000000 wm4.component_pio.h.36.f033c3341fbeea7d2a04545c9a72bd24
                           .group:00000000 wm4.component_pmc.h.36.2771b76afbda6351cb4cf4c6708887d5
                           .group:00000000 wm4.component_pwm.h.36.0cd735c74e99ef7d330cb87d1f16c213
                           .group:00000000 wm4.component_rstc.h.36.1af4b8140176d86bc0af5b861fd3a623
                           .group:00000000 wm4.component_rtc.h.36.c865407d28492a40a128dee548893efe
                           .group:00000000 wm4.component_rtt.h.36.46adad6456893b38ef49ae9a2d0afea1
                           .group:00000000 wm4.component_spi.h.36.a18850bcdd90fcb2d130155fa94829ea
                           .group:00000000 wm4.component_ssc.h.36.6ffc46b5a0a9219bd5c90b3f63510b0f
                           .group:00000000 wm4.component_supc.h.36.0db4554695c6e864e5338e4faca84d88
                           .group:00000000 wm4.component_tc.h.36.af47419b07ade32b2d1423414983d2f7
                           .group:00000000 wm4.component_twi.h.36.3496bc3884f63f906fd446649da75de1
                           .group:00000000 wm4.component_uart.h.36.74e9355d463b56860c56764a9be37213
                           .group:00000000 wm4.component_udp.h.36.8cb9530d4bf5319aabe6158f5e738b3d
                           .group:00000000 wm4.component_usart.h.36.5e91c114006f7b551a45955ae29cb6cf
                           .group:00000000 wm4.component_wdt.h.36.277adc27b017beabbb9f7b11b0fa46f2
                           .group:00000000 wm4.instance_hsmci.h.36.9855cb84ff287cffb479099857800873
                           .group:00000000 wm4.instance_ssc.h.36.630afe78e802d5fc05c6224c23890fe1
                           .group:00000000 wm4.instance_spi.h.36.325bf539a06b58ad3327698a7ef68d81
                           .group:00000000 wm4.instance_tc0.h.36.fbfa021f96aebd3d46fa1937156b0b0a
                           .group:00000000 wm4.instance_twi0.h.36.13a0f0822f7bd9074e9b846b04ed10b9
                           .group:00000000 wm4.instance_twi1.h.36.6c6b55c3fab76b3818eb5314bf7bc410
                           .group:00000000 wm4.instance_pwm.h.36.1b555f9fd14d69df968818a3882b2cde
                           .group:00000000 wm4.instance_usart0.h.36.3b6138f7be7c01038525724f6c5d6c1e
                           .group:00000000 wm4.instance_usart1.h.36.137c36ec170c7ca2c1f8e046f5d0e0c9
                           .group:00000000 wm4.instance_udp.h.36.b94eabb27893117a74b4d6faebd80bc6
                           .group:00000000 wm4.instance_adc.h.36.84184448551cb0a3c52160d178904d14
                           .group:00000000 wm4.instance_dacc.h.36.28a68c12285ab1a6b24d06876c4b8807
                           .group:00000000 wm4.instance_acc.h.36.71d96a8f2214f8a9d18eec4d2d93f130
                           .group:00000000 wm4.instance_crccu.h.36.549cca511b407ab33982b56bae0c25ac
                           .group:00000000 wm4.instance_matrix.h.36.da03b47f7e819cfcead8ef1cd71b60ce
                           .group:00000000 wm4.instance_pmc.h.36.002f4765e9f18dc4b183b779163ab06e
                           .group:00000000 wm4.instance_uart0.h.36.fa62b2ed6ce17806cd77556aa65a73f5
                           .group:00000000 wm4.instance_chipid.h.36.6f5f676d52e3e21dba5d88a4bb87d922
                           .group:00000000 wm4.instance_uart1.h.36.bc11f9c4189a4ac15cce81cf9f40fcf9
                           .group:00000000 wm4.instance_efc0.h.36.67a3a70e962ac1d6ef8fcee0e9fd4a9b
                           .group:00000000 wm4.instance_pioa.h.36.27d92aa6d00d8b6a2b34acdeee1aa60a
                           .group:00000000 wm4.instance_piob.h.36.b0f95d3fb66ff01bcd91fb6a4cb54dc3
                           .group:00000000 wm4.instance_rstc.h.36.f8bcddbd3310cbb6a39c155e9e6b3cfb
                           .group:00000000 wm4.instance_supc.h.36.17878f57a77a9d368090917738ff3e02
                           .group:00000000 wm4.instance_rtt.h.36.8759ab7e2580c101b6db702769407cb0
                           .group:00000000 wm4.instance_wdt.h.36.ab83587b138c65dcd29a29119835b92a
                           .group:00000000 wm4.instance_rtc.h.36.52aa67a6a7c945bf00db9fb9d057e3e0
                           .group:00000000 wm4.instance_gpbr.h.36.b2cfd4dee03ed0c28ecb9eb233d2ac42
                           .group:00000000 wm4.sam4s2b.h.313.04ed20c80f538f8fadb9388a8469283e
                           .group:00000000 wm4.pio_sam4s2b.h.36.e1b33fead6a6e1ee98b2f4cba4bb11b4
                           .group:00000000 wm4.sam4s2b.h.450.98a9c8ea67d90470c8554ffe87c8398a
                           .group:00000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.cdefs.h.49.3d0fe8ea14e93bda8c589d4f684b21b8
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.81.f75af8228a71cd19fa09df23f58333e2
                           .group:00000000 wm4.interrupt_sam_nvic.h.77.5650b866702c5f625c80d648ec551823
                           .group:00000000 wm4.compiler.h.420.b563cf39b91298e26f28e0fd38c47072
                           .group:00000000 wm4.board.h.62.04be389f52057678d89e56bc54ba7f0f
                           .group:00000000 wm4.naeusb_board_config.h.2.c0942a0b7acc934ff850888bfbdc5425
                           .group:00000000 wm4.pmc.h.38.7bb294bcb77f1d5cfe61fa73ada2626e
                           .group:00000000 wm4.osc.h.87.371785ea7a094c5a3243c30289e8acd7
                           .group:00000000 wm4.pll.h.38.ab8b2c241cd341f0f249b0c1a76bd14f
                           .group:00000000 wm4.sysclk.h.205.b1a1418ca2cfbc00b6238ee51dd78797

UNDEFINED SYMBOLS
pmc_mck_set_prescaler
SystemCoreClockUpdate
pmc_mck_set_source
system_init_flash

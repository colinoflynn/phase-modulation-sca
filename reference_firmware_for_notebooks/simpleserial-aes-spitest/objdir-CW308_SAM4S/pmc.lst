   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,4
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "pmc.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.pmc_mck_set_prescaler,"ax",%progbits
  16              	 .align 1
  17              	 .global pmc_mck_set_prescaler
  18              	 .arch armv7e-m
  19              	 .syntax unified
  20              	 .thumb
  21              	 .thumb_func
  22              	 .fpu softvfp
  24              	pmc_mck_set_prescaler:
  25              	.LVL0:
  26              	.LFB136:
  27              	 .file 1 ".././hal/sam4s/pmc.c"
   1:.././hal/sam4s/pmc.c **** /**
   2:.././hal/sam4s/pmc.c ****  * \file
   3:.././hal/sam4s/pmc.c ****  *
   4:.././hal/sam4s/pmc.c ****  * \brief Power Management Controller (PMC) driver for SAM.
   5:.././hal/sam4s/pmc.c ****  *
   6:.././hal/sam4s/pmc.c ****  * Copyright (c) 2011-2018 Microchip Technology Inc. and its subsidiaries.
   7:.././hal/sam4s/pmc.c ****  *
   8:.././hal/sam4s/pmc.c ****  * \asf_license_start
   9:.././hal/sam4s/pmc.c ****  *
  10:.././hal/sam4s/pmc.c ****  * \page License
  11:.././hal/sam4s/pmc.c ****  *
  12:.././hal/sam4s/pmc.c ****  * Subject to your compliance with these terms, you may use Microchip
  13:.././hal/sam4s/pmc.c ****  * software and any derivatives exclusively with Microchip products.
  14:.././hal/sam4s/pmc.c ****  * It is your responsibility to comply with third party license terms applicable
  15:.././hal/sam4s/pmc.c ****  * to your use of third party software (including open source software) that
  16:.././hal/sam4s/pmc.c ****  * may accompany Microchip software.
  17:.././hal/sam4s/pmc.c ****  *
  18:.././hal/sam4s/pmc.c ****  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES,
  19:.././hal/sam4s/pmc.c ****  * WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE,
  20:.././hal/sam4s/pmc.c ****  * INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY,
  21:.././hal/sam4s/pmc.c ****  * AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT WILL MICROCHIP BE
  22:.././hal/sam4s/pmc.c ****  * LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, INCIDENTAL OR CONSEQUENTIAL
  23:.././hal/sam4s/pmc.c ****  * LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE
  24:.././hal/sam4s/pmc.c ****  * SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE
  25:.././hal/sam4s/pmc.c ****  * POSSIBILITY OR THE DAMAGES ARE FORESEEABLE.  TO THE FULLEST EXTENT
  26:.././hal/sam4s/pmc.c ****  * ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN ANY WAY
  27:.././hal/sam4s/pmc.c ****  * RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
  28:.././hal/sam4s/pmc.c ****  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
  29:.././hal/sam4s/pmc.c ****  *
  30:.././hal/sam4s/pmc.c ****  * \asf_license_stop
  31:.././hal/sam4s/pmc.c ****  *
  32:.././hal/sam4s/pmc.c ****  */
  33:.././hal/sam4s/pmc.c **** /*
  34:.././hal/sam4s/pmc.c ****  * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
  35:.././hal/sam4s/pmc.c ****  */
  36:.././hal/sam4s/pmc.c **** 
  37:.././hal/sam4s/pmc.c **** #include "pmc.h"
  38:.././hal/sam4s/pmc.c **** 
  39:.././hal/sam4s/pmc.c **** #if (SAM3N)
  40:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    31
  41:.././hal/sam4s/pmc.c **** #elif (SAM3XA)
  42:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    44
  43:.././hal/sam4s/pmc.c **** #elif (SAM3U)
  44:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    29
  45:.././hal/sam4s/pmc.c **** #elif (SAM3S || SAM4S)
  46:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    34
  47:.././hal/sam4s/pmc.c **** #elif (SAM4E)
  48:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    47
  49:.././hal/sam4s/pmc.c **** #elif (SAMV71)
  50:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    63
  51:.././hal/sam4s/pmc.c **** #elif (SAMV70)
  52:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    63
  53:.././hal/sam4s/pmc.c **** #elif (SAME70)
  54:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    63
  55:.././hal/sam4s/pmc.c **** #elif (SAMS70)
  56:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    63
  57:.././hal/sam4s/pmc.c **** #elif (SAM4N)
  58:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    31
  59:.././hal/sam4s/pmc.c **** #elif (SAM4C || SAM4CM || SAM4CP)
  60:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    43
  61:.././hal/sam4s/pmc.c **** #elif (SAMG51)
  62:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    47
  63:.././hal/sam4s/pmc.c **** #elif (SAMG53)
  64:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    47
  65:.././hal/sam4s/pmc.c **** #elif (SAMG54)
  66:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    47
  67:.././hal/sam4s/pmc.c **** #elif (SAMG55)
  68:.././hal/sam4s/pmc.c **** # define MAX_PERIPH_ID    50
  69:.././hal/sam4s/pmc.c **** #endif
  70:.././hal/sam4s/pmc.c **** 
  71:.././hal/sam4s/pmc.c **** /// @cond 0
  72:.././hal/sam4s/pmc.c **** /**INDENT-OFF**/
  73:.././hal/sam4s/pmc.c **** #ifdef __cplusplus
  74:.././hal/sam4s/pmc.c **** extern "C" {
  75:.././hal/sam4s/pmc.c **** #endif
  76:.././hal/sam4s/pmc.c **** /**INDENT-ON**/
  77:.././hal/sam4s/pmc.c **** /// @endcond
  78:.././hal/sam4s/pmc.c **** 
  79:.././hal/sam4s/pmc.c **** /**
  80:.././hal/sam4s/pmc.c ****  * \defgroup sam_drivers_pmc_group Power Management Controller (PMC)
  81:.././hal/sam4s/pmc.c ****  *
  82:.././hal/sam4s/pmc.c ****  * \par Purpose
  83:.././hal/sam4s/pmc.c ****  *
  84:.././hal/sam4s/pmc.c ****  * The Power Management Controller (PMC) optimizes power consumption by
  85:.././hal/sam4s/pmc.c ****  * controlling all system and user peripheral clocks. The PMC enables/disables
  86:.././hal/sam4s/pmc.c ****  * the clock inputs to many of the peripherals and the Cortex-M Processor.
  87:.././hal/sam4s/pmc.c ****  *
  88:.././hal/sam4s/pmc.c ****  * @{
  89:.././hal/sam4s/pmc.c ****  */
  90:.././hal/sam4s/pmc.c **** 
  91:.././hal/sam4s/pmc.c **** /**
  92:.././hal/sam4s/pmc.c ****  * \brief Set the prescaler of the MCK.
  93:.././hal/sam4s/pmc.c ****  *
  94:.././hal/sam4s/pmc.c ****  * \param ul_pres Prescaler value.
  95:.././hal/sam4s/pmc.c ****  */
  96:.././hal/sam4s/pmc.c **** void pmc_mck_set_prescaler(uint32_t ul_pres)
  97:.././hal/sam4s/pmc.c **** {
  28              	 .loc 1 97 1 view-0
  29              	 .cfi_startproc
  30              	 
  31              	 
  32              	 
  98:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR =
  33              	 .loc 1 98 2 view .LVU1
  99:.././hal/sam4s/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
  34              	 .loc 1 99 8 is_stmt 0 view .LVU2
  35 0000 044A     	 ldr r2,.L5
  36 0002 136B     	 ldr r3,[r2,#48]
  37              	 .loc 1 99 19 view .LVU3
  38 0004 23F07003 	 bic r3,r3,#112
  39              	 .loc 1 99 43 view .LVU4
  40 0008 0343     	 orrs r3,r3,r0
  98:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR =
  41              	 .loc 1 98 16 view .LVU5
  42 000a 1363     	 str r3,[r2,#48]
 100:.././hal/sam4s/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  43              	 .loc 1 100 2 is_stmt 1 view .LVU6
  44              	.L2:
  45              	 .loc 1 100 40 discriminator 1 view .LVU7
  46              	 .loc 1 100 8 discriminator 1 view .LVU8
  47              	 .loc 1 100 14 is_stmt 0 discriminator 1 view .LVU9
  48 000c 936E     	 ldr r3,[r2,#104]
  49              	 .loc 1 100 8 discriminator 1 view .LVU10
  50 000e 1B07     	 lsls r3,r3,#28
  51 0010 FCD5     	 bpl .L2
 101:.././hal/sam4s/pmc.c **** }
  52              	 .loc 1 101 1 view .LVU11
  53 0012 7047     	 bx lr
  54              	.L6:
  55              	 .align 2
  56              	.L5:
  57 0014 00040E40 	 .word 1074660352
  58              	 .cfi_endproc
  59              	.LFE136:
  61              	 .section .text.pmc_mck_set_source,"ax",%progbits
  62              	 .align 1
  63              	 .global pmc_mck_set_source
  64              	 .syntax unified
  65              	 .thumb
  66              	 .thumb_func
  67              	 .fpu softvfp
  69              	pmc_mck_set_source:
  70              	.LVL1:
  71              	.LFB137:
 102:.././hal/sam4s/pmc.c **** 
 103:.././hal/sam4s/pmc.c **** #if SAMV71 || SAMV70 || SAME70 || SAMS70
 104:.././hal/sam4s/pmc.c **** /**
 105:.././hal/sam4s/pmc.c ****  * \brief Set the division of the MCK.
 106:.././hal/sam4s/pmc.c ****  *
 107:.././hal/sam4s/pmc.c ****  * \param ul_div Division value.
 108:.././hal/sam4s/pmc.c ****  */
 109:.././hal/sam4s/pmc.c **** void pmc_mck_set_division(uint32_t ul_div)
 110:.././hal/sam4s/pmc.c **** {
 111:.././hal/sam4s/pmc.c **** 	switch (ul_div) {
 112:.././hal/sam4s/pmc.c **** 		case 1:
 113:.././hal/sam4s/pmc.c **** 			ul_div = PMC_MCKR_MDIV_EQ_PCK;
 114:.././hal/sam4s/pmc.c **** 			break;
 115:.././hal/sam4s/pmc.c **** 		case 2:
 116:.././hal/sam4s/pmc.c **** 			ul_div = PMC_MCKR_MDIV_PCK_DIV2;
 117:.././hal/sam4s/pmc.c **** 			break;
 118:.././hal/sam4s/pmc.c **** 		case 3:
 119:.././hal/sam4s/pmc.c **** 			ul_div = PMC_MCKR_MDIV_PCK_DIV3;
 120:.././hal/sam4s/pmc.c **** 			break;
 121:.././hal/sam4s/pmc.c **** 		case 4:
 122:.././hal/sam4s/pmc.c **** 			ul_div = PMC_MCKR_MDIV_PCK_DIV4;
 123:.././hal/sam4s/pmc.c **** 			break;
 124:.././hal/sam4s/pmc.c **** 		default:
 125:.././hal/sam4s/pmc.c **** 			ul_div = PMC_MCKR_MDIV_EQ_PCK;
 126:.././hal/sam4s/pmc.c **** 			break;
 127:.././hal/sam4s/pmc.c **** 	}
 128:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR =
 129:.././hal/sam4s/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_MDIV_Msk)) | ul_div;
 130:.././hal/sam4s/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
 131:.././hal/sam4s/pmc.c **** }
 132:.././hal/sam4s/pmc.c **** #endif
 133:.././hal/sam4s/pmc.c **** 
 134:.././hal/sam4s/pmc.c **** /**
 135:.././hal/sam4s/pmc.c ****  * \brief Set the source of the MCK.
 136:.././hal/sam4s/pmc.c ****  *
 137:.././hal/sam4s/pmc.c ****  * \param ul_source Source selection value.
 138:.././hal/sam4s/pmc.c ****  */
 139:.././hal/sam4s/pmc.c **** void pmc_mck_set_source(uint32_t ul_source)
 140:.././hal/sam4s/pmc.c **** {
  72              	 .loc 1 140 1 is_stmt 1 view-0
  73              	 .cfi_startproc
  74              	 
  75              	 
  76              	 
 141:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR =
  77              	 .loc 1 141 2 view .LVU13
 142:.././hal/sam4s/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) | ul_source;
  78              	 .loc 1 142 8 is_stmt 0 view .LVU14
  79 0000 044A     	 ldr r2,.L11
  80 0002 136B     	 ldr r3,[r2,#48]
  81              	 .loc 1 142 19 view .LVU15
  82 0004 23F00303 	 bic r3,r3,#3
  83              	 .loc 1 142 42 view .LVU16
  84 0008 0343     	 orrs r3,r3,r0
 141:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR =
  85              	 .loc 1 141 16 view .LVU17
  86 000a 1363     	 str r3,[r2,#48]
 143:.././hal/sam4s/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
  87              	 .loc 1 143 2 is_stmt 1 view .LVU18
  88              	.L8:
  89              	 .loc 1 143 40 discriminator 1 view .LVU19
  90              	 .loc 1 143 8 discriminator 1 view .LVU20
  91              	 .loc 1 143 14 is_stmt 0 discriminator 1 view .LVU21
  92 000c 936E     	 ldr r3,[r2,#104]
  93              	 .loc 1 143 8 discriminator 1 view .LVU22
  94 000e 1B07     	 lsls r3,r3,#28
  95 0010 FCD5     	 bpl .L8
 144:.././hal/sam4s/pmc.c **** }
  96              	 .loc 1 144 1 view .LVU23
  97 0012 7047     	 bx lr
  98              	.L12:
  99              	 .align 2
 100              	.L11:
 101 0014 00040E40 	 .word 1074660352
 102              	 .cfi_endproc
 103              	.LFE137:
 105              	 .section .text.pmc_switch_mck_to_sclk,"ax",%progbits
 106              	 .align 1
 107              	 .global pmc_switch_mck_to_sclk
 108              	 .syntax unified
 109              	 .thumb
 110              	 .thumb_func
 111              	 .fpu softvfp
 113              	pmc_switch_mck_to_sclk:
 114              	.LVL2:
 115              	.LFB138:
 145:.././hal/sam4s/pmc.c **** 
 146:.././hal/sam4s/pmc.c **** /**
 147:.././hal/sam4s/pmc.c ****  * \brief Switch master clock source selection to slow clock.
 148:.././hal/sam4s/pmc.c ****  *
 149:.././hal/sam4s/pmc.c ****  * \param ul_pres Processor clock prescaler.
 150:.././hal/sam4s/pmc.c ****  *
 151:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 152:.././hal/sam4s/pmc.c ****  * \retval 1 Timeout error.
 153:.././hal/sam4s/pmc.c ****  */
 154:.././hal/sam4s/pmc.c **** uint32_t pmc_switch_mck_to_sclk(uint32_t ul_pres)
 155:.././hal/sam4s/pmc.c **** {
 116              	 .loc 1 155 1 is_stmt 1 view-0
 117              	 .cfi_startproc
 118              	 
 119              	 
 120              	 
 156:.././hal/sam4s/pmc.c **** 	uint32_t ul_timeout;
 121              	 .loc 1 156 2 view .LVU25
 157:.././hal/sam4s/pmc.c **** 
 158:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 122              	 .loc 1 158 2 view .LVU26
 123              	 .loc 1 158 22 is_stmt 0 view .LVU27
 124 0000 0E4B     	 ldr r3,.L25
 125 0002 1A6B     	 ldr r2,[r3,#48]
 126              	 .loc 1 158 56 view .LVU28
 127 0004 22F00302 	 bic r2,r2,#3
 128              	 .loc 1 158 16 view .LVU29
 129 0008 1A63     	 str r2,[r3,#48]
 159:.././hal/sam4s/pmc.c **** 			PMC_MCKR_CSS_SLOW_CLK;
 160:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 130              	 .loc 1 160 2 is_stmt 1 view .LVU30
 131              	.LVL3:
 132              	 .loc 1 160 2 is_stmt 0 view .LVU31
 133 000a 40F60102 	 movw r2,#2049
 134              	.LVL4:
 135              	.L14:
 136              	 .loc 1 160 33 is_stmt 1 discriminator 1 view .LVU32
 137              	 .loc 1 160 38 is_stmt 0 discriminator 1 view .LVU33
 138 000e 996E     	 ldr r1,[r3,#104]
 139              	 .loc 1 160 2 discriminator 1 view .LVU34
 140 0010 0907     	 lsls r1,r1,#28
 141 0012 0BD5     	 bpl .L16
 161:.././hal/sam4s/pmc.c **** 			--ul_timeout) {
 162:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 163:.././hal/sam4s/pmc.c **** 			return 1;
 164:.././hal/sam4s/pmc.c **** 		}
 165:.././hal/sam4s/pmc.c **** 	}
 166:.././hal/sam4s/pmc.c **** 
 167:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 142              	 .loc 1 167 2 is_stmt 1 view .LVU35
 143              	 .loc 1 167 22 is_stmt 0 view .LVU36
 144 0014 1A6B     	 ldr r2,[r3,#48]
 145              	.LVL5:
 146              	 .loc 1 167 33 view .LVU37
 147 0016 22F07002 	 bic r2,r2,#112
 148              	 .loc 1 167 57 view .LVU38
 149 001a 1043     	 orrs r0,r0,r2
 150              	.LVL6:
 151              	 .loc 1 167 16 view .LVU39
 152 001c 1863     	 str r0,[r3,#48]
 168:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 153              	 .loc 1 168 2 is_stmt 1 view .LVU40
 154              	.LVL7:
 155              	 .loc 1 168 2 is_stmt 0 view .LVU41
 156 001e 40F60102 	 movw r2,#2049
 157              	.LVL8:
 158              	.L17:
 159              	 .loc 1 168 33 is_stmt 1 discriminator 1 view .LVU42
 160              	 .loc 1 168 38 is_stmt 0 discriminator 1 view .LVU43
 161 0022 996E     	 ldr r1,[r3,#104]
 162              	 .loc 1 168 2 discriminator 1 view .LVU44
 163 0024 0907     	 lsls r1,r1,#28
 164 0026 05D5     	 bpl .L19
 169:.././hal/sam4s/pmc.c **** 			--ul_timeout) {
 170:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 171:.././hal/sam4s/pmc.c **** 			return 1;
 172:.././hal/sam4s/pmc.c **** 		}
 173:.././hal/sam4s/pmc.c **** 	}
 174:.././hal/sam4s/pmc.c **** 
 175:.././hal/sam4s/pmc.c **** 	return 0;
 165              	 .loc 1 175 9 view .LVU45
 166 0028 0020     	 movs r0,#0
 176:.././hal/sam4s/pmc.c **** }
 167              	 .loc 1 176 1 view .LVU46
 168 002a 7047     	 bx lr
 169              	.LVL9:
 170              	.L16:
 162:.././hal/sam4s/pmc.c **** 			return 1;
 171              	 .loc 1 162 3 is_stmt 1 view .LVU47
 162:.././hal/sam4s/pmc.c **** 			return 1;
 172              	 .loc 1 162 6 is_stmt 0 view .LVU48
 173 002c 013A     	 subs r2,r2,#1
 174              	.LVL10:
 162:.././hal/sam4s/pmc.c **** 			return 1;
 175              	 .loc 1 162 6 view .LVU49
 176 002e EED1     	 bne .L14
 177              	.LVL11:
 178              	.L18:
 163:.././hal/sam4s/pmc.c **** 		}
 179              	 .loc 1 163 11 view .LVU50
 180 0030 0120     	 movs r0,#1
 181 0032 7047     	 bx lr
 182              	.LVL12:
 183              	.L19:
 170:.././hal/sam4s/pmc.c **** 			return 1;
 184              	 .loc 1 170 3 is_stmt 1 view .LVU51
 170:.././hal/sam4s/pmc.c **** 			return 1;
 185              	 .loc 1 170 6 is_stmt 0 view .LVU52
 186 0034 013A     	 subs r2,r2,#1
 187              	.LVL13:
 170:.././hal/sam4s/pmc.c **** 			return 1;
 188              	 .loc 1 170 6 view .LVU53
 189 0036 F4D1     	 bne .L17
 190 0038 FAE7     	 b .L18
 191              	.L26:
 192 003a 00BF     	 .align 2
 193              	.L25:
 194 003c 00040E40 	 .word 1074660352
 195              	 .cfi_endproc
 196              	.LFE138:
 198              	 .section .text.pmc_switch_mck_to_mainck,"ax",%progbits
 199              	 .align 1
 200              	 .global pmc_switch_mck_to_mainck
 201              	 .syntax unified
 202              	 .thumb
 203              	 .thumb_func
 204              	 .fpu softvfp
 206              	pmc_switch_mck_to_mainck:
 207              	.LVL14:
 208              	.LFB139:
 177:.././hal/sam4s/pmc.c **** 
 178:.././hal/sam4s/pmc.c **** /**
 179:.././hal/sam4s/pmc.c ****  * \brief Switch master clock source selection to main clock.
 180:.././hal/sam4s/pmc.c ****  *
 181:.././hal/sam4s/pmc.c ****  * \param ul_pres Processor clock prescaler.
 182:.././hal/sam4s/pmc.c ****  *
 183:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 184:.././hal/sam4s/pmc.c ****  * \retval 1 Timeout error.
 185:.././hal/sam4s/pmc.c ****  */
 186:.././hal/sam4s/pmc.c **** uint32_t pmc_switch_mck_to_mainck(uint32_t ul_pres)
 187:.././hal/sam4s/pmc.c **** {
 209              	 .loc 1 187 1 is_stmt 1 view-0
 210              	 .cfi_startproc
 211              	 
 212              	 
 213              	 
 188:.././hal/sam4s/pmc.c **** 	uint32_t ul_timeout;
 214              	 .loc 1 188 2 view .LVU55
 189:.././hal/sam4s/pmc.c **** 
 190:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 215              	 .loc 1 190 2 view .LVU56
 216              	 .loc 1 190 22 is_stmt 0 view .LVU57
 217 0000 0F4B     	 ldr r3,.L39
 218 0002 1A6B     	 ldr r2,[r3,#48]
 219              	 .loc 1 190 33 view .LVU58
 220 0004 22F00302 	 bic r2,r2,#3
 221              	 .loc 1 190 56 view .LVU59
 222 0008 42F00102 	 orr r2,r2,#1
 223              	 .loc 1 190 16 view .LVU60
 224 000c 1A63     	 str r2,[r3,#48]
 191:.././hal/sam4s/pmc.c **** 			PMC_MCKR_CSS_MAIN_CLK;
 192:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 225              	 .loc 1 192 2 is_stmt 1 view .LVU61
 226              	.LVL15:
 227              	 .loc 1 192 2 is_stmt 0 view .LVU62
 228 000e 40F60102 	 movw r2,#2049
 229              	.LVL16:
 230              	.L28:
 231              	 .loc 1 192 33 is_stmt 1 discriminator 1 view .LVU63
 232              	 .loc 1 192 38 is_stmt 0 discriminator 1 view .LVU64
 233 0012 996E     	 ldr r1,[r3,#104]
 234              	 .loc 1 192 2 discriminator 1 view .LVU65
 235 0014 0907     	 lsls r1,r1,#28
 236 0016 0BD5     	 bpl .L30
 193:.././hal/sam4s/pmc.c **** 			--ul_timeout) {
 194:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 195:.././hal/sam4s/pmc.c **** 			return 1;
 196:.././hal/sam4s/pmc.c **** 		}
 197:.././hal/sam4s/pmc.c **** 	}
 198:.././hal/sam4s/pmc.c **** 
 199:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 237              	 .loc 1 199 2 is_stmt 1 view .LVU66
 238              	 .loc 1 199 22 is_stmt 0 view .LVU67
 239 0018 1A6B     	 ldr r2,[r3,#48]
 240              	.LVL17:
 241              	 .loc 1 199 33 view .LVU68
 242 001a 22F07002 	 bic r2,r2,#112
 243              	 .loc 1 199 57 view .LVU69
 244 001e 1043     	 orrs r0,r0,r2
 245              	.LVL18:
 246              	 .loc 1 199 16 view .LVU70
 247 0020 1863     	 str r0,[r3,#48]
 200:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 248              	 .loc 1 200 2 is_stmt 1 view .LVU71
 249              	.LVL19:
 250              	 .loc 1 200 2 is_stmt 0 view .LVU72
 251 0022 40F60102 	 movw r2,#2049
 252              	.LVL20:
 253              	.L31:
 254              	 .loc 1 200 33 is_stmt 1 discriminator 1 view .LVU73
 255              	 .loc 1 200 38 is_stmt 0 discriminator 1 view .LVU74
 256 0026 996E     	 ldr r1,[r3,#104]
 257              	 .loc 1 200 2 discriminator 1 view .LVU75
 258 0028 0907     	 lsls r1,r1,#28
 259 002a 05D5     	 bpl .L33
 201:.././hal/sam4s/pmc.c **** 			--ul_timeout) {
 202:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 203:.././hal/sam4s/pmc.c **** 			return 1;
 204:.././hal/sam4s/pmc.c **** 		}
 205:.././hal/sam4s/pmc.c **** 	}
 206:.././hal/sam4s/pmc.c **** 
 207:.././hal/sam4s/pmc.c **** 	return 0;
 260              	 .loc 1 207 9 view .LVU76
 261 002c 0020     	 movs r0,#0
 208:.././hal/sam4s/pmc.c **** }
 262              	 .loc 1 208 1 view .LVU77
 263 002e 7047     	 bx lr
 264              	.LVL21:
 265              	.L30:
 194:.././hal/sam4s/pmc.c **** 			return 1;
 266              	 .loc 1 194 3 is_stmt 1 view .LVU78
 194:.././hal/sam4s/pmc.c **** 			return 1;
 267              	 .loc 1 194 6 is_stmt 0 view .LVU79
 268 0030 013A     	 subs r2,r2,#1
 269              	.LVL22:
 194:.././hal/sam4s/pmc.c **** 			return 1;
 270              	 .loc 1 194 6 view .LVU80
 271 0032 EED1     	 bne .L28
 272              	.LVL23:
 273              	.L32:
 195:.././hal/sam4s/pmc.c **** 		}
 274              	 .loc 1 195 11 view .LVU81
 275 0034 0120     	 movs r0,#1
 276 0036 7047     	 bx lr
 277              	.LVL24:
 278              	.L33:
 202:.././hal/sam4s/pmc.c **** 			return 1;
 279              	 .loc 1 202 3 is_stmt 1 view .LVU82
 202:.././hal/sam4s/pmc.c **** 			return 1;
 280              	 .loc 1 202 6 is_stmt 0 view .LVU83
 281 0038 013A     	 subs r2,r2,#1
 282              	.LVL25:
 202:.././hal/sam4s/pmc.c **** 			return 1;
 283              	 .loc 1 202 6 view .LVU84
 284 003a F4D1     	 bne .L31
 285 003c FAE7     	 b .L32
 286              	.L40:
 287 003e 00BF     	 .align 2
 288              	.L39:
 289 0040 00040E40 	 .word 1074660352
 290              	 .cfi_endproc
 291              	.LFE139:
 293              	 .section .text.pmc_switch_mck_to_pllack,"ax",%progbits
 294              	 .align 1
 295              	 .global pmc_switch_mck_to_pllack
 296              	 .syntax unified
 297              	 .thumb
 298              	 .thumb_func
 299              	 .fpu softvfp
 301              	pmc_switch_mck_to_pllack:
 302              	.LVL26:
 303              	.LFB140:
 209:.././hal/sam4s/pmc.c **** 
 210:.././hal/sam4s/pmc.c **** /**
 211:.././hal/sam4s/pmc.c ****  * \brief Switch master clock source selection to PLLA clock.
 212:.././hal/sam4s/pmc.c ****  *
 213:.././hal/sam4s/pmc.c ****  * \param ul_pres Processor clock prescaler.
 214:.././hal/sam4s/pmc.c ****  *
 215:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 216:.././hal/sam4s/pmc.c ****  * \retval 1 Timeout error.
 217:.././hal/sam4s/pmc.c ****  */
 218:.././hal/sam4s/pmc.c **** uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
 219:.././hal/sam4s/pmc.c **** {
 304              	 .loc 1 219 1 is_stmt 1 view-0
 305              	 .cfi_startproc
 306              	 
 307              	 
 308              	 
 220:.././hal/sam4s/pmc.c **** 	uint32_t ul_timeout;
 309              	 .loc 1 220 2 view .LVU86
 221:.././hal/sam4s/pmc.c **** 
 222:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 310              	 .loc 1 222 2 view .LVU87
 311              	 .loc 1 222 22 is_stmt 0 view .LVU88
 312 0000 0F4B     	 ldr r3,.L53
 313 0002 1A6B     	 ldr r2,[r3,#48]
 314              	 .loc 1 222 33 view .LVU89
 315 0004 22F07002 	 bic r2,r2,#112
 316              	 .loc 1 222 57 view .LVU90
 317 0008 0243     	 orrs r2,r2,r0
 318              	 .loc 1 222 16 view .LVU91
 319 000a 1A63     	 str r2,[r3,#48]
 223:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 320              	 .loc 1 223 2 is_stmt 1 view .LVU92
 321              	.LVL27:
 322              	 .loc 1 223 2 is_stmt 0 view .LVU93
 323 000c 40F60102 	 movw r2,#2049
 324              	.LVL28:
 325              	.L42:
 326              	 .loc 1 223 33 is_stmt 1 discriminator 1 view .LVU94
 327              	 .loc 1 223 38 is_stmt 0 discriminator 1 view .LVU95
 328 0010 996E     	 ldr r1,[r3,#104]
 329              	 .loc 1 223 2 discriminator 1 view .LVU96
 330 0012 0807     	 lsls r0,r1,#28
 331 0014 0CD5     	 bpl .L44
 224:.././hal/sam4s/pmc.c **** 			--ul_timeout) {
 225:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 226:.././hal/sam4s/pmc.c **** 			return 1;
 227:.././hal/sam4s/pmc.c **** 		}
 228:.././hal/sam4s/pmc.c **** 	}
 229:.././hal/sam4s/pmc.c **** 
 230:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 332              	 .loc 1 230 2 is_stmt 1 view .LVU97
 333              	 .loc 1 230 22 is_stmt 0 view .LVU98
 334 0016 1A6B     	 ldr r2,[r3,#48]
 335              	.LVL29:
 336              	 .loc 1 230 33 view .LVU99
 337 0018 22F00302 	 bic r2,r2,#3
 338              	 .loc 1 230 56 view .LVU100
 339 001c 42F00202 	 orr r2,r2,#2
 340              	 .loc 1 230 16 view .LVU101
 341 0020 1A63     	 str r2,[r3,#48]
 231:.././hal/sam4s/pmc.c **** 			PMC_MCKR_CSS_PLLA_CLK;
 232:.././hal/sam4s/pmc.c **** 
 233:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 342              	 .loc 1 233 2 is_stmt 1 view .LVU102
 343              	.LVL30:
 344              	 .loc 1 233 2 is_stmt 0 view .LVU103
 345 0022 40F60102 	 movw r2,#2049
 346              	.LVL31:
 347              	.L45:
 348              	 .loc 1 233 33 is_stmt 1 discriminator 1 view .LVU104
 349              	 .loc 1 233 38 is_stmt 0 discriminator 1 view .LVU105
 350 0026 996E     	 ldr r1,[r3,#104]
 351              	 .loc 1 233 2 discriminator 1 view .LVU106
 352 0028 0907     	 lsls r1,r1,#28
 353 002a 05D5     	 bpl .L47
 234:.././hal/sam4s/pmc.c **** 			--ul_timeout) {
 235:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 236:.././hal/sam4s/pmc.c **** 			return 1;
 237:.././hal/sam4s/pmc.c **** 		}
 238:.././hal/sam4s/pmc.c **** 	}
 239:.././hal/sam4s/pmc.c **** 
 240:.././hal/sam4s/pmc.c **** 	return 0;
 354              	 .loc 1 240 9 view .LVU107
 355 002c 0020     	 movs r0,#0
 241:.././hal/sam4s/pmc.c **** }
 356              	 .loc 1 241 1 view .LVU108
 357 002e 7047     	 bx lr
 358              	.L44:
 225:.././hal/sam4s/pmc.c **** 			return 1;
 359              	 .loc 1 225 3 is_stmt 1 view .LVU109
 225:.././hal/sam4s/pmc.c **** 			return 1;
 360              	 .loc 1 225 6 is_stmt 0 view .LVU110
 361 0030 013A     	 subs r2,r2,#1
 362              	.LVL32:
 225:.././hal/sam4s/pmc.c **** 			return 1;
 363              	 .loc 1 225 6 view .LVU111
 364 0032 EDD1     	 bne .L42
 365              	.LVL33:
 366              	.L46:
 226:.././hal/sam4s/pmc.c **** 		}
 367              	 .loc 1 226 11 view .LVU112
 368 0034 0120     	 movs r0,#1
 369 0036 7047     	 bx lr
 370              	.LVL34:
 371              	.L47:
 235:.././hal/sam4s/pmc.c **** 			return 1;
 372              	 .loc 1 235 3 is_stmt 1 view .LVU113
 235:.././hal/sam4s/pmc.c **** 			return 1;
 373              	 .loc 1 235 6 is_stmt 0 view .LVU114
 374 0038 013A     	 subs r2,r2,#1
 375              	.LVL35:
 235:.././hal/sam4s/pmc.c **** 			return 1;
 376              	 .loc 1 235 6 view .LVU115
 377 003a F4D1     	 bne .L45
 378 003c FAE7     	 b .L46
 379              	.L54:
 380 003e 00BF     	 .align 2
 381              	.L53:
 382 0040 00040E40 	 .word 1074660352
 383              	 .cfi_endproc
 384              	.LFE140:
 386              	 .section .text.pmc_switch_mck_to_pllbck,"ax",%progbits
 387              	 .align 1
 388              	 .global pmc_switch_mck_to_pllbck
 389              	 .syntax unified
 390              	 .thumb
 391              	 .thumb_func
 392              	 .fpu softvfp
 394              	pmc_switch_mck_to_pllbck:
 395              	.LVL36:
 396              	.LFB141:
 242:.././hal/sam4s/pmc.c **** 
 243:.././hal/sam4s/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 244:.././hal/sam4s/pmc.c **** /**
 245:.././hal/sam4s/pmc.c ****  * \brief Switch master clock source selection to PLLB clock.
 246:.././hal/sam4s/pmc.c ****  *
 247:.././hal/sam4s/pmc.c ****  * \param ul_pres Processor clock prescaler.
 248:.././hal/sam4s/pmc.c ****  *
 249:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 250:.././hal/sam4s/pmc.c ****  * \retval 1 Timeout error.
 251:.././hal/sam4s/pmc.c ****  */
 252:.././hal/sam4s/pmc.c **** uint32_t pmc_switch_mck_to_pllbck(uint32_t ul_pres)
 253:.././hal/sam4s/pmc.c **** {
 397              	 .loc 1 253 1 is_stmt 1 view-0
 398              	 .cfi_startproc
 399              	 
 400              	 
 401              	 
 254:.././hal/sam4s/pmc.c **** 	uint32_t ul_timeout;
 402              	 .loc 1 254 2 view .LVU117
 255:.././hal/sam4s/pmc.c **** 
 256:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 403              	 .loc 1 256 2 view .LVU118
 404              	 .loc 1 256 22 is_stmt 0 view .LVU119
 405 0000 0E4B     	 ldr r3,.L67
 406 0002 1A6B     	 ldr r2,[r3,#48]
 407              	 .loc 1 256 33 view .LVU120
 408 0004 22F07002 	 bic r2,r2,#112
 409              	 .loc 1 256 57 view .LVU121
 410 0008 0243     	 orrs r2,r2,r0
 411              	 .loc 1 256 16 view .LVU122
 412 000a 1A63     	 str r2,[r3,#48]
 257:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 413              	 .loc 1 257 2 is_stmt 1 view .LVU123
 414              	.LVL37:
 415              	 .loc 1 257 2 is_stmt 0 view .LVU124
 416 000c 40F60102 	 movw r2,#2049
 417              	.LVL38:
 418              	.L56:
 419              	 .loc 1 257 33 is_stmt 1 discriminator 1 view .LVU125
 420              	 .loc 1 257 38 is_stmt 0 discriminator 1 view .LVU126
 421 0010 996E     	 ldr r1,[r3,#104]
 422              	 .loc 1 257 2 discriminator 1 view .LVU127
 423 0012 0807     	 lsls r0,r1,#28
 424 0014 0AD5     	 bpl .L58
 258:.././hal/sam4s/pmc.c **** 			--ul_timeout) {
 259:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 260:.././hal/sam4s/pmc.c **** 			return 1;
 261:.././hal/sam4s/pmc.c **** 		}
 262:.././hal/sam4s/pmc.c **** 	}
 263:.././hal/sam4s/pmc.c **** 
 264:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 425              	 .loc 1 264 2 is_stmt 1 view .LVU128
 426              	 .loc 1 264 22 is_stmt 0 view .LVU129
 427 0016 1A6B     	 ldr r2,[r3,#48]
 428              	.LVL39:
 429              	 .loc 1 264 56 view .LVU130
 430 0018 42F00302 	 orr r2,r2,#3
 431              	 .loc 1 264 16 view .LVU131
 432 001c 1A63     	 str r2,[r3,#48]
 265:.././hal/sam4s/pmc.c **** 			PMC_MCKR_CSS_PLLB_CLK;
 266:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 433              	 .loc 1 266 2 is_stmt 1 view .LVU132
 434              	.LVL40:
 435              	 .loc 1 266 2 is_stmt 0 view .LVU133
 436 001e 40F60102 	 movw r2,#2049
 437              	.LVL41:
 438              	.L59:
 439              	 .loc 1 266 33 is_stmt 1 discriminator 1 view .LVU134
 440              	 .loc 1 266 38 is_stmt 0 discriminator 1 view .LVU135
 441 0022 996E     	 ldr r1,[r3,#104]
 442              	 .loc 1 266 2 discriminator 1 view .LVU136
 443 0024 0907     	 lsls r1,r1,#28
 444 0026 05D5     	 bpl .L61
 267:.././hal/sam4s/pmc.c **** 			--ul_timeout) {
 268:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 269:.././hal/sam4s/pmc.c **** 			return 1;
 270:.././hal/sam4s/pmc.c **** 		}
 271:.././hal/sam4s/pmc.c **** 	}
 272:.././hal/sam4s/pmc.c **** 
 273:.././hal/sam4s/pmc.c **** 	return 0;
 445              	 .loc 1 273 9 view .LVU137
 446 0028 0020     	 movs r0,#0
 274:.././hal/sam4s/pmc.c **** }
 447              	 .loc 1 274 1 view .LVU138
 448 002a 7047     	 bx lr
 449              	.L58:
 259:.././hal/sam4s/pmc.c **** 			return 1;
 450              	 .loc 1 259 3 is_stmt 1 view .LVU139
 259:.././hal/sam4s/pmc.c **** 			return 1;
 451              	 .loc 1 259 6 is_stmt 0 view .LVU140
 452 002c 013A     	 subs r2,r2,#1
 453              	.LVL42:
 259:.././hal/sam4s/pmc.c **** 			return 1;
 454              	 .loc 1 259 6 view .LVU141
 455 002e EFD1     	 bne .L56
 456              	.LVL43:
 457              	.L60:
 260:.././hal/sam4s/pmc.c **** 		}
 458              	 .loc 1 260 11 view .LVU142
 459 0030 0120     	 movs r0,#1
 460 0032 7047     	 bx lr
 461              	.LVL44:
 462              	.L61:
 268:.././hal/sam4s/pmc.c **** 			return 1;
 463              	 .loc 1 268 3 is_stmt 1 view .LVU143
 268:.././hal/sam4s/pmc.c **** 			return 1;
 464              	 .loc 1 268 6 is_stmt 0 view .LVU144
 465 0034 013A     	 subs r2,r2,#1
 466              	.LVL45:
 268:.././hal/sam4s/pmc.c **** 			return 1;
 467              	 .loc 1 268 6 view .LVU145
 468 0036 F4D1     	 bne .L59
 469 0038 FAE7     	 b .L60
 470              	.L68:
 471 003a 00BF     	 .align 2
 472              	.L67:
 473 003c 00040E40 	 .word 1074660352
 474              	 .cfi_endproc
 475              	.LFE141:
 477              	 .section .text.pmc_switch_sclk_to_32kxtal,"ax",%progbits
 478              	 .align 1
 479              	 .global pmc_switch_sclk_to_32kxtal
 480              	 .syntax unified
 481              	 .thumb
 482              	 .thumb_func
 483              	 .fpu softvfp
 485              	pmc_switch_sclk_to_32kxtal:
 486              	.LVL46:
 487              	.LFB142:
 275:.././hal/sam4s/pmc.c **** #endif
 276:.././hal/sam4s/pmc.c **** 
 277:.././hal/sam4s/pmc.c **** #if (SAM3XA || SAM3U || SAMV71 || SAMV70 || SAME70 || SAMS70)
 278:.././hal/sam4s/pmc.c **** /**
 279:.././hal/sam4s/pmc.c ****  * \brief Switch master clock source selection to UPLL clock.
 280:.././hal/sam4s/pmc.c ****  *
 281:.././hal/sam4s/pmc.c ****  * \param ul_pres Processor clock prescaler.
 282:.././hal/sam4s/pmc.c ****  *
 283:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 284:.././hal/sam4s/pmc.c ****  * \retval 1 Timeout error.
 285:.././hal/sam4s/pmc.c ****  */
 286:.././hal/sam4s/pmc.c **** uint32_t pmc_switch_mck_to_upllck(uint32_t ul_pres)
 287:.././hal/sam4s/pmc.c **** {
 288:.././hal/sam4s/pmc.c **** 	uint32_t ul_timeout;
 289:.././hal/sam4s/pmc.c **** 
 290:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
 291:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 292:.././hal/sam4s/pmc.c **** 			--ul_timeout) {
 293:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 294:.././hal/sam4s/pmc.c **** 			return 1;
 295:.././hal/sam4s/pmc.c **** 		}
 296:.././hal/sam4s/pmc.c **** 	}
 297:.././hal/sam4s/pmc.c **** 
 298:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
 299:.././hal/sam4s/pmc.c **** 			PMC_MCKR_CSS_UPLL_CLK;
 300:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
 301:.././hal/sam4s/pmc.c **** 			--ul_timeout) {
 302:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 303:.././hal/sam4s/pmc.c **** 			return 1;
 304:.././hal/sam4s/pmc.c **** 		}
 305:.././hal/sam4s/pmc.c **** 	}
 306:.././hal/sam4s/pmc.c **** 
 307:.././hal/sam4s/pmc.c **** 	return 0;
 308:.././hal/sam4s/pmc.c **** }
 309:.././hal/sam4s/pmc.c **** #endif
 310:.././hal/sam4s/pmc.c **** 
 311:.././hal/sam4s/pmc.c **** /**
 312:.././hal/sam4s/pmc.c ****  * \brief Switch slow clock source selection to external 32k (Xtal or Bypass).
 313:.././hal/sam4s/pmc.c ****  *
 314:.././hal/sam4s/pmc.c ****  * \note Switching SCLK back to 32krc is only possible by shutting down the
 315:.././hal/sam4s/pmc.c ****  *       VDDIO power supply.
 316:.././hal/sam4s/pmc.c ****  *
 317:.././hal/sam4s/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 318:.././hal/sam4s/pmc.c ****  */
 319:.././hal/sam4s/pmc.c **** void pmc_switch_sclk_to_32kxtal(uint32_t ul_bypass)
 320:.././hal/sam4s/pmc.c **** {
 488              	 .loc 1 320 1 is_stmt 1 view-0
 489              	 .cfi_startproc
 490              	 
 491              	 
 492              	 
 321:.././hal/sam4s/pmc.c **** 	/* Set Bypass mode if required */
 322:.././hal/sam4s/pmc.c **** 	if (ul_bypass == 1) {
 493              	 .loc 1 322 2 view .LVU147
 494 0000 054A     	 ldr r2,.L71
 323:.././hal/sam4s/pmc.c **** 		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
 495              	 .loc 1 323 3 view .LVU148
 322:.././hal/sam4s/pmc.c **** 		SUPC->SUPC_MR |= SUPC_MR_KEY_PASSWD |
 496              	 .loc 1 322 5 is_stmt 0 view .LVU149
 497 0002 0128     	 cmp r0,#1
 498              	 .loc 1 323 17 view .LVU150
 499 0004 01BF     	 itttt eq
 500 0006 9369     	 ldreq r3,[r2,#24]
 501 0008 43F02543 	 orreq r3,r3,#-1526726656
 502 000c 43F48013 	 orreq r3,r3,#1048576
 503 0010 9361     	 streq r3,[r2,#24]
 324:.././hal/sam4s/pmc.c **** 			SUPC_MR_OSCBYPASS;
 325:.././hal/sam4s/pmc.c **** 	}
 326:.././hal/sam4s/pmc.c **** 
 327:.././hal/sam4s/pmc.c **** 	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_XTALSEL;
 504              	 .loc 1 327 2 is_stmt 1 view .LVU151
 505              	 .loc 1 327 16 is_stmt 0 view .LVU152
 506 0012 024B     	 ldr r3,.L71+4
 507 0014 1361     	 str r3,[r2,#16]
 328:.././hal/sam4s/pmc.c **** }
 508              	 .loc 1 328 1 view .LVU153
 509 0016 7047     	 bx lr
 510              	.L72:
 511              	 .align 2
 512              	.L71:
 513 0018 00140E40 	 .word 1074664448
 514 001c 080000A5 	 .word -1526726648
 515              	 .cfi_endproc
 516              	.LFE142:
 518              	 .section .text.pmc_osc_is_ready_32kxtal,"ax",%progbits
 519              	 .align 1
 520              	 .global pmc_osc_is_ready_32kxtal
 521              	 .syntax unified
 522              	 .thumb
 523              	 .thumb_func
 524              	 .fpu softvfp
 526              	pmc_osc_is_ready_32kxtal:
 527              	.LFB143:
 329:.././hal/sam4s/pmc.c **** 
 330:.././hal/sam4s/pmc.c **** /**
 331:.././hal/sam4s/pmc.c ****  * \brief Check if the external 32k Xtal is ready.
 332:.././hal/sam4s/pmc.c ****  *
 333:.././hal/sam4s/pmc.c ****  * \retval 1 External 32k Xtal is ready.
 334:.././hal/sam4s/pmc.c ****  * \retval 0 External 32k Xtal is not ready.
 335:.././hal/sam4s/pmc.c ****  */
 336:.././hal/sam4s/pmc.c **** uint32_t pmc_osc_is_ready_32kxtal(void)
 337:.././hal/sam4s/pmc.c **** {
 528              	 .loc 1 337 1 is_stmt 1 view-0
 529              	 .cfi_startproc
 530              	 
 531              	 
 532              	 
 338:.././hal/sam4s/pmc.c **** 	return ((SUPC->SUPC_SR & SUPC_SR_OSCSEL)
 533              	 .loc 1 338 2 view .LVU155
 534              	 .loc 1 338 15 is_stmt 0 view .LVU156
 535 0000 054B     	 ldr r3,.L76
 536 0002 586A     	 ldr r0,[r3,#36]
 339:.././hal/sam4s/pmc.c **** 			&& (PMC->PMC_SR & PMC_SR_OSCSELS));
 537              	 .loc 1 339 4 view .LVU157
 538 0004 10F08000 	 ands r0,r0,#128
 539              	 .loc 1 339 11 view .LVU158
 540 0008 1EBF     	 ittt ne
 541 000a A3F58053 	 subne r3,r3,#4096
 542 000e 986E     	 ldrne r0,[r3,#104]
 543              	 .loc 1 339 4 view .LVU159
 544 0010 C0F3C010 	 ubfxne r0,r0,#7,#1
 340:.././hal/sam4s/pmc.c **** }
 545              	 .loc 1 340 1 view .LVU160
 546 0014 7047     	 bx lr
 547              	.L77:
 548 0016 00BF     	 .align 2
 549              	.L76:
 550 0018 00140E40 	 .word 1074664448
 551              	 .cfi_endproc
 552              	.LFE143:
 554              	 .section .text.pmc_switch_mainck_to_fastrc,"ax",%progbits
 555              	 .align 1
 556              	 .global pmc_switch_mainck_to_fastrc
 557              	 .syntax unified
 558              	 .thumb
 559              	 .thumb_func
 560              	 .fpu softvfp
 562              	pmc_switch_mainck_to_fastrc:
 563              	.LVL47:
 564              	.LFB144:
 341:.././hal/sam4s/pmc.c **** 
 342:.././hal/sam4s/pmc.c **** /**
 343:.././hal/sam4s/pmc.c ****  * \brief Switch main clock source selection to internal fast RC.
 344:.././hal/sam4s/pmc.c ****  *
 345:.././hal/sam4s/pmc.c ****  * \param ul_moscrcf Fast RC oscillator(4/8/12Mhz).
 346:.././hal/sam4s/pmc.c ****  *
 347:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 348:.././hal/sam4s/pmc.c ****  * \retval 1 Timeout error.
 349:.././hal/sam4s/pmc.c ****  * \retval 2 Invalid frequency.
 350:.././hal/sam4s/pmc.c ****  */
 351:.././hal/sam4s/pmc.c **** void pmc_switch_mainck_to_fastrc(uint32_t ul_moscrcf)
 352:.././hal/sam4s/pmc.c **** {
 565              	 .loc 1 352 1 is_stmt 1 view-0
 566              	 .cfi_startproc
 567              	 
 568              	 
 569              	 
 353:.././hal/sam4s/pmc.c **** 	/* Enable Fast RC oscillator but DO NOT switch to RC now */
 354:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
 570              	 .loc 1 354 2 view .LVU162
 571              	 .loc 1 354 16 is_stmt 0 view .LVU163
 572 0000 0F49     	 ldr r1,.L85
 573 0002 0A6A     	 ldr r2,[r1,#32]
 574 0004 42F45C12 	 orr r2,r2,#3604480
 575 0008 42F00802 	 orr r2,r2,#8
 576 000c 0A62     	 str r2,[r1,#32]
 355:.././hal/sam4s/pmc.c **** 
 356:.././hal/sam4s/pmc.c **** 	/* Wait the Fast RC to stabilize */
 357:.././hal/sam4s/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 577              	 .loc 1 357 2 is_stmt 1 view .LVU164
 578              	.L79:
 579              	 .loc 1 357 41 discriminator 1 view .LVU165
 580              	 .loc 1 357 8 discriminator 1 view .LVU166
 581              	 .loc 1 357 14 is_stmt 0 discriminator 1 view .LVU167
 582 000e 8B6E     	 ldr r3,[r1,#104]
 583              	 .loc 1 357 8 discriminator 1 view .LVU168
 584 0010 9A03     	 lsls r2,r3,#14
 585 0012 FCD5     	 bpl .L79
 358:.././hal/sam4s/pmc.c **** 
 359:.././hal/sam4s/pmc.c **** 	/* Change Fast RC oscillator frequency */
 360:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
 586              	 .loc 1 360 2 is_stmt 1 view .LVU169
 587              	 .loc 1 360 22 is_stmt 0 view .LVU170
 588 0014 0B6A     	 ldr r3,[r1,#32]
 589              	 .loc 1 360 58 view .LVU171
 590 0016 23F45C13 	 bic r3,r3,#3604480
 591 001a 23F07003 	 bic r3,r3,#112
 361:.././hal/sam4s/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 592              	 .loc 1 361 24 view .LVU172
 593 001e 0343     	 orrs r3,r3,r0
 594 0020 43F45C13 	 orr r3,r3,#3604480
 360:.././hal/sam4s/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_moscrcf;
 595              	 .loc 1 360 16 view .LVU173
 596 0024 0B62     	 str r3,[r1,#32]
 362:.././hal/sam4s/pmc.c **** 
 363:.././hal/sam4s/pmc.c **** 	/* Wait the Fast RC to stabilize */
 364:.././hal/sam4s/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 597              	 .loc 1 364 2 is_stmt 1 view .LVU174
 598              	.L80:
 599              	 .loc 1 364 41 discriminator 1 view .LVU175
 600              	 .loc 1 364 8 discriminator 1 view .LVU176
 601              	 .loc 1 364 14 is_stmt 0 discriminator 1 view .LVU177
 602 0026 8B6E     	 ldr r3,[r1,#104]
 603              	 .loc 1 364 8 discriminator 1 view .LVU178
 604 0028 9B03     	 lsls r3,r3,#14
 605 002a FCD5     	 bpl .L80
 365:.././hal/sam4s/pmc.c **** 
 366:.././hal/sam4s/pmc.c **** 	/* Switch to Fast RC */
 367:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCSEL) |
 606              	 .loc 1 367 2 is_stmt 1 view .LVU179
 607              	 .loc 1 367 22 is_stmt 0 view .LVU180
 608 002c 0B6A     	 ldr r3,[r1,#32]
 609              	 .loc 1 367 54 view .LVU181
 610 002e 23F09B73 	 bic r3,r3,#20316160
 611 0032 23F48033 	 bic r3,r3,#65536
 612 0036 43F45C13 	 orr r3,r3,#3604480
 613              	 .loc 1 367 16 view .LVU182
 614 003a 0B62     	 str r3,[r1,#32]
 368:.././hal/sam4s/pmc.c **** 			CKGR_MOR_KEY_PASSWD;
 369:.././hal/sam4s/pmc.c **** }
 615              	 .loc 1 369 1 view .LVU183
 616 003c 7047     	 bx lr
 617              	.L86:
 618 003e 00BF     	 .align 2
 619              	.L85:
 620 0040 00040E40 	 .word 1074660352
 621              	 .cfi_endproc
 622              	.LFE144:
 624              	 .section .text.pmc_osc_enable_fastrc,"ax",%progbits
 625              	 .align 1
 626              	 .global pmc_osc_enable_fastrc
 627              	 .syntax unified
 628              	 .thumb
 629              	 .thumb_func
 630              	 .fpu softvfp
 632              	pmc_osc_enable_fastrc:
 633              	.LVL48:
 634              	.LFB145:
 370:.././hal/sam4s/pmc.c **** 
 371:.././hal/sam4s/pmc.c **** /**
 372:.././hal/sam4s/pmc.c ****  * \brief Enable fast RC oscillator.
 373:.././hal/sam4s/pmc.c ****  *
 374:.././hal/sam4s/pmc.c ****  * \param ul_rc Fast RC oscillator(4/8/12Mhz).
 375:.././hal/sam4s/pmc.c ****  */
 376:.././hal/sam4s/pmc.c **** void pmc_osc_enable_fastrc(uint32_t ul_rc)
 377:.././hal/sam4s/pmc.c **** {
 635              	 .loc 1 377 1 is_stmt 1 view-0
 636              	 .cfi_startproc
 637              	 
 638              	 
 639              	 
 378:.././hal/sam4s/pmc.c **** 	/* Enable Fast RC oscillator but DO NOT switch to RC */
 379:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR |= (CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCRCEN);
 640              	 .loc 1 379 2 view .LVU185
 641              	 .loc 1 379 16 is_stmt 0 view .LVU186
 642 0000 0B49     	 ldr r1,.L94
 643 0002 0A6A     	 ldr r2,[r1,#32]
 644 0004 42F45C12 	 orr r2,r2,#3604480
 645 0008 42F00802 	 orr r2,r2,#8
 646 000c 0A62     	 str r2,[r1,#32]
 380:.././hal/sam4s/pmc.c **** 	/* Wait the Fast RC to stabilize */
 381:.././hal/sam4s/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 647              	 .loc 1 381 2 is_stmt 1 view .LVU187
 648              	.L88:
 649              	 .loc 1 381 41 discriminator 1 view .LVU188
 650              	 .loc 1 381 8 discriminator 1 view .LVU189
 651              	 .loc 1 381 14 is_stmt 0 discriminator 1 view .LVU190
 652 000e 8B6E     	 ldr r3,[r1,#104]
 653              	 .loc 1 381 8 discriminator 1 view .LVU191
 654 0010 9A03     	 lsls r2,r3,#14
 655 0012 FCD5     	 bpl .L88
 382:.././hal/sam4s/pmc.c **** 
 383:.././hal/sam4s/pmc.c **** 	/* Change Fast RC oscillator frequency */
 384:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCF_Msk) |
 656              	 .loc 1 384 2 is_stmt 1 view .LVU192
 657              	 .loc 1 384 22 is_stmt 0 view .LVU193
 658 0014 0B6A     	 ldr r3,[r1,#32]
 659              	 .loc 1 384 58 view .LVU194
 660 0016 23F45C13 	 bic r3,r3,#3604480
 661 001a 23F07003 	 bic r3,r3,#112
 385:.././hal/sam4s/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 662              	 .loc 1 385 24 view .LVU195
 663 001e 0343     	 orrs r3,r3,r0
 664 0020 43F45C13 	 orr r3,r3,#3604480
 384:.././hal/sam4s/pmc.c **** 			CKGR_MOR_KEY_PASSWD | ul_rc;
 665              	 .loc 1 384 16 view .LVU196
 666 0024 0B62     	 str r3,[r1,#32]
 386:.././hal/sam4s/pmc.c **** 	/* Wait the Fast RC to stabilize */
 387:.././hal/sam4s/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCRCS));
 667              	 .loc 1 387 2 is_stmt 1 view .LVU197
 668              	.L89:
 669              	 .loc 1 387 41 discriminator 1 view .LVU198
 670              	 .loc 1 387 8 discriminator 1 view .LVU199
 671              	 .loc 1 387 14 is_stmt 0 discriminator 1 view .LVU200
 672 0026 8B6E     	 ldr r3,[r1,#104]
 673              	 .loc 1 387 8 discriminator 1 view .LVU201
 674 0028 9B03     	 lsls r3,r3,#14
 675 002a FCD5     	 bpl .L89
 388:.././hal/sam4s/pmc.c **** }
 676              	 .loc 1 388 1 view .LVU202
 677 002c 7047     	 bx lr
 678              	.L95:
 679 002e 00BF     	 .align 2
 680              	.L94:
 681 0030 00040E40 	 .word 1074660352
 682              	 .cfi_endproc
 683              	.LFE145:
 685              	 .section .text.pmc_osc_disable_fastrc,"ax",%progbits
 686              	 .align 1
 687              	 .global pmc_osc_disable_fastrc
 688              	 .syntax unified
 689              	 .thumb
 690              	 .thumb_func
 691              	 .fpu softvfp
 693              	pmc_osc_disable_fastrc:
 694              	.LFB146:
 389:.././hal/sam4s/pmc.c **** 
 390:.././hal/sam4s/pmc.c **** /**
 391:.././hal/sam4s/pmc.c ****  * \brief Disable the internal fast RC.
 392:.././hal/sam4s/pmc.c ****  */
 393:.././hal/sam4s/pmc.c **** void pmc_osc_disable_fastrc(void)
 394:.././hal/sam4s/pmc.c **** {
 695              	 .loc 1 394 1 is_stmt 1 view-0
 696              	 .cfi_startproc
 697              	 
 698              	 
 699              	 
 395:.././hal/sam4s/pmc.c **** 	/* Disable Fast RC oscillator */
 396:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCRCEN &
 700              	 .loc 1 396 2 view .LVU204
 701              	 .loc 1 396 22 is_stmt 0 view .LVU205
 702 0000 044A     	 ldr r2,.L97
 703 0002 136A     	 ldr r3,[r2,#32]
 397:.././hal/sam4s/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 398:.././hal/sam4s/pmc.c **** 				| CKGR_MOR_KEY_PASSWD;
 704              	 .loc 1 398 5 view .LVU206
 705 0004 23F45C13 	 bic r3,r3,#3604480
 706 0008 23F07803 	 bic r3,r3,#120
 707 000c 43F45C13 	 orr r3,r3,#3604480
 396:.././hal/sam4s/pmc.c **** 					~CKGR_MOR_MOSCRCF_Msk)
 708              	 .loc 1 396 16 view .LVU207
 709 0010 1362     	 str r3,[r2,#32]
 399:.././hal/sam4s/pmc.c **** }
 710              	 .loc 1 399 1 view .LVU208
 711 0012 7047     	 bx lr
 712              	.L98:
 713              	 .align 2
 714              	.L97:
 715 0014 00040E40 	 .word 1074660352
 716              	 .cfi_endproc
 717              	.LFE146:
 719              	 .section .text.pmc_osc_is_ready_fastrc,"ax",%progbits
 720              	 .align 1
 721              	 .global pmc_osc_is_ready_fastrc
 722              	 .syntax unified
 723              	 .thumb
 724              	 .thumb_func
 725              	 .fpu softvfp
 727              	pmc_osc_is_ready_fastrc:
 728              	.LFB147:
 400:.././hal/sam4s/pmc.c **** 
 401:.././hal/sam4s/pmc.c **** /**
 402:.././hal/sam4s/pmc.c ****  * \brief Check if the main fastrc is ready.
 403:.././hal/sam4s/pmc.c ****  *
 404:.././hal/sam4s/pmc.c ****  * \retval 0 Xtal is not ready, otherwise ready.
 405:.././hal/sam4s/pmc.c ****  */
 406:.././hal/sam4s/pmc.c **** uint32_t pmc_osc_is_ready_fastrc(void)
 407:.././hal/sam4s/pmc.c **** {
 729              	 .loc 1 407 1 is_stmt 1 view-0
 730              	 .cfi_startproc
 731              	 
 732              	 
 733              	 
 408:.././hal/sam4s/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_MOSCRCS);
 734              	 .loc 1 408 2 view .LVU210
 735              	 .loc 1 408 13 is_stmt 0 view .LVU211
 736 0000 024B     	 ldr r3,.L100
 737 0002 986E     	 ldr r0,[r3,#104]
 409:.././hal/sam4s/pmc.c **** }
 738              	 .loc 1 409 1 view .LVU212
 739 0004 00F40030 	 and r0,r0,#131072
 740 0008 7047     	 bx lr
 741              	.L101:
 742 000a 00BF     	 .align 2
 743              	.L100:
 744 000c 00040E40 	 .word 1074660352
 745              	 .cfi_endproc
 746              	.LFE147:
 748              	 .section .text.pmc_osc_enable_main_xtal,"ax",%progbits
 749              	 .align 1
 750              	 .global pmc_osc_enable_main_xtal
 751              	 .syntax unified
 752              	 .thumb
 753              	 .thumb_func
 754              	 .fpu softvfp
 756              	pmc_osc_enable_main_xtal:
 757              	.LVL49:
 758              	.LFB148:
 410:.././hal/sam4s/pmc.c **** 
 411:.././hal/sam4s/pmc.c **** /**
 412:.././hal/sam4s/pmc.c ****  * \brief Enable main XTAL oscillator.
 413:.././hal/sam4s/pmc.c ****  *
 414:.././hal/sam4s/pmc.c ****  * \param ul_xtal_startup_time Xtal start-up time, in number of slow clocks.
 415:.././hal/sam4s/pmc.c ****  */
 416:.././hal/sam4s/pmc.c **** void pmc_osc_enable_main_xtal(uint32_t ul_xtal_startup_time)
 417:.././hal/sam4s/pmc.c **** {
 759              	 .loc 1 417 1 is_stmt 1 view-0
 760              	 .cfi_startproc
 761              	 
 762              	 
 763              	 
 418:.././hal/sam4s/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 764              	 .loc 1 418 2 view .LVU214
 765              	 .loc 1 418 11 is_stmt 0 view .LVU215
 766 0000 074A     	 ldr r2,.L106
 767 0002 116A     	 ldr r1,[r2,#32]
 768              	.LVL50:
 419:.././hal/sam4s/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 769              	 .loc 1 419 2 is_stmt 1 view .LVU216
 420:.././hal/sam4s/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 770              	 .loc 1 420 2 view .LVU217
 421:.././hal/sam4s/pmc.c **** 			CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 771              	 .loc 1 421 4 is_stmt 0 view .LVU218
 772 0004 0302     	 lsls r3,r0,#8
 773 0006 9BB2     	 uxth r3,r3
 419:.././hal/sam4s/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 774              	 .loc 1 419 6 view .LVU219
 775 0008 21F00301 	 bic r1,r1,#3
 776              	.LVL51:
 420:.././hal/sam4s/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 777              	 .loc 1 420 6 view .LVU220
 778 000c 0B43     	 orrs r3,r3,r1
 779 000e 43F45C13 	 orr r3,r3,#3604480
 780 0012 43F00103 	 orr r3,r3,#1
 781              	.LVL52:
 422:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR = mor;
 782              	 .loc 1 422 2 is_stmt 1 view .LVU221
 783              	 .loc 1 422 16 is_stmt 0 view .LVU222
 784 0016 1362     	 str r3,[r2,#32]
 423:.././hal/sam4s/pmc.c **** 	/* Wait the main Xtal to stabilize */
 424:.././hal/sam4s/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
 785              	 .loc 1 424 2 is_stmt 1 view .LVU223
 786              	.LVL53:
 787              	.L103:
 788              	 .loc 1 424 41 discriminator 1 view .LVU224
 789              	 .loc 1 424 8 discriminator 1 view .LVU225
 790              	 .loc 1 424 14 is_stmt 0 discriminator 1 view .LVU226
 791 0018 936E     	 ldr r3,[r2,#104]
 792              	 .loc 1 424 8 discriminator 1 view .LVU227
 793 001a DB07     	 lsls r3,r3,#31
 794 001c FCD5     	 bpl .L103
 425:.././hal/sam4s/pmc.c **** }
 795              	 .loc 1 425 1 view .LVU228
 796 001e 7047     	 bx lr
 797              	.L107:
 798              	 .align 2
 799              	.L106:
 800 0020 00040E40 	 .word 1074660352
 801              	 .cfi_endproc
 802              	.LFE148:
 804              	 .section .text.pmc_osc_bypass_main_xtal,"ax",%progbits
 805              	 .align 1
 806              	 .global pmc_osc_bypass_main_xtal
 807              	 .syntax unified
 808              	 .thumb
 809              	 .thumb_func
 810              	 .fpu softvfp
 812              	pmc_osc_bypass_main_xtal:
 813              	.LFB149:
 426:.././hal/sam4s/pmc.c **** 
 427:.././hal/sam4s/pmc.c **** /**
 428:.././hal/sam4s/pmc.c ****  * \brief Bypass main XTAL.
 429:.././hal/sam4s/pmc.c ****  */
 430:.././hal/sam4s/pmc.c **** void pmc_osc_bypass_main_xtal(void)
 431:.././hal/sam4s/pmc.c **** {
 814              	 .loc 1 431 1 is_stmt 1 view-0
 815              	 .cfi_startproc
 816              	 
 817              	 
 818              	 
 432:.././hal/sam4s/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 819              	 .loc 1 432 2 view .LVU230
 820              	 .loc 1 432 11 is_stmt 0 view .LVU231
 821 0000 044A     	 ldr r2,.L109
 822 0002 136A     	 ldr r3,[r2,#32]
 823              	.LVL54:
 433:.././hal/sam4s/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 824              	 .loc 1 433 2 is_stmt 1 view .LVU232
 825              	 .loc 1 433 6 is_stmt 0 view .LVU233
 826 0004 23F00303 	 bic r3,r3,#3
 827              	.LVL55:
 434:.././hal/sam4s/pmc.c **** 	mor |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY;
 828              	 .loc 1 434 2 is_stmt 1 view .LVU234
 829              	 .loc 1 434 6 is_stmt 0 view .LVU235
 830 0008 43F45C13 	 orr r3,r3,#3604480
 831              	.LVL56:
 832              	 .loc 1 434 6 view .LVU236
 833 000c 43F00203 	 orr r3,r3,#2
 834              	.LVL57:
 435:.././hal/sam4s/pmc.c **** 	/* Enable Crystal oscillator but DO NOT switch now. Keep MOSCSEL to 0 */
 436:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR = mor;
 835              	 .loc 1 436 2 is_stmt 1 view .LVU237
 836              	 .loc 1 436 16 is_stmt 0 view .LVU238
 837 0010 1362     	 str r3,[r2,#32]
 437:.././hal/sam4s/pmc.c **** 	/* The MOSCXTS in PMC_SR is automatically set */
 438:.././hal/sam4s/pmc.c **** }
 838              	 .loc 1 438 1 view .LVU239
 839 0012 7047     	 bx lr
 840              	.L110:
 841              	 .align 2
 842              	.L109:
 843 0014 00040E40 	 .word 1074660352
 844              	 .cfi_endproc
 845              	.LFE149:
 847              	 .section .text.pmc_osc_disable_main_xtal,"ax",%progbits
 848              	 .align 1
 849              	 .global pmc_osc_disable_main_xtal
 850              	 .syntax unified
 851              	 .thumb
 852              	 .thumb_func
 853              	 .fpu softvfp
 855              	pmc_osc_disable_main_xtal:
 856              	.LFB150:
 439:.././hal/sam4s/pmc.c **** 
 440:.././hal/sam4s/pmc.c **** /**
 441:.././hal/sam4s/pmc.c ****  * \brief Disable the main Xtal.
 442:.././hal/sam4s/pmc.c ****  */
 443:.././hal/sam4s/pmc.c **** void pmc_osc_disable_main_xtal(void)
 444:.././hal/sam4s/pmc.c **** {
 857              	 .loc 1 444 1 is_stmt 1 view-0
 858              	 .cfi_startproc
 859              	 
 860              	 
 861              	 
 445:.././hal/sam4s/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 862              	 .loc 1 445 2 view .LVU241
 863              	 .loc 1 445 11 is_stmt 0 view .LVU242
 864 0000 034A     	 ldr r2,.L112
 865 0002 136A     	 ldr r3,[r2,#32]
 866              	.LVL58:
 446:.././hal/sam4s/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 867              	 .loc 1 446 2 is_stmt 1 view .LVU243
 447:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
 868              	 .loc 1 447 2 view .LVU244
 446:.././hal/sam4s/pmc.c **** 	mor &= ~(CKGR_MOR_MOSCXTBY|CKGR_MOR_MOSCXTEN);
 869              	 .loc 1 446 6 is_stmt 0 view .LVU245
 870 0004 23F00303 	 bic r3,r3,#3
 871              	.LVL59:
 872              	 .loc 1 447 38 view .LVU246
 873 0008 43F45C13 	 orr r3,r3,#3604480
 874              	.LVL60:
 875              	 .loc 1 447 16 view .LVU247
 876 000c 1362     	 str r3,[r2,#32]
 448:.././hal/sam4s/pmc.c **** }
 877              	 .loc 1 448 1 view .LVU248
 878 000e 7047     	 bx lr
 879              	.L113:
 880              	 .align 2
 881              	.L112:
 882 0010 00040E40 	 .word 1074660352
 883              	 .cfi_endproc
 884              	.LFE150:
 886              	 .section .text.pmc_osc_is_bypassed_main_xtal,"ax",%progbits
 887              	 .align 1
 888              	 .global pmc_osc_is_bypassed_main_xtal
 889              	 .syntax unified
 890              	 .thumb
 891              	 .thumb_func
 892              	 .fpu softvfp
 894              	pmc_osc_is_bypassed_main_xtal:
 895              	.LFB151:
 449:.././hal/sam4s/pmc.c **** 
 450:.././hal/sam4s/pmc.c **** /**
 451:.././hal/sam4s/pmc.c ****  * \brief Check if the main crystal is bypassed.
 452:.././hal/sam4s/pmc.c ****  *
 453:.././hal/sam4s/pmc.c ****  * \retval 0 Xtal is bypassed, otherwise not.
 454:.././hal/sam4s/pmc.c ****  */
 455:.././hal/sam4s/pmc.c **** uint32_t pmc_osc_is_bypassed_main_xtal(void)
 456:.././hal/sam4s/pmc.c **** {
 896              	 .loc 1 456 1 is_stmt 1 view-0
 897              	 .cfi_startproc
 898              	 
 899              	 
 900              	 
 457:.././hal/sam4s/pmc.c **** 	return (PMC->CKGR_MOR & CKGR_MOR_MOSCXTBY);
 901              	 .loc 1 457 2 view .LVU250
 902              	 .loc 1 457 13 is_stmt 0 view .LVU251
 903 0000 024B     	 ldr r3,.L115
 904 0002 186A     	 ldr r0,[r3,#32]
 458:.././hal/sam4s/pmc.c **** }
 905              	 .loc 1 458 1 view .LVU252
 906 0004 00F00200 	 and r0,r0,#2
 907 0008 7047     	 bx lr
 908              	.L116:
 909 000a 00BF     	 .align 2
 910              	.L115:
 911 000c 00040E40 	 .word 1074660352
 912              	 .cfi_endproc
 913              	.LFE151:
 915              	 .section .text.pmc_osc_is_ready_main_xtal,"ax",%progbits
 916              	 .align 1
 917              	 .global pmc_osc_is_ready_main_xtal
 918              	 .syntax unified
 919              	 .thumb
 920              	 .thumb_func
 921              	 .fpu softvfp
 923              	pmc_osc_is_ready_main_xtal:
 924              	.LFB152:
 459:.././hal/sam4s/pmc.c **** 
 460:.././hal/sam4s/pmc.c **** /**
 461:.././hal/sam4s/pmc.c ****  * \brief Check if the main crystal is ready.
 462:.././hal/sam4s/pmc.c ****  *
 463:.././hal/sam4s/pmc.c ****  * \note If main crystal is bypassed, it's always ready.
 464:.././hal/sam4s/pmc.c ****  *
 465:.././hal/sam4s/pmc.c ****  * \retval 0 main crystal is not ready, otherwise ready.
 466:.././hal/sam4s/pmc.c ****  */
 467:.././hal/sam4s/pmc.c **** uint32_t pmc_osc_is_ready_main_xtal(void)
 468:.././hal/sam4s/pmc.c **** {
 925              	 .loc 1 468 1 is_stmt 1 view-0
 926              	 .cfi_startproc
 927              	 
 928              	 
 929              	 
 469:.././hal/sam4s/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_MOSCXTS);
 930              	 .loc 1 469 2 view .LVU254
 931              	 .loc 1 469 13 is_stmt 0 view .LVU255
 932 0000 024B     	 ldr r3,.L118
 933 0002 986E     	 ldr r0,[r3,#104]
 470:.././hal/sam4s/pmc.c **** }
 934              	 .loc 1 470 1 view .LVU256
 935 0004 00F00100 	 and r0,r0,#1
 936 0008 7047     	 bx lr
 937              	.L119:
 938 000a 00BF     	 .align 2
 939              	.L118:
 940 000c 00040E40 	 .word 1074660352
 941              	 .cfi_endproc
 942              	.LFE152:
 944              	 .section .text.pmc_switch_mainck_to_xtal,"ax",%progbits
 945              	 .align 1
 946              	 .global pmc_switch_mainck_to_xtal
 947              	 .syntax unified
 948              	 .thumb
 949              	 .thumb_func
 950              	 .fpu softvfp
 952              	pmc_switch_mainck_to_xtal:
 953              	.LVL61:
 954              	.LFB153:
 471:.././hal/sam4s/pmc.c **** 
 472:.././hal/sam4s/pmc.c **** /**
 473:.././hal/sam4s/pmc.c ****  * \brief Switch main clock source selection to external Xtal/Bypass.
 474:.././hal/sam4s/pmc.c ****  *
 475:.././hal/sam4s/pmc.c ****  * \note The function may switch MCK to SCLK if MCK source is MAINCK to avoid
 476:.././hal/sam4s/pmc.c ****  *       any system crash.
 477:.././hal/sam4s/pmc.c ****  *
 478:.././hal/sam4s/pmc.c ****  * \note If used in Xtal mode, the Xtal is automatically enabled.
 479:.././hal/sam4s/pmc.c ****  *
 480:.././hal/sam4s/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 481:.././hal/sam4s/pmc.c ****  *
 482:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 483:.././hal/sam4s/pmc.c ****  * \retval 1 Timeout error.
 484:.././hal/sam4s/pmc.c ****  */
 485:.././hal/sam4s/pmc.c **** void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
 486:.././hal/sam4s/pmc.c **** 		uint32_t ul_xtal_startup_time)
 487:.././hal/sam4s/pmc.c **** {
 955              	 .loc 1 487 1 is_stmt 1 view-0
 956              	 .cfi_startproc
 957              	 
 958              	 
 959              	 
 488:.././hal/sam4s/pmc.c **** 	/* Enable Main Xtal oscillator */
 489:.././hal/sam4s/pmc.c **** 	if (ul_bypass) {
 960              	 .loc 1 489 2 view .LVU258
 961 0000 0F4A     	 ldr r2,.L127
 962              	 .loc 1 489 5 is_stmt 0 view .LVU259
 963 0002 30B1     	 cbz r0,.L121
 490:.././hal/sam4s/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 964              	 .loc 1 490 3 is_stmt 1 view .LVU260
 965              	 .loc 1 490 23 is_stmt 0 view .LVU261
 966 0004 136A     	 ldr r3,[r2,#32]
 491:.././hal/sam4s/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
 967              	 .loc 1 491 45 view .LVU262
 968 0006 0F49     	 ldr r1,.L127+4
 969              	.LVL62:
 970              	 .loc 1 491 45 view .LVU263
 971 0008 1940     	 ands r1,r1,r3
 972 000a 0F4B     	 ldr r3,.L127+8
 973 000c 0B43     	 orrs r3,r3,r1
 974              	.LVL63:
 975              	.L126:
 492:.././hal/sam4s/pmc.c **** 				CKGR_MOR_MOSCSEL;
 493:.././hal/sam4s/pmc.c **** 	} else {
 494:.././hal/sam4s/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 495:.././hal/sam4s/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 496:.././hal/sam4s/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 497:.././hal/sam4s/pmc.c **** 		/* Wait the Xtal to stabilize */
 498:.././hal/sam4s/pmc.c **** 		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
 499:.././hal/sam4s/pmc.c **** 
 500:.././hal/sam4s/pmc.c **** 		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
 976              	 .loc 1 500 17 view .LVU264
 977 000e 1362     	 str r3,[r2,#32]
 501:.././hal/sam4s/pmc.c **** 	}
 502:.././hal/sam4s/pmc.c **** }
 978              	 .loc 1 502 1 view .LVU265
 979 0010 7047     	 bx lr
 980              	.LVL64:
 981              	.L121:
 494:.././hal/sam4s/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 982              	 .loc 1 494 3 is_stmt 1 view .LVU266
 494:.././hal/sam4s/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 983              	 .loc 1 494 23 is_stmt 0 view .LVU267
 984 0012 106A     	 ldr r0,[r2,#32]
 985              	.LVL65:
 496:.././hal/sam4s/pmc.c **** 		/* Wait the Xtal to stabilize */
 986              	 .loc 1 496 5 view .LVU268
 987 0014 0B02     	 lsls r3,r1,#8
 495:.././hal/sam4s/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 988              	 .loc 1 495 25 view .LVU269
 989 0016 20F45C11 	 bic r1,r0,#3604480
 990              	.LVL66:
 496:.././hal/sam4s/pmc.c **** 		/* Wait the Xtal to stabilize */
 991              	 .loc 1 496 5 view .LVU270
 992 001a 9BB2     	 uxth r3,r3
 495:.././hal/sam4s/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 993              	 .loc 1 495 25 view .LVU271
 994 001c 21F00301 	 bic r1,r1,#3
 495:.././hal/sam4s/pmc.c **** 				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
 995              	 .loc 1 495 45 view .LVU272
 996 0020 0B43     	 orrs r3,r3,r1
 997 0022 43F45C13 	 orr r3,r3,#3604480
 998 0026 43F00103 	 orr r3,r3,#1
 494:.././hal/sam4s/pmc.c **** 				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
 999              	 .loc 1 494 17 view .LVU273
 1000 002a 1362     	 str r3,[r2,#32]
 498:.././hal/sam4s/pmc.c **** 
 1001              	 .loc 1 498 3 is_stmt 1 view .LVU274
 1002              	.L123:
 498:.././hal/sam4s/pmc.c **** 
 1003              	 .loc 1 498 42 discriminator 1 view .LVU275
 498:.././hal/sam4s/pmc.c **** 
 1004              	 .loc 1 498 9 discriminator 1 view .LVU276
 498:.././hal/sam4s/pmc.c **** 
 1005              	 .loc 1 498 15 is_stmt 0 discriminator 1 view .LVU277
 1006 002c 936E     	 ldr r3,[r2,#104]
 498:.././hal/sam4s/pmc.c **** 
 1007              	 .loc 1 498 9 discriminator 1 view .LVU278
 1008 002e DB07     	 lsls r3,r3,#31
 1009 0030 FCD5     	 bpl .L123
 500:.././hal/sam4s/pmc.c **** 	}
 1010              	 .loc 1 500 3 is_stmt 1 view .LVU279
 500:.././hal/sam4s/pmc.c **** 	}
 1011              	 .loc 1 500 17 is_stmt 0 view .LVU280
 1012 0032 136A     	 ldr r3,[r2,#32]
 1013 0034 43F09B73 	 orr r3,r3,#20316160
 1014 0038 43F48033 	 orr r3,r3,#65536
 1015 003c E7E7     	 b .L126
 1016              	.L128:
 1017 003e 00BF     	 .align 2
 1018              	.L127:
 1019 0040 00040E40 	 .word 1074660352
 1020 0044 FCFFC8FE 	 .word -20381700
 1021 0048 02003701 	 .word 20381698
 1022              	 .cfi_endproc
 1023              	.LFE153:
 1025              	 .section .text.pmc_osc_disable_xtal,"ax",%progbits
 1026              	 .align 1
 1027              	 .global pmc_osc_disable_xtal
 1028              	 .syntax unified
 1029              	 .thumb
 1030              	 .thumb_func
 1031              	 .fpu softvfp
 1033              	pmc_osc_disable_xtal:
 1034              	.LVL67:
 1035              	.LFB154:
 503:.././hal/sam4s/pmc.c **** 
 504:.././hal/sam4s/pmc.c **** /**
 505:.././hal/sam4s/pmc.c ****  * \brief Disable the external Xtal.
 506:.././hal/sam4s/pmc.c ****  *
 507:.././hal/sam4s/pmc.c ****  * \param ul_bypass 0 for Xtal, 1 for bypass.
 508:.././hal/sam4s/pmc.c ****  */
 509:.././hal/sam4s/pmc.c **** void pmc_osc_disable_xtal(uint32_t ul_bypass)
 510:.././hal/sam4s/pmc.c **** {
 1036              	 .loc 1 510 1 is_stmt 1 view-0
 1037              	 .cfi_startproc
 1038              	 
 1039              	 
 1040              	 
 511:.././hal/sam4s/pmc.c **** 	/* Disable xtal oscillator */
 512:.././hal/sam4s/pmc.c **** 	if (ul_bypass) {
 1041              	 .loc 1 512 2 view .LVU282
 1042 0000 064A     	 ldr r2,.L133
 513:.././hal/sam4s/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 1043              	 .loc 1 513 23 is_stmt 0 view .LVU283
 1044 0002 136A     	 ldr r3,[r2,#32]
 1045              	 .loc 1 513 56 view .LVU284
 1046 0004 23F45C13 	 bic r3,r3,#3604480
 512:.././hal/sam4s/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
 1047              	 .loc 1 512 5 view .LVU285
 1048 0008 28B1     	 cbz r0,.L130
 1049              	 .loc 1 513 3 is_stmt 1 view .LVU286
 1050              	 .loc 1 513 56 is_stmt 0 view .LVU287
 1051 000a 23F00203 	 bic r3,r3,#2
 1052              	.L132:
 514:.././hal/sam4s/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 515:.././hal/sam4s/pmc.c **** 	} else {
 516:.././hal/sam4s/pmc.c **** 		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
 1053              	 .loc 1 516 56 view .LVU288
 1054 000e 43F45C13 	 orr r3,r3,#3604480
 1055              	 .loc 1 516 17 view .LVU289
 1056 0012 1362     	 str r3,[r2,#32]
 517:.././hal/sam4s/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 518:.././hal/sam4s/pmc.c **** 	}
 519:.././hal/sam4s/pmc.c **** }
 1057              	 .loc 1 519 1 view .LVU290
 1058 0014 7047     	 bx lr
 1059              	.L130:
 516:.././hal/sam4s/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 1060              	 .loc 1 516 3 is_stmt 1 view .LVU291
 516:.././hal/sam4s/pmc.c **** 				CKGR_MOR_KEY_PASSWD;
 1061              	 .loc 1 516 56 is_stmt 0 view .LVU292
 1062 0016 23F00103 	 bic r3,r3,#1
 1063 001a F8E7     	 b .L132
 1064              	.L134:
 1065              	 .align 2
 1066              	.L133:
 1067 001c 00040E40 	 .word 1074660352
 1068              	 .cfi_endproc
 1069              	.LFE154:
 1071              	 .section .text.pmc_osc_is_ready_mainck,"ax",%progbits
 1072              	 .align 1
 1073              	 .global pmc_osc_is_ready_mainck
 1074              	 .syntax unified
 1075              	 .thumb
 1076              	 .thumb_func
 1077              	 .fpu softvfp
 1079              	pmc_osc_is_ready_mainck:
 1080              	.LFB155:
 520:.././hal/sam4s/pmc.c **** 
 521:.././hal/sam4s/pmc.c **** /**
 522:.././hal/sam4s/pmc.c ****  * \brief Check if the MAINCK is ready. Depending on MOSCEL, MAINCK can be one
 523:.././hal/sam4s/pmc.c ****  * of Xtal, bypass or internal RC.
 524:.././hal/sam4s/pmc.c ****  *
 525:.././hal/sam4s/pmc.c ****  * \retval 1 Xtal is ready.
 526:.././hal/sam4s/pmc.c ****  * \retval 0 Xtal is not ready.
 527:.././hal/sam4s/pmc.c ****  */
 528:.././hal/sam4s/pmc.c **** uint32_t pmc_osc_is_ready_mainck(void)
 529:.././hal/sam4s/pmc.c **** {
 1081              	 .loc 1 529 1 is_stmt 1 view-0
 1082              	 .cfi_startproc
 1083              	 
 1084              	 
 1085              	 
 530:.././hal/sam4s/pmc.c **** 	return PMC->PMC_SR & PMC_SR_MOSCSELS;
 1086              	 .loc 1 530 2 view .LVU294
 1087              	 .loc 1 530 12 is_stmt 0 view .LVU295
 1088 0000 024B     	 ldr r3,.L136
 1089 0002 986E     	 ldr r0,[r3,#104]
 531:.././hal/sam4s/pmc.c **** }
 1090              	 .loc 1 531 1 view .LVU296
 1091 0004 00F48030 	 and r0,r0,#65536
 1092 0008 7047     	 bx lr
 1093              	.L137:
 1094 000a 00BF     	 .align 2
 1095              	.L136:
 1096 000c 00040E40 	 .word 1074660352
 1097              	 .cfi_endproc
 1098              	.LFE155:
 1100              	 .section .text.pmc_mainck_osc_select,"ax",%progbits
 1101              	 .align 1
 1102              	 .global pmc_mainck_osc_select
 1103              	 .syntax unified
 1104              	 .thumb
 1105              	 .thumb_func
 1106              	 .fpu softvfp
 1108              	pmc_mainck_osc_select:
 1109              	.LVL68:
 1110              	.LFB156:
 532:.././hal/sam4s/pmc.c **** 
 533:.././hal/sam4s/pmc.c **** /**
 534:.././hal/sam4s/pmc.c ****  * \brief Select Main Crystal or internal RC as main clock source.
 535:.././hal/sam4s/pmc.c ****  *
 536:.././hal/sam4s/pmc.c ****  * \note This function will not enable/disable RC or Main Crystal.
 537:.././hal/sam4s/pmc.c ****  *
 538:.././hal/sam4s/pmc.c ****  * \param ul_xtal_rc 0 internal RC is selected, otherwise Main Crystal.
 539:.././hal/sam4s/pmc.c ****  */
 540:.././hal/sam4s/pmc.c **** void pmc_mainck_osc_select(uint32_t ul_xtal_rc)
 541:.././hal/sam4s/pmc.c **** {
 1111              	 .loc 1 541 1 is_stmt 1 view-0
 1112              	 .cfi_startproc
 1113              	 
 1114              	 
 1115              	 
 542:.././hal/sam4s/pmc.c **** 	uint32_t mor = PMC->CKGR_MOR;
 1116              	 .loc 1 542 2 view .LVU298
 1117              	 .loc 1 542 11 is_stmt 0 view .LVU299
 1118 0000 054A     	 ldr r2,.L141
 1119 0002 136A     	 ldr r3,[r2,#32]
 1120              	.LVL69:
 543:.././hal/sam4s/pmc.c **** 	if (ul_xtal_rc) {
 1121              	 .loc 1 543 2 is_stmt 1 view .LVU300
 1122              	 .loc 1 543 5 is_stmt 0 view .LVU301
 1123 0004 28B1     	 cbz r0,.L139
 544:.././hal/sam4s/pmc.c **** 		mor |=  CKGR_MOR_MOSCSEL;
 1124              	 .loc 1 544 3 is_stmt 1 view .LVU302
 1125              	 .loc 1 544 7 is_stmt 0 view .LVU303
 1126 0006 43F08073 	 orr r3,r3,#16777216
 1127              	.LVL70:
 1128              	.L140:
 545:.././hal/sam4s/pmc.c **** 	} else {
 546:.././hal/sam4s/pmc.c **** 		mor &= ~CKGR_MOR_MOSCSEL;
 547:.././hal/sam4s/pmc.c **** 	}
 548:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | mor;
 1129              	 .loc 1 548 2 is_stmt 1 view .LVU304
 1130              	 .loc 1 548 38 is_stmt 0 view .LVU305
 1131 000a 43F45C13 	 orr r3,r3,#3604480
 1132              	.LVL71:
 1133              	 .loc 1 548 16 view .LVU306
 1134 000e 1362     	 str r3,[r2,#32]
 549:.././hal/sam4s/pmc.c **** }
 1135              	 .loc 1 549 1 view .LVU307
 1136 0010 7047     	 bx lr
 1137              	.LVL72:
 1138              	.L139:
 546:.././hal/sam4s/pmc.c **** 	}
 1139              	 .loc 1 546 3 is_stmt 1 view .LVU308
 546:.././hal/sam4s/pmc.c **** 	}
 1140              	 .loc 1 546 7 is_stmt 0 view .LVU309
 1141 0012 23F08073 	 bic r3,r3,#16777216
 1142              	.LVL73:
 546:.././hal/sam4s/pmc.c **** 	}
 1143              	 .loc 1 546 7 view .LVU310
 1144 0016 F8E7     	 b .L140
 1145              	.L142:
 1146              	 .align 2
 1147              	.L141:
 1148 0018 00040E40 	 .word 1074660352
 1149              	 .cfi_endproc
 1150              	.LFE156:
 1152              	 .section .text.pmc_enable_pllack,"ax",%progbits
 1153              	 .align 1
 1154              	 .global pmc_enable_pllack
 1155              	 .syntax unified
 1156              	 .thumb
 1157              	 .thumb_func
 1158              	 .fpu softvfp
 1160              	pmc_enable_pllack:
 1161              	.LVL74:
 1162              	.LFB157:
 550:.././hal/sam4s/pmc.c **** 
 551:.././hal/sam4s/pmc.c **** /**
 552:.././hal/sam4s/pmc.c ****  * \brief Enable PLLA clock.
 553:.././hal/sam4s/pmc.c ****  *
 554:.././hal/sam4s/pmc.c ****  * \param mula PLLA multiplier.
 555:.././hal/sam4s/pmc.c ****  * \param pllacount PLLA counter.
 556:.././hal/sam4s/pmc.c ****  * \param diva Divider.
 557:.././hal/sam4s/pmc.c ****  */
 558:.././hal/sam4s/pmc.c **** void pmc_enable_pllack(uint32_t mula, uint32_t pllacount, uint32_t diva)
 559:.././hal/sam4s/pmc.c **** {
 1163              	 .loc 1 559 1 is_stmt 1 view-0
 1164              	 .cfi_startproc
 1165              	 
 1166              	 
 560:.././hal/sam4s/pmc.c **** 	/* first disable the PLL to unlock the lock */
 561:.././hal/sam4s/pmc.c **** 	pmc_disable_pllack();
 1167              	 .loc 1 561 2 view .LVU312
 1168              	.LBB18:
 1169              	.LBI18:
 562:.././hal/sam4s/pmc.c **** 
 563:.././hal/sam4s/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP || SAMG)
 564:.././hal/sam4s/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(diva) |
 565:.././hal/sam4s/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 566:.././hal/sam4s/pmc.c **** #else
 567:.././hal/sam4s/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_DIVA(diva) |
 568:.././hal/sam4s/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 569:.././hal/sam4s/pmc.c **** #endif
 570:.././hal/sam4s/pmc.c **** 	while ((PMC->PMC_SR & PMC_SR_LOCKA) == 0);
 571:.././hal/sam4s/pmc.c **** }
 572:.././hal/sam4s/pmc.c **** 
 573:.././hal/sam4s/pmc.c **** /**
 574:.././hal/sam4s/pmc.c ****  * \brief Disable PLLA clock.
 575:.././hal/sam4s/pmc.c ****  */
 576:.././hal/sam4s/pmc.c **** void pmc_disable_pllack(void)
 1170              	 .loc 1 576 6 view .LVU313
 1171              	.LBB19:
 577:.././hal/sam4s/pmc.c **** {
 578:.././hal/sam4s/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP || SAMG)
 579:.././hal/sam4s/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
 580:.././hal/sam4s/pmc.c **** #else
 581:.././hal/sam4s/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
 1172              	 .loc 1 581 2 view .LVU314
 1173              	.LBE19:
 1174              	.LBE18:
 568:.././hal/sam4s/pmc.c **** #endif
 1175              	 .loc 1 568 4 is_stmt 0 view .LVU315
 1176 0000 0902     	 lsls r1,r1,#8
 1177              	.LVL75:
 567:.././hal/sam4s/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1178              	 .loc 1 567 37 view .LVU316
 1179 0002 D2B2     	 uxtb r2,r2
 1180              	.LVL76:
 568:.././hal/sam4s/pmc.c **** #endif
 1181              	 .loc 1 568 4 view .LVU317
 1182 0004 01F47C51 	 and r1,r1,#16128
 567:.././hal/sam4s/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1183              	 .loc 1 567 59 view .LVU318
 1184 0008 1143     	 orrs r1,r1,r2
 568:.././hal/sam4s/pmc.c **** #endif
 1185              	 .loc 1 568 38 view .LVU319
 1186 000a 074A     	 ldr r2,.L147
 1187              	.LBB23:
 1188              	.LBB20:
 1189              	 .loc 1 581 18 view .LVU320
 1190 000c 074B     	 ldr r3,.L147+4
 1191              	.LBE20:
 1192              	.LBE23:
 568:.././hal/sam4s/pmc.c **** #endif
 1193              	 .loc 1 568 38 view .LVU321
 1194 000e 02EA0042 	 and r2,r2,r0,lsl#16
 559:.././hal/sam4s/pmc.c **** 	/* first disable the PLL to unlock the lock */
 1195              	 .loc 1 559 1 view .LVU322
 1196 0012 10B5     	 push {r4,lr}
 1197              	.LCFI0:
 1198              	 .cfi_def_cfa_offset 8
 1199              	 .cfi_offset 4,-8
 1200              	 .cfi_offset 14,-4
 568:.././hal/sam4s/pmc.c **** #endif
 1201              	 .loc 1 568 36 view .LVU323
 1202 0014 1143     	 orrs r1,r1,r2
 1203              	.LBB24:
 1204              	.LBB21:
 1205              	 .loc 1 581 18 view .LVU324
 1206 0016 4FF00054 	 mov r4,#536870912
 1207              	.LBE21:
 1208              	.LBE24:
 568:.././hal/sam4s/pmc.c **** #endif
 1209              	 .loc 1 568 36 view .LVU325
 1210 001a 2143     	 orrs r1,r1,r4
 1211              	.LBB25:
 1212              	.LBB22:
 1213              	 .loc 1 581 18 view .LVU326
 1214 001c 9C62     	 str r4,[r3,#40]
 1215              	.LBE22:
 1216              	.LBE25:
 567:.././hal/sam4s/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1217              	 .loc 1 567 2 is_stmt 1 view .LVU327
 567:.././hal/sam4s/pmc.c **** 			CKGR_PLLAR_PLLACOUNT(pllacount) | CKGR_PLLAR_MULA(mula);
 1218              	 .loc 1 567 18 is_stmt 0 view .LVU328
 1219 001e 9962     	 str r1,[r3,#40]
 570:.././hal/sam4s/pmc.c **** }
 1220              	 .loc 1 570 2 is_stmt 1 view .LVU329
 1221              	.L144:
 570:.././hal/sam4s/pmc.c **** }
 1222              	 .loc 1 570 43 discriminator 1 view .LVU330
 570:.././hal/sam4s/pmc.c **** }
 1223              	 .loc 1 570 8 discriminator 1 view .LVU331
 570:.././hal/sam4s/pmc.c **** }
 1224              	 .loc 1 570 13 is_stmt 0 discriminator 1 view .LVU332
 1225 0020 9A6E     	 ldr r2,[r3,#104]
 570:.././hal/sam4s/pmc.c **** }
 1226              	 .loc 1 570 8 discriminator 1 view .LVU333
 1227 0022 9207     	 lsls r2,r2,#30
 1228 0024 FCD5     	 bpl .L144
 571:.././hal/sam4s/pmc.c **** 
 1229              	 .loc 1 571 1 view .LVU334
 1230 0026 10BD     	 pop {r4,pc}
 1231              	.L148:
 1232              	 .align 2
 1233              	.L147:
 1234 0028 0000FF07 	 .word 134152192
 1235 002c 00040E40 	 .word 1074660352
 1236              	 .cfi_endproc
 1237              	.LFE157:
 1239              	 .section .text.pmc_disable_pllack,"ax",%progbits
 1240              	 .align 1
 1241              	 .global pmc_disable_pllack
 1242              	 .syntax unified
 1243              	 .thumb
 1244              	 .thumb_func
 1245              	 .fpu softvfp
 1247              	pmc_disable_pllack:
 1248              	.LFB158:
 577:.././hal/sam4s/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP || SAMG)
 1249              	 .loc 1 577 1 is_stmt 1 view-0
 1250              	 .cfi_startproc
 1251              	 
 1252              	 
 1253              	 
 1254              	 .loc 1 581 2 view .LVU336
 1255              	 .loc 1 581 18 is_stmt 0 view .LVU337
 1256 0000 024B     	 ldr r3,.L150
 1257 0002 4FF00052 	 mov r2,#536870912
 1258 0006 9A62     	 str r2,[r3,#40]
 582:.././hal/sam4s/pmc.c **** #endif
 583:.././hal/sam4s/pmc.c **** }
 1259              	 .loc 1 583 1 view .LVU338
 1260 0008 7047     	 bx lr
 1261              	.L151:
 1262 000a 00BF     	 .align 2
 1263              	.L150:
 1264 000c 00040E40 	 .word 1074660352
 1265              	 .cfi_endproc
 1266              	.LFE158:
 1268              	 .section .text.pmc_is_locked_pllack,"ax",%progbits
 1269              	 .align 1
 1270              	 .global pmc_is_locked_pllack
 1271              	 .syntax unified
 1272              	 .thumb
 1273              	 .thumb_func
 1274              	 .fpu softvfp
 1276              	pmc_is_locked_pllack:
 1277              	.LFB159:
 584:.././hal/sam4s/pmc.c **** 
 585:.././hal/sam4s/pmc.c **** /**
 586:.././hal/sam4s/pmc.c ****  * \brief Is PLLA locked?
 587:.././hal/sam4s/pmc.c ****  *
 588:.././hal/sam4s/pmc.c ****  * \retval 0 Not locked.
 589:.././hal/sam4s/pmc.c ****  * \retval 1 Locked.
 590:.././hal/sam4s/pmc.c ****  */
 591:.././hal/sam4s/pmc.c **** uint32_t pmc_is_locked_pllack(void)
 592:.././hal/sam4s/pmc.c **** {
 1278              	 .loc 1 592 1 is_stmt 1 view-0
 1279              	 .cfi_startproc
 1280              	 
 1281              	 
 1282              	 
 593:.././hal/sam4s/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKA);
 1283              	 .loc 1 593 2 view .LVU340
 1284              	 .loc 1 593 13 is_stmt 0 view .LVU341
 1285 0000 024B     	 ldr r3,.L153
 1286 0002 986E     	 ldr r0,[r3,#104]
 594:.././hal/sam4s/pmc.c **** }
 1287              	 .loc 1 594 1 view .LVU342
 1288 0004 00F00200 	 and r0,r0,#2
 1289 0008 7047     	 bx lr
 1290              	.L154:
 1291 000a 00BF     	 .align 2
 1292              	.L153:
 1293 000c 00040E40 	 .word 1074660352
 1294              	 .cfi_endproc
 1295              	.LFE159:
 1297              	 .section .text.pmc_enable_pllbck,"ax",%progbits
 1298              	 .align 1
 1299              	 .global pmc_enable_pllbck
 1300              	 .syntax unified
 1301              	 .thumb
 1302              	 .thumb_func
 1303              	 .fpu softvfp
 1305              	pmc_enable_pllbck:
 1306              	.LVL77:
 1307              	.LFB160:
 595:.././hal/sam4s/pmc.c **** 
 596:.././hal/sam4s/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 597:.././hal/sam4s/pmc.c **** /**
 598:.././hal/sam4s/pmc.c ****  * \brief Enable PLLB clock.
 599:.././hal/sam4s/pmc.c ****  *
 600:.././hal/sam4s/pmc.c ****  * \param mulb PLLB multiplier.
 601:.././hal/sam4s/pmc.c ****  * \param pllbcount PLLB counter.
 602:.././hal/sam4s/pmc.c ****  * \param divb Divider.
 603:.././hal/sam4s/pmc.c ****  */
 604:.././hal/sam4s/pmc.c **** void pmc_enable_pllbck(uint32_t mulb, uint32_t pllbcount, uint32_t divb)
 605:.././hal/sam4s/pmc.c **** {
 1308              	 .loc 1 605 1 is_stmt 1 view-0
 1309              	 .cfi_startproc
 1310              	 
 1311              	 
 606:.././hal/sam4s/pmc.c **** 	/* first disable the PLL to unlock the lock */
 607:.././hal/sam4s/pmc.c **** 	pmc_disable_pllbck();
 1312              	 .loc 1 607 2 view .LVU344
 1313              	.LBB26:
 1314              	.LBI26:
 608:.././hal/sam4s/pmc.c **** 
 609:.././hal/sam4s/pmc.c **** #if SAMG55
 610:.././hal/sam4s/pmc.c **** 	PMC->CKGR_PLLAR = CKGR_PLLAR_PLLAEN(divb) |
 611:.././hal/sam4s/pmc.c **** 		CKGR_PLLAR_PLLACOUNT(pllbcount) | CKGR_PLLAR_MULA(mulb);
 612:.././hal/sam4s/pmc.c **** #else
 613:.././hal/sam4s/pmc.c **** 	PMC->CKGR_PLLBR =
 614:.././hal/sam4s/pmc.c **** 			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
 615:.././hal/sam4s/pmc.c **** 			| CKGR_PLLBR_MULB(mulb);
 616:.././hal/sam4s/pmc.c **** #endif
 617:.././hal/sam4s/pmc.c **** 	while ((PMC->PMC_SR & PMC_SR_LOCKB) == 0);
 618:.././hal/sam4s/pmc.c **** }
 619:.././hal/sam4s/pmc.c **** 
 620:.././hal/sam4s/pmc.c **** /**
 621:.././hal/sam4s/pmc.c ****  * \brief Disable PLLB clock.
 622:.././hal/sam4s/pmc.c ****  */
 623:.././hal/sam4s/pmc.c **** void pmc_disable_pllbck(void)
 1315              	 .loc 1 623 6 view .LVU345
 1316              	.LBB27:
 624:.././hal/sam4s/pmc.c **** {
 625:.././hal/sam4s/pmc.c **** 	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
 1317              	 .loc 1 625 2 view .LVU346
 1318              	.LBE27:
 1319              	.LBE26:
 614:.././hal/sam4s/pmc.c **** 			| CKGR_PLLBR_MULB(mulb);
 1320              	 .loc 1 614 28 is_stmt 0 view .LVU347
 1321 0000 0902     	 lsls r1,r1,#8
 1322              	.LVL78:
 614:.././hal/sam4s/pmc.c **** 			| CKGR_PLLBR_MULB(mulb);
 1323              	 .loc 1 614 4 view .LVU348
 1324 0002 D2B2     	 uxtb r2,r2
 1325              	.LVL79:
 614:.././hal/sam4s/pmc.c **** 			| CKGR_PLLBR_MULB(mulb);
 1326              	 .loc 1 614 28 view .LVU349
 1327 0004 01F47C51 	 and r1,r1,#16128
 614:.././hal/sam4s/pmc.c **** 			| CKGR_PLLBR_MULB(mulb);
 1328              	 .loc 1 614 26 view .LVU350
 1329 0008 1143     	 orrs r1,r1,r2
 615:.././hal/sam4s/pmc.c **** #endif
 1330              	 .loc 1 615 6 view .LVU351
 1331 000a 064A     	 ldr r2,.L159
 1332              	.LBB30:
 1333              	.LBB28:
 1334              	 .loc 1 625 18 view .LVU352
 1335 000c 064B     	 ldr r3,.L159+4
 1336              	.LBE28:
 1337              	.LBE30:
 615:.././hal/sam4s/pmc.c **** #endif
 1338              	 .loc 1 615 6 view .LVU353
 1339 000e 02EA0042 	 and r2,r2,r0,lsl#16
 605:.././hal/sam4s/pmc.c **** 	/* first disable the PLL to unlock the lock */
 1340              	 .loc 1 605 1 view .LVU354
 1341 0012 10B5     	 push {r4,lr}
 1342              	.LCFI1:
 1343              	 .cfi_def_cfa_offset 8
 1344              	 .cfi_offset 4,-8
 1345              	 .cfi_offset 14,-4
 615:.././hal/sam4s/pmc.c **** #endif
 1346              	 .loc 1 615 4 view .LVU355
 1347 0014 1143     	 orrs r1,r1,r2
 1348              	.LBB31:
 1349              	.LBB29:
 1350              	 .loc 1 625 18 view .LVU356
 1351 0016 0024     	 movs r4,#0
 1352 0018 DC62     	 str r4,[r3,#44]
 1353              	.LBE29:
 1354              	.LBE31:
 613:.././hal/sam4s/pmc.c **** 			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
 1355              	 .loc 1 613 2 is_stmt 1 view .LVU357
 613:.././hal/sam4s/pmc.c **** 			CKGR_PLLBR_DIVB(divb) | CKGR_PLLBR_PLLBCOUNT(pllbcount)
 1356              	 .loc 1 613 18 is_stmt 0 view .LVU358
 1357 001a D962     	 str r1,[r3,#44]
 617:.././hal/sam4s/pmc.c **** }
 1358              	 .loc 1 617 2 is_stmt 1 view .LVU359
 1359              	.L156:
 617:.././hal/sam4s/pmc.c **** }
 1360              	 .loc 1 617 43 discriminator 1 view .LVU360
 617:.././hal/sam4s/pmc.c **** }
 1361              	 .loc 1 617 8 discriminator 1 view .LVU361
 617:.././hal/sam4s/pmc.c **** }
 1362              	 .loc 1 617 13 is_stmt 0 discriminator 1 view .LVU362
 1363 001c 9A6E     	 ldr r2,[r3,#104]
 617:.././hal/sam4s/pmc.c **** }
 1364              	 .loc 1 617 8 discriminator 1 view .LVU363
 1365 001e 5207     	 lsls r2,r2,#29
 1366 0020 FCD5     	 bpl .L156
 618:.././hal/sam4s/pmc.c **** 
 1367              	 .loc 1 618 1 view .LVU364
 1368 0022 10BD     	 pop {r4,pc}
 1369              	.L160:
 1370              	 .align 2
 1371              	.L159:
 1372 0024 0000FF07 	 .word 134152192
 1373 0028 00040E40 	 .word 1074660352
 1374              	 .cfi_endproc
 1375              	.LFE160:
 1377              	 .section .text.pmc_disable_pllbck,"ax",%progbits
 1378              	 .align 1
 1379              	 .global pmc_disable_pllbck
 1380              	 .syntax unified
 1381              	 .thumb
 1382              	 .thumb_func
 1383              	 .fpu softvfp
 1385              	pmc_disable_pllbck:
 1386              	.LFB161:
 624:.././hal/sam4s/pmc.c **** 	PMC->CKGR_PLLBR = CKGR_PLLBR_MULB(0);
 1387              	 .loc 1 624 1 is_stmt 1 view-0
 1388              	 .cfi_startproc
 1389              	 
 1390              	 
 1391              	 
 1392              	 .loc 1 625 2 view .LVU366
 1393              	 .loc 1 625 18 is_stmt 0 view .LVU367
 1394 0000 014B     	 ldr r3,.L162
 1395 0002 0022     	 movs r2,#0
 1396 0004 DA62     	 str r2,[r3,#44]
 626:.././hal/sam4s/pmc.c **** }
 1397              	 .loc 1 626 1 view .LVU368
 1398 0006 7047     	 bx lr
 1399              	.L163:
 1400              	 .align 2
 1401              	.L162:
 1402 0008 00040E40 	 .word 1074660352
 1403              	 .cfi_endproc
 1404              	.LFE161:
 1406              	 .section .text.pmc_is_locked_pllbck,"ax",%progbits
 1407              	 .align 1
 1408              	 .global pmc_is_locked_pllbck
 1409              	 .syntax unified
 1410              	 .thumb
 1411              	 .thumb_func
 1412              	 .fpu softvfp
 1414              	pmc_is_locked_pllbck:
 1415              	.LFB162:
 627:.././hal/sam4s/pmc.c **** 
 628:.././hal/sam4s/pmc.c **** /**
 629:.././hal/sam4s/pmc.c ****  * \brief Is PLLB locked?
 630:.././hal/sam4s/pmc.c ****  *
 631:.././hal/sam4s/pmc.c ****  * \retval 0 Not locked.
 632:.././hal/sam4s/pmc.c ****  * \retval 1 Locked.
 633:.././hal/sam4s/pmc.c ****  */
 634:.././hal/sam4s/pmc.c **** uint32_t pmc_is_locked_pllbck(void)
 635:.././hal/sam4s/pmc.c **** {
 1416              	 .loc 1 635 1 is_stmt 1 view-0
 1417              	 .cfi_startproc
 1418              	 
 1419              	 
 1420              	 
 636:.././hal/sam4s/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKB);
 1421              	 .loc 1 636 2 view .LVU370
 1422              	 .loc 1 636 13 is_stmt 0 view .LVU371
 1423 0000 024B     	 ldr r3,.L165
 1424 0002 986E     	 ldr r0,[r3,#104]
 637:.././hal/sam4s/pmc.c **** }
 1425              	 .loc 1 637 1 view .LVU372
 1426 0004 00F00400 	 and r0,r0,#4
 1427 0008 7047     	 bx lr
 1428              	.L166:
 1429 000a 00BF     	 .align 2
 1430              	.L165:
 1431 000c 00040E40 	 .word 1074660352
 1432              	 .cfi_endproc
 1433              	.LFE162:
 1435              	 .section .text.pmc_enable_periph_clk,"ax",%progbits
 1436              	 .align 1
 1437              	 .global pmc_enable_periph_clk
 1438              	 .syntax unified
 1439              	 .thumb
 1440              	 .thumb_func
 1441              	 .fpu softvfp
 1443              	pmc_enable_periph_clk:
 1444              	.LVL80:
 1445              	.LFB163:
 638:.././hal/sam4s/pmc.c **** #endif
 639:.././hal/sam4s/pmc.c **** 
 640:.././hal/sam4s/pmc.c **** #if (SAM3XA || SAM3U || SAMV71 || SAMV70 || SAME70 || SAMS70)
 641:.././hal/sam4s/pmc.c **** /**
 642:.././hal/sam4s/pmc.c ****  * \brief Enable UPLL clock.
 643:.././hal/sam4s/pmc.c ****  */
 644:.././hal/sam4s/pmc.c **** void pmc_enable_upll_clock(void)
 645:.././hal/sam4s/pmc.c **** {
 646:.././hal/sam4s/pmc.c **** 	PMC->CKGR_UCKR = CKGR_UCKR_UPLLCOUNT(3) | CKGR_UCKR_UPLLEN;
 647:.././hal/sam4s/pmc.c **** 
 648:.././hal/sam4s/pmc.c **** 	/* Wait UTMI PLL Lock Status */
 649:.././hal/sam4s/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_LOCKU));
 650:.././hal/sam4s/pmc.c **** }
 651:.././hal/sam4s/pmc.c **** 
 652:.././hal/sam4s/pmc.c **** /**
 653:.././hal/sam4s/pmc.c ****  * \brief Disable UPLL clock.
 654:.././hal/sam4s/pmc.c ****  */
 655:.././hal/sam4s/pmc.c **** void pmc_disable_upll_clock(void)
 656:.././hal/sam4s/pmc.c **** {
 657:.././hal/sam4s/pmc.c **** 	PMC->CKGR_UCKR &= ~CKGR_UCKR_UPLLEN;
 658:.././hal/sam4s/pmc.c **** }
 659:.././hal/sam4s/pmc.c **** 
 660:.././hal/sam4s/pmc.c **** /**
 661:.././hal/sam4s/pmc.c ****  * \brief Is UPLL locked?
 662:.././hal/sam4s/pmc.c ****  *
 663:.././hal/sam4s/pmc.c ****  * \retval 0 Not locked.
 664:.././hal/sam4s/pmc.c ****  * \retval 1 Locked.
 665:.././hal/sam4s/pmc.c ****  */
 666:.././hal/sam4s/pmc.c **** uint32_t pmc_is_locked_upll(void)
 667:.././hal/sam4s/pmc.c **** {
 668:.././hal/sam4s/pmc.c **** 	return (PMC->PMC_SR & PMC_SR_LOCKU);
 669:.././hal/sam4s/pmc.c **** }
 670:.././hal/sam4s/pmc.c **** #endif
 671:.././hal/sam4s/pmc.c **** 
 672:.././hal/sam4s/pmc.c **** /**
 673:.././hal/sam4s/pmc.c ****  * \brief Enable the specified peripheral clock.
 674:.././hal/sam4s/pmc.c ****  *
 675:.././hal/sam4s/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 676:.././hal/sam4s/pmc.c ****  *
 677:.././hal/sam4s/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 678:.././hal/sam4s/pmc.c ****  *
 679:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 680:.././hal/sam4s/pmc.c ****  * \retval 1 Invalid parameter.
 681:.././hal/sam4s/pmc.c ****  */
 682:.././hal/sam4s/pmc.c **** uint32_t pmc_enable_periph_clk(uint32_t ul_id)
 683:.././hal/sam4s/pmc.c **** {
 1446              	 .loc 1 683 1 is_stmt 1 view-0
 1447              	 .cfi_startproc
 1448              	 
 1449              	 
 1450              	 
 684:.././hal/sam4s/pmc.c **** #if defined(REG_PMC_PCR) && !SAMG55
 685:.././hal/sam4s/pmc.c **** 	uint32_t pcr;
 686:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCR = ul_id & 0x7F;
 687:.././hal/sam4s/pmc.c **** 	pcr = PMC->PMC_PCR | PMC_PCR_EN | PMC_PCR_CMD;
 688:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCR = pcr;
 689:.././hal/sam4s/pmc.c **** 	return 0;
 690:.././hal/sam4s/pmc.c **** #else
 691:.././hal/sam4s/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 1451              	 .loc 1 691 2 view .LVU374
 1452              	 .loc 1 691 5 is_stmt 0 view .LVU375
 1453 0000 2228     	 cmp r0,#34
 1454 0002 18D8     	 bhi .L170
 692:.././hal/sam4s/pmc.c **** 		return 1;
 693:.././hal/sam4s/pmc.c **** 	}
 694:.././hal/sam4s/pmc.c **** 
 695:.././hal/sam4s/pmc.c **** 	if (ul_id < 32) {
 1455              	 .loc 1 695 2 is_stmt 1 view .LVU376
 1456              	 .loc 1 695 5 is_stmt 0 view .LVU377
 1457 0004 1F28     	 cmp r0,#31
 1458 0006 0D4A     	 ldr r2,.L173
 1459 0008 4FF00103 	 mov r3,#1
 1460 000c 08D8     	 bhi .L169
 696:.././hal/sam4s/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
 1461              	 .loc 1 696 3 is_stmt 1 view .LVU378
 1462              	 .loc 1 696 11 is_stmt 0 view .LVU379
 1463 000e 9169     	 ldr r1,[r2,#24]
 1464              	 .loc 1 696 29 view .LVU380
 1465 0010 03FA00F0 	 lsl r0,r3,r0
 1466              	.LVL81:
 1467              	 .loc 1 696 6 view .LVU381
 1468 0014 30EA0103 	 bics r3,r0,r1
 1469 0018 00D0     	 beq .L172
 697:.././hal/sam4s/pmc.c **** 			PMC->PMC_PCER0 = 1 << ul_id;
 1470              	 .loc 1 697 4 is_stmt 1 view .LVU382
 1471              	 .loc 1 697 19 is_stmt 0 view .LVU383
 1472 001a 1061     	 str r0,[r2,#16]
 1473              	.LVL82:
 1474              	.L172:
 698:.././hal/sam4s/pmc.c **** 		}
 699:.././hal/sam4s/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 |
 700:.././hal/sam4s/pmc.c **** 	} else {
 701:.././hal/sam4s/pmc.c **** 		ul_id -= 32;
 702:.././hal/sam4s/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
 703:.././hal/sam4s/pmc.c **** 			PMC->PMC_PCER1 = 1 << ul_id;
 704:.././hal/sam4s/pmc.c **** 		}
 705:.././hal/sam4s/pmc.c **** #endif
 706:.././hal/sam4s/pmc.c **** 	}
 707:.././hal/sam4s/pmc.c **** 
 708:.././hal/sam4s/pmc.c **** 	return 0;
 1475              	 .loc 1 708 9 view .LVU384
 1476 001c 0020     	 movs r0,#0
 709:.././hal/sam4s/pmc.c **** #endif /* defined(REG_PMC_PCR) && !SAMG55 */
 710:.././hal/sam4s/pmc.c **** }
 1477              	 .loc 1 710 1 view .LVU385
 1478 001e 7047     	 bx lr
 1479              	.LVL83:
 1480              	.L169:
 701:.././hal/sam4s/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
 1481              	 .loc 1 701 3 is_stmt 1 view .LVU386
 702:.././hal/sam4s/pmc.c **** 			PMC->PMC_PCER1 = 1 << ul_id;
 1482              	 .loc 1 702 11 is_stmt 0 view .LVU387
 1483 0020 D2F80811 	 ldr r1,[r2,#264]
 701:.././hal/sam4s/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
 1484              	 .loc 1 701 9 view .LVU388
 1485 0024 2038     	 subs r0,r0,#32
 1486              	.LVL84:
 702:.././hal/sam4s/pmc.c **** 			PMC->PMC_PCER1 = 1 << ul_id;
 1487              	 .loc 1 702 3 is_stmt 1 view .LVU389
 702:.././hal/sam4s/pmc.c **** 			PMC->PMC_PCER1 = 1 << ul_id;
 1488              	 .loc 1 702 29 is_stmt 0 view .LVU390
 1489 0026 03FA00F0 	 lsl r0,r3,r0
 1490              	.LVL85:
 702:.././hal/sam4s/pmc.c **** 			PMC->PMC_PCER1 = 1 << ul_id;
 1491              	 .loc 1 702 6 view .LVU391
 1492 002a 30EA0103 	 bics r3,r0,r1
 1493 002e F5D0     	 beq .L172
 703:.././hal/sam4s/pmc.c **** 		}
 1494              	 .loc 1 703 4 is_stmt 1 view .LVU392
 703:.././hal/sam4s/pmc.c **** 		}
 1495              	 .loc 1 703 19 is_stmt 0 view .LVU393
 1496 0030 C2F80001 	 str r0,[r2,#256]
 1497 0034 F2E7     	 b .L172
 1498              	.LVL86:
 1499              	.L170:
 692:.././hal/sam4s/pmc.c **** 	}
 1500              	 .loc 1 692 10 view .LVU394
 1501 0036 0120     	 movs r0,#1
 1502              	.LVL87:
 692:.././hal/sam4s/pmc.c **** 	}
 1503              	 .loc 1 692 10 view .LVU395
 1504 0038 7047     	 bx lr
 1505              	.L174:
 1506 003a 00BF     	 .align 2
 1507              	.L173:
 1508 003c 00040E40 	 .word 1074660352
 1509              	 .cfi_endproc
 1510              	.LFE163:
 1512              	 .section .text.pmc_disable_periph_clk,"ax",%progbits
 1513              	 .align 1
 1514              	 .global pmc_disable_periph_clk
 1515              	 .syntax unified
 1516              	 .thumb
 1517              	 .thumb_func
 1518              	 .fpu softvfp
 1520              	pmc_disable_periph_clk:
 1521              	.LVL88:
 1522              	.LFB164:
 711:.././hal/sam4s/pmc.c **** 
 712:.././hal/sam4s/pmc.c **** /**
 713:.././hal/sam4s/pmc.c ****  * \brief Disable the specified peripheral clock.
 714:.././hal/sam4s/pmc.c ****  *
 715:.././hal/sam4s/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 716:.././hal/sam4s/pmc.c ****  *
 717:.././hal/sam4s/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 718:.././hal/sam4s/pmc.c ****  *
 719:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 720:.././hal/sam4s/pmc.c ****  * \retval 1 Invalid parameter.
 721:.././hal/sam4s/pmc.c ****  */
 722:.././hal/sam4s/pmc.c **** uint32_t pmc_disable_periph_clk(uint32_t ul_id)
 723:.././hal/sam4s/pmc.c **** {
 1523              	 .loc 1 723 1 is_stmt 1 view-0
 1524              	 .cfi_startproc
 1525              	 
 1526              	 
 1527              	 
 724:.././hal/sam4s/pmc.c **** #if defined(REG_PMC_PCR) && !SAMG55
 725:.././hal/sam4s/pmc.c **** 	uint32_t pcr;
 726:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCR = ul_id & 0x7F;
 727:.././hal/sam4s/pmc.c **** 	pcr = PMC->PMC_PCR | PMC_PCR_CMD;
 728:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCR = pcr;
 729:.././hal/sam4s/pmc.c **** 	return 0;
 730:.././hal/sam4s/pmc.c **** #else
 731:.././hal/sam4s/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 1528              	 .loc 1 731 2 view .LVU397
 1529              	 .loc 1 731 5 is_stmt 0 view .LVU398
 1530 0000 2228     	 cmp r0,#34
 1531 0002 18D8     	 bhi .L178
 732:.././hal/sam4s/pmc.c **** 		return 1;
 733:.././hal/sam4s/pmc.c **** 	}
 734:.././hal/sam4s/pmc.c **** 
 735:.././hal/sam4s/pmc.c **** 	if (ul_id < 32) {
 1532              	 .loc 1 735 2 is_stmt 1 view .LVU399
 1533              	 .loc 1 735 5 is_stmt 0 view .LVU400
 1534 0004 1F28     	 cmp r0,#31
 1535 0006 0D4A     	 ldr r2,.L181
 1536 0008 4FF00103 	 mov r3,#1
 1537 000c 08D8     	 bhi .L177
 736:.././hal/sam4s/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id)) == (1u << ul_id)) {
 1538              	 .loc 1 736 3 is_stmt 1 view .LVU401
 1539              	 .loc 1 736 11 is_stmt 0 view .LVU402
 1540 000e 9169     	 ldr r1,[r2,#24]
 1541              	 .loc 1 736 29 view .LVU403
 1542 0010 03FA00F0 	 lsl r0,r3,r0
 1543              	.LVL89:
 1544              	 .loc 1 736 6 view .LVU404
 1545 0014 30EA0103 	 bics r3,r0,r1
 1546 0018 00D1     	 bne .L180
 737:.././hal/sam4s/pmc.c **** 			PMC->PMC_PCDR0 = 1 << ul_id;
 1547              	 .loc 1 737 4 is_stmt 1 view .LVU405
 1548              	 .loc 1 737 19 is_stmt 0 view .LVU406
 1549 001a 5061     	 str r0,[r2,#20]
 1550              	.LVL90:
 1551              	.L180:
 738:.././hal/sam4s/pmc.c **** 		}
 739:.././hal/sam4s/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 \
 740:.././hal/sam4s/pmc.c **** 		|| SAMV70 || SAME70 || SAMS70)
 741:.././hal/sam4s/pmc.c **** 	} else {
 742:.././hal/sam4s/pmc.c **** 		ul_id -= 32;
 743:.././hal/sam4s/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
 744:.././hal/sam4s/pmc.c **** 			PMC->PMC_PCDR1 = 1 << ul_id;
 745:.././hal/sam4s/pmc.c **** 		}
 746:.././hal/sam4s/pmc.c **** #endif
 747:.././hal/sam4s/pmc.c **** 	}
 748:.././hal/sam4s/pmc.c **** 	return 0;
 1552              	 .loc 1 748 9 view .LVU407
 1553 001c 0020     	 movs r0,#0
 749:.././hal/sam4s/pmc.c **** #endif /* defined(REG_PMC_PCR) && !SAMG55 */
 750:.././hal/sam4s/pmc.c **** }
 1554              	 .loc 1 750 1 view .LVU408
 1555 001e 7047     	 bx lr
 1556              	.LVL91:
 1557              	.L177:
 742:.././hal/sam4s/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
 1558              	 .loc 1 742 3 is_stmt 1 view .LVU409
 743:.././hal/sam4s/pmc.c **** 			PMC->PMC_PCDR1 = 1 << ul_id;
 1559              	 .loc 1 743 11 is_stmt 0 view .LVU410
 1560 0020 D2F80811 	 ldr r1,[r2,#264]
 742:.././hal/sam4s/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id)) == (1u << ul_id)) {
 1561              	 .loc 1 742 9 view .LVU411
 1562 0024 2038     	 subs r0,r0,#32
 1563              	.LVL92:
 743:.././hal/sam4s/pmc.c **** 			PMC->PMC_PCDR1 = 1 << ul_id;
 1564              	 .loc 1 743 3 is_stmt 1 view .LVU412
 743:.././hal/sam4s/pmc.c **** 			PMC->PMC_PCDR1 = 1 << ul_id;
 1565              	 .loc 1 743 29 is_stmt 0 view .LVU413
 1566 0026 03FA00F0 	 lsl r0,r3,r0
 1567              	.LVL93:
 743:.././hal/sam4s/pmc.c **** 			PMC->PMC_PCDR1 = 1 << ul_id;
 1568              	 .loc 1 743 6 view .LVU414
 1569 002a 30EA0103 	 bics r3,r0,r1
 1570 002e F5D1     	 bne .L180
 744:.././hal/sam4s/pmc.c **** 		}
 1571              	 .loc 1 744 4 is_stmt 1 view .LVU415
 744:.././hal/sam4s/pmc.c **** 		}
 1572              	 .loc 1 744 19 is_stmt 0 view .LVU416
 1573 0030 C2F80401 	 str r0,[r2,#260]
 1574 0034 F2E7     	 b .L180
 1575              	.LVL94:
 1576              	.L178:
 732:.././hal/sam4s/pmc.c **** 	}
 1577              	 .loc 1 732 10 view .LVU417
 1578 0036 0120     	 movs r0,#1
 1579              	.LVL95:
 732:.././hal/sam4s/pmc.c **** 	}
 1580              	 .loc 1 732 10 view .LVU418
 1581 0038 7047     	 bx lr
 1582              	.L182:
 1583 003a 00BF     	 .align 2
 1584              	.L181:
 1585 003c 00040E40 	 .word 1074660352
 1586              	 .cfi_endproc
 1587              	.LFE164:
 1589              	 .section .text.pmc_enable_all_periph_clk,"ax",%progbits
 1590              	 .align 1
 1591              	 .global pmc_enable_all_periph_clk
 1592              	 .syntax unified
 1593              	 .thumb
 1594              	 .thumb_func
 1595              	 .fpu softvfp
 1597              	pmc_enable_all_periph_clk:
 1598              	.LFB165:
 751:.././hal/sam4s/pmc.c **** 
 752:.././hal/sam4s/pmc.c **** /**
 753:.././hal/sam4s/pmc.c ****  * \brief Enable all peripheral clocks.
 754:.././hal/sam4s/pmc.c ****  */
 755:.././hal/sam4s/pmc.c **** void pmc_enable_all_periph_clk(void)
 756:.././hal/sam4s/pmc.c **** {
 1599              	 .loc 1 756 1 is_stmt 1 view-0
 1600              	 .cfi_startproc
 1601              	 
 1602              	 
 1603              	 
 757:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCER0 = PMC_MASK_STATUS0;
 1604              	 .loc 1 757 2 view .LVU420
 1605              	 .loc 1 757 17 is_stmt 0 view .LVU421
 1606 0000 084B     	 ldr r3,.L188
 1607 0002 6FF00302 	 mvn r2,#3
 1608 0006 1A61     	 str r2,[r3,#16]
 758:.././hal/sam4s/pmc.c **** 	while ((PMC->PMC_PCSR0 & PMC_MASK_STATUS0) != PMC_MASK_STATUS0);
 1609              	 .loc 1 758 2 is_stmt 1 view .LVU422
 1610              	.L184:
 1611              	 .loc 1 758 65 discriminator 1 view .LVU423
 1612              	 .loc 1 758 8 discriminator 1 view .LVU424
 1613              	 .loc 1 758 13 is_stmt 0 discriminator 1 view .LVU425
 1614 0008 9A69     	 ldr r2,[r3,#24]
 1615              	 .loc 1 758 25 discriminator 1 view .LVU426
 1616 000a 22F00302 	 bic r2,r2,#3
 1617              	 .loc 1 758 8 discriminator 1 view .LVU427
 1618 000e 0432     	 adds r2,r2,#4
 1619 0010 FAD1     	 bne .L184
 759:.././hal/sam4s/pmc.c **** 
 760:.././hal/sam4s/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMV71  \
 761:.././hal/sam4s/pmc.c **** 		|| SAMV70 || SAME70 || SAMS70)
 762:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCER1 = PMC_MASK_STATUS1;
 1620              	 .loc 1 762 2 is_stmt 1 view .LVU428
 1621              	 .loc 1 762 17 is_stmt 0 view .LVU429
 1622 0012 4FF0FF32 	 mov r2,#-1
 1623 0016 C3F80021 	 str r2,[r3,#256]
 763:.././hal/sam4s/pmc.c **** 	while ((PMC->PMC_PCSR1 & PMC_MASK_STATUS1) != PMC_MASK_STATUS1);
 1624              	 .loc 1 763 2 is_stmt 1 view .LVU430
 1625              	.L185:
 1626              	 .loc 1 763 65 discriminator 1 view .LVU431
 1627              	 .loc 1 763 8 discriminator 1 view .LVU432
 1628              	 .loc 1 763 13 is_stmt 0 discriminator 1 view .LVU433
 1629 001a D3F80821 	 ldr r2,[r3,#264]
 1630              	 .loc 1 763 8 discriminator 1 view .LVU434
 1631 001e 0132     	 adds r2,r2,#1
 1632 0020 FBD1     	 bne .L185
 764:.././hal/sam4s/pmc.c **** #endif
 765:.././hal/sam4s/pmc.c **** 
 766:.././hal/sam4s/pmc.c **** #if defined(REG_PMC_PCR) && !SAMG55
 767:.././hal/sam4s/pmc.c **** 	for (uint32_t id = 64; id <= 0x7F; id ++) {
 768:.././hal/sam4s/pmc.c **** 		pmc_enable_periph_clk(id);
 769:.././hal/sam4s/pmc.c **** 	}
 770:.././hal/sam4s/pmc.c **** #endif
 771:.././hal/sam4s/pmc.c **** }
 1633              	 .loc 1 771 1 view .LVU435
 1634 0022 7047     	 bx lr
 1635              	.L189:
 1636              	 .align 2
 1637              	.L188:
 1638 0024 00040E40 	 .word 1074660352
 1639              	 .cfi_endproc
 1640              	.LFE165:
 1642              	 .section .text.pmc_disable_all_periph_clk,"ax",%progbits
 1643              	 .align 1
 1644              	 .global pmc_disable_all_periph_clk
 1645              	 .syntax unified
 1646              	 .thumb
 1647              	 .thumb_func
 1648              	 .fpu softvfp
 1650              	pmc_disable_all_periph_clk:
 1651              	.LFB166:
 772:.././hal/sam4s/pmc.c **** 
 773:.././hal/sam4s/pmc.c **** /**
 774:.././hal/sam4s/pmc.c ****  * \brief Disable all peripheral clocks.
 775:.././hal/sam4s/pmc.c ****  */
 776:.././hal/sam4s/pmc.c **** void pmc_disable_all_periph_clk(void)
 777:.././hal/sam4s/pmc.c **** {
 1652              	 .loc 1 777 1 is_stmt 1 view-0
 1653              	 .cfi_startproc
 1654              	 
 1655              	 
 1656              	 
 778:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCDR0 = PMC_MASK_STATUS0;
 1657              	 .loc 1 778 2 view .LVU437
 1658              	 .loc 1 778 17 is_stmt 0 view .LVU438
 1659 0000 084B     	 ldr r3,.L195
 1660 0002 6FF00302 	 mvn r2,#3
 1661 0006 5A61     	 str r2,[r3,#20]
 779:.././hal/sam4s/pmc.c **** 	while ((PMC->PMC_PCSR0 & PMC_MASK_STATUS0) != 0);
 1662              	 .loc 1 779 2 is_stmt 1 view .LVU439
 1663              	.L191:
 1664              	 .loc 1 779 50 discriminator 1 view .LVU440
 1665              	 .loc 1 779 8 discriminator 1 view .LVU441
 1666              	 .loc 1 779 13 is_stmt 0 discriminator 1 view .LVU442
 1667 0008 9A69     	 ldr r2,[r3,#24]
 1668              	 .loc 1 779 8 discriminator 1 view .LVU443
 1669 000a 32F00302 	 bics r2,r2,#3
 1670 000e FBD1     	 bne .L191
 780:.././hal/sam4s/pmc.c **** 
 781:.././hal/sam4s/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMV71 \
 782:.././hal/sam4s/pmc.c **** 		|| SAMV70 || SAME70 || SAMS70)
 783:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCDR1 = PMC_MASK_STATUS1;
 1671              	 .loc 1 783 2 is_stmt 1 view .LVU444
 1672              	 .loc 1 783 17 is_stmt 0 view .LVU445
 1673 0010 4FF0FF32 	 mov r2,#-1
 1674 0014 C3F80421 	 str r2,[r3,#260]
 784:.././hal/sam4s/pmc.c **** 	while ((PMC->PMC_PCSR1 & PMC_MASK_STATUS1) != 0);
 1675              	 .loc 1 784 2 is_stmt 1 view .LVU446
 1676              	.L192:
 1677              	 .loc 1 784 50 discriminator 1 view .LVU447
 1678              	 .loc 1 784 8 discriminator 1 view .LVU448
 1679              	 .loc 1 784 13 is_stmt 0 discriminator 1 view .LVU449
 1680 0018 D3F80821 	 ldr r2,[r3,#264]
 1681              	 .loc 1 784 8 discriminator 1 view .LVU450
 1682 001c 002A     	 cmp r2,#0
 1683 001e FBD1     	 bne .L192
 785:.././hal/sam4s/pmc.c **** #endif
 786:.././hal/sam4s/pmc.c **** 
 787:.././hal/sam4s/pmc.c **** #if defined(REG_PMC_PCR) && !SAMG55
 788:.././hal/sam4s/pmc.c **** 	for (uint32_t id = 64; id <= 0x7F; id ++) {
 789:.././hal/sam4s/pmc.c **** 		pmc_disable_periph_clk(id);
 790:.././hal/sam4s/pmc.c **** 	}
 791:.././hal/sam4s/pmc.c **** #endif
 792:.././hal/sam4s/pmc.c **** }
 1684              	 .loc 1 792 1 view .LVU451
 1685 0020 7047     	 bx lr
 1686              	.L196:
 1687 0022 00BF     	 .align 2
 1688              	.L195:
 1689 0024 00040E40 	 .word 1074660352
 1690              	 .cfi_endproc
 1691              	.LFE166:
 1693              	 .section .text.pmc_is_periph_clk_enabled,"ax",%progbits
 1694              	 .align 1
 1695              	 .global pmc_is_periph_clk_enabled
 1696              	 .syntax unified
 1697              	 .thumb
 1698              	 .thumb_func
 1699              	 .fpu softvfp
 1701              	pmc_is_periph_clk_enabled:
 1702              	.LVL96:
 1703              	.LFB167:
 793:.././hal/sam4s/pmc.c **** 
 794:.././hal/sam4s/pmc.c **** /**
 795:.././hal/sam4s/pmc.c ****  * \brief Check if the specified peripheral clock is enabled.
 796:.././hal/sam4s/pmc.c ****  *
 797:.././hal/sam4s/pmc.c ****  * \note The ID must NOT be shifted (i.e., 1 << ID_xxx).
 798:.././hal/sam4s/pmc.c ****  *
 799:.././hal/sam4s/pmc.c ****  * \param ul_id Peripheral ID (ID_xxx).
 800:.././hal/sam4s/pmc.c ****  *
 801:.././hal/sam4s/pmc.c ****  * \retval 0 Peripheral clock is disabled or unknown.
 802:.././hal/sam4s/pmc.c ****  * \retval 1 Peripheral clock is enabled.
 803:.././hal/sam4s/pmc.c ****  */
 804:.././hal/sam4s/pmc.c **** uint32_t pmc_is_periph_clk_enabled(uint32_t ul_id)
 805:.././hal/sam4s/pmc.c **** {
 1704              	 .loc 1 805 1 is_stmt 1 view-0
 1705              	 .cfi_startproc
 1706              	 
 1707              	 
 1708              	 
 806:.././hal/sam4s/pmc.c **** #if defined(REG_PMC_PCR) && !SAMG55
 807:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCR = ul_id & 0x7F;
 808:.././hal/sam4s/pmc.c **** 	return (PMC->PMC_PCR & PMC_PCR_EN) ? 1 : 0;
 809:.././hal/sam4s/pmc.c **** #else
 810:.././hal/sam4s/pmc.c **** 	if (ul_id > MAX_PERIPH_ID) {
 1709              	 .loc 1 810 2 view .LVU453
 1710              	 .loc 1 810 5 is_stmt 0 view .LVU454
 1711 0000 2228     	 cmp r0,#34
 1712 0002 16D8     	 bhi .L200
 811:.././hal/sam4s/pmc.c **** 		return 0;
 812:.././hal/sam4s/pmc.c **** 	}
 813:.././hal/sam4s/pmc.c **** 
 814:.././hal/sam4s/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMV71 \
 815:.././hal/sam4s/pmc.c **** 		|| SAMV70 || SAME70 || SAMS70)
 816:.././hal/sam4s/pmc.c **** 	if (ul_id < 32) {
 1713              	 .loc 1 816 2 is_stmt 1 view .LVU455
 1714              	 .loc 1 816 5 is_stmt 0 view .LVU456
 1715 0004 1F28     	 cmp r0,#31
 1716 0006 0C4A     	 ldr r2,.L202
 1717 0008 4FF00103 	 mov r3,#1
 1718 000c 08D8     	 bhi .L199
 817:.././hal/sam4s/pmc.c **** #endif
 818:.././hal/sam4s/pmc.c **** 		if ((PMC->PMC_PCSR0 & (1u << ul_id))) {
 1719              	 .loc 1 818 3 is_stmt 1 view .LVU457
 1720              	 .loc 1 818 11 is_stmt 0 view .LVU458
 1721 000e 9269     	 ldr r2,[r2,#24]
 1722              	 .loc 1 818 29 view .LVU459
 1723 0010 03FA00F0 	 lsl r0,r3,r0
 1724              	.LVL97:
 1725              	 .loc 1 818 6 view .LVU460
 1726 0014 1042     	 tst r0,r2
 1727 0016 18BF     	 it ne
 1728 0018 1846     	 movne r0,r3
 1729              	.LVL98:
 1730              	.L201:
 819:.././hal/sam4s/pmc.c **** 			return 1;
 820:.././hal/sam4s/pmc.c **** 		} else {
 821:.././hal/sam4s/pmc.c **** 			return 0;
 822:.././hal/sam4s/pmc.c **** 		}
 823:.././hal/sam4s/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMV71 \
 824:.././hal/sam4s/pmc.c **** 		|| SAMV70 || SAME70 || SAMS70)
 825:.././hal/sam4s/pmc.c **** 	} else {
 826:.././hal/sam4s/pmc.c **** 		ul_id -= 32;
 827:.././hal/sam4s/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id))) {
 1731              	 .loc 1 827 6 view .LVU461
 1732 001a 08BF     	 it eq
 1733 001c 0020     	 moveq r0,#0
 1734 001e 7047     	 bx lr
 1735              	.LVL99:
 1736              	.L199:
 826:.././hal/sam4s/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id))) {
 1737              	 .loc 1 826 3 is_stmt 1 view .LVU462
 1738              	 .loc 1 827 3 view .LVU463
 1739              	 .loc 1 827 11 is_stmt 0 view .LVU464
 1740 0020 D2F80821 	 ldr r2,[r2,#264]
 826:.././hal/sam4s/pmc.c **** 		if ((PMC->PMC_PCSR1 & (1u << ul_id))) {
 1741              	 .loc 1 826 9 view .LVU465
 1742 0024 2038     	 subs r0,r0,#32
 1743              	.LVL100:
 1744              	 .loc 1 827 29 view .LVU466
 1745 0026 03FA00F0 	 lsl r0,r3,r0
 1746              	.LVL101:
 1747              	 .loc 1 827 6 view .LVU467
 1748 002a 1042     	 tst r0,r2
 1749 002c 18BF     	 it ne
 1750 002e 0120     	 movne r0,#1
 1751 0030 F3E7     	 b .L201
 1752              	.LVL102:
 1753              	.L200:
 811:.././hal/sam4s/pmc.c **** 	}
 1754              	 .loc 1 811 10 view .LVU468
 1755 0032 0020     	 movs r0,#0
 1756              	.LVL103:
 828:.././hal/sam4s/pmc.c **** 			return 1;
 829:.././hal/sam4s/pmc.c **** 		} else {
 830:.././hal/sam4s/pmc.c **** 			return 0;
 831:.././hal/sam4s/pmc.c **** 		}
 832:.././hal/sam4s/pmc.c **** 	}
 833:.././hal/sam4s/pmc.c **** #endif
 834:.././hal/sam4s/pmc.c **** #endif /* defined(REG_PMC_PCR) && !SAMG55 */
 835:.././hal/sam4s/pmc.c **** }
 1757              	 .loc 1 835 1 view .LVU469
 1758 0034 7047     	 bx lr
 1759              	.L203:
 1760 0036 00BF     	 .align 2
 1761              	.L202:
 1762 0038 00040E40 	 .word 1074660352
 1763              	 .cfi_endproc
 1764              	.LFE167:
 1766              	 .section .text.pmc_pck_set_prescaler,"ax",%progbits
 1767              	 .align 1
 1768              	 .global pmc_pck_set_prescaler
 1769              	 .syntax unified
 1770              	 .thumb
 1771              	 .thumb_func
 1772              	 .fpu softvfp
 1774              	pmc_pck_set_prescaler:
 1775              	.LVL104:
 1776              	.LFB168:
 836:.././hal/sam4s/pmc.c **** 
 837:.././hal/sam4s/pmc.c **** /**
 838:.././hal/sam4s/pmc.c ****  * \brief Set the prescaler for the specified programmable clock.
 839:.././hal/sam4s/pmc.c ****  *
 840:.././hal/sam4s/pmc.c ****  * \param ul_id Peripheral ID.
 841:.././hal/sam4s/pmc.c ****  * \param ul_pres Prescaler value.
 842:.././hal/sam4s/pmc.c ****  */
 843:.././hal/sam4s/pmc.c **** void pmc_pck_set_prescaler(uint32_t ul_id, uint32_t ul_pres)
 844:.././hal/sam4s/pmc.c **** {
 1777              	 .loc 1 844 1 is_stmt 1 view-0
 1778              	 .cfi_startproc
 1779              	 
 1780              	 
 845:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 1781              	 .loc 1 845 2 view .LVU471
 844:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 1782              	 .loc 1 844 1 is_stmt 0 view .LVU472
 1783 0000 10B5     	 push {r4,lr}
 1784              	.LCFI2:
 1785              	 .cfi_def_cfa_offset 8
 1786              	 .cfi_offset 4,-8
 1787              	 .cfi_offset 14,-4
 1788 0002 094A     	 ldr r2,.L212
 1789 0004 02EB8004 	 add r4,r2,r0,lsl#2
 846:.././hal/sam4s/pmc.c **** 			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_PRES_Msk) | ul_pres;
 1790              	 .loc 1 846 17 view .LVU473
 1791 0008 236C     	 ldr r3,[r4,#64]
 1792              	 .loc 1 846 25 view .LVU474
 1793 000a 23F07003 	 bic r3,r3,#112
 1794              	 .loc 1 846 46 view .LVU475
 1795 000e 0B43     	 orrs r3,r3,r1
 845:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 1796              	 .loc 1 845 22 view .LVU476
 1797 0010 2364     	 str r3,[r4,#64]
 847:.././hal/sam4s/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 1798              	 .loc 1 847 2 is_stmt 1 view .LVU477
 1799              	 .loc 1 847 41 is_stmt 0 view .LVU478
 1800 0012 4FF48073 	 mov r3,#256
 1801 0016 03FA00F0 	 lsl r0,r3,r0
 1802              	.LVL105:
 1803              	.L206:
 848:.././hal/sam4s/pmc.c **** 			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
 1804              	 .loc 1 848 50 is_stmt 1 discriminator 1 view .LVU479
 847:.././hal/sam4s/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 1805              	 .loc 1 847 8 discriminator 1 view .LVU480
 847:.././hal/sam4s/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 1806              	 .loc 1 847 13 is_stmt 0 discriminator 1 view .LVU481
 1807 001a 1368     	 ldr r3,[r2]
 847:.././hal/sam4s/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 1808              	 .loc 1 847 8 discriminator 1 view .LVU482
 1809 001c 0342     	 tst r3,r0
 1810 001e 02D0     	 beq .L204
 1811              	 .loc 1 848 12 view .LVU483
 1812 0020 936E     	 ldr r3,[r2,#104]
 1813              	 .loc 1 848 4 view .LVU484
 1814 0022 1842     	 tst r0,r3
 1815 0024 F9D0     	 beq .L206
 1816              	.L204:
 849:.././hal/sam4s/pmc.c **** }
 1817              	 .loc 1 849 1 view .LVU485
 1818 0026 10BD     	 pop {r4,pc}
 1819              	.L213:
 1820              	 .align 2
 1821              	.L212:
 1822 0028 00040E40 	 .word 1074660352
 1823              	 .cfi_endproc
 1824              	.LFE168:
 1826              	 .section .text.pmc_pck_set_source,"ax",%progbits
 1827              	 .align 1
 1828              	 .global pmc_pck_set_source
 1829              	 .syntax unified
 1830              	 .thumb
 1831              	 .thumb_func
 1832              	 .fpu softvfp
 1834              	pmc_pck_set_source:
 1835              	.LVL106:
 1836              	.LFB169:
 850:.././hal/sam4s/pmc.c **** 
 851:.././hal/sam4s/pmc.c **** /**
 852:.././hal/sam4s/pmc.c ****  * \brief Set the source oscillator for the specified programmable clock.
 853:.././hal/sam4s/pmc.c ****  *
 854:.././hal/sam4s/pmc.c ****  * \param ul_id Peripheral ID.
 855:.././hal/sam4s/pmc.c ****  * \param ul_source Source selection value.
 856:.././hal/sam4s/pmc.c ****  */
 857:.././hal/sam4s/pmc.c **** void pmc_pck_set_source(uint32_t ul_id, uint32_t ul_source)
 858:.././hal/sam4s/pmc.c **** {
 1837              	 .loc 1 858 1 is_stmt 1 view-0
 1838              	 .cfi_startproc
 1839              	 
 1840              	 
 859:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 1841              	 .loc 1 859 2 view .LVU487
 858:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 1842              	 .loc 1 858 1 is_stmt 0 view .LVU488
 1843 0000 10B5     	 push {r4,lr}
 1844              	.LCFI3:
 1845              	 .cfi_def_cfa_offset 8
 1846              	 .cfi_offset 4,-8
 1847              	 .cfi_offset 14,-4
 1848 0002 094A     	 ldr r2,.L222
 1849 0004 02EB8004 	 add r4,r2,r0,lsl#2
 860:.././hal/sam4s/pmc.c **** 			(PMC->PMC_PCK[ul_id] & ~PMC_PCK_CSS_Msk) | ul_source;
 1850              	 .loc 1 860 17 view .LVU489
 1851 0008 236C     	 ldr r3,[r4,#64]
 1852              	 .loc 1 860 25 view .LVU490
 1853 000a 23F00703 	 bic r3,r3,#7
 1854              	 .loc 1 860 45 view .LVU491
 1855 000e 0B43     	 orrs r3,r3,r1
 859:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCK[ul_id] =
 1856              	 .loc 1 859 22 view .LVU492
 1857 0010 2364     	 str r3,[r4,#64]
 861:.././hal/sam4s/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 1858              	 .loc 1 861 2 is_stmt 1 view .LVU493
 1859              	 .loc 1 861 41 is_stmt 0 view .LVU494
 1860 0012 4FF48073 	 mov r3,#256
 1861 0016 03FA00F0 	 lsl r0,r3,r0
 1862              	.LVL107:
 1863              	.L216:
 862:.././hal/sam4s/pmc.c **** 			&& !(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)));
 1864              	 .loc 1 862 50 is_stmt 1 discriminator 1 view .LVU495
 861:.././hal/sam4s/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 1865              	 .loc 1 861 8 discriminator 1 view .LVU496
 861:.././hal/sam4s/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 1866              	 .loc 1 861 13 is_stmt 0 discriminator 1 view .LVU497
 1867 001a 1368     	 ldr r3,[r2]
 861:.././hal/sam4s/pmc.c **** 	while ((PMC->PMC_SCER & (PMC_SCER_PCK0 << ul_id))
 1868              	 .loc 1 861 8 discriminator 1 view .LVU498
 1869 001c 0342     	 tst r3,r0
 1870 001e 02D0     	 beq .L214
 1871              	 .loc 1 862 12 view .LVU499
 1872 0020 936E     	 ldr r3,[r2,#104]
 1873              	 .loc 1 862 4 view .LVU500
 1874 0022 1842     	 tst r0,r3
 1875 0024 F9D0     	 beq .L216
 1876              	.L214:
 863:.././hal/sam4s/pmc.c **** }
 1877              	 .loc 1 863 1 view .LVU501
 1878 0026 10BD     	 pop {r4,pc}
 1879              	.L223:
 1880              	 .align 2
 1881              	.L222:
 1882 0028 00040E40 	 .word 1074660352
 1883              	 .cfi_endproc
 1884              	.LFE169:
 1886              	 .section .text.pmc_switch_pck_to_sclk,"ax",%progbits
 1887              	 .align 1
 1888              	 .global pmc_switch_pck_to_sclk
 1889              	 .syntax unified
 1890              	 .thumb
 1891              	 .thumb_func
 1892              	 .fpu softvfp
 1894              	pmc_switch_pck_to_sclk:
 1895              	.LVL108:
 1896              	.LFB170:
 864:.././hal/sam4s/pmc.c **** 
 865:.././hal/sam4s/pmc.c **** /**
 866:.././hal/sam4s/pmc.c ****  * \brief Switch programmable clock source selection to slow clock.
 867:.././hal/sam4s/pmc.c ****  *
 868:.././hal/sam4s/pmc.c ****  * \param ul_id Id of the programmable clock.
 869:.././hal/sam4s/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 870:.././hal/sam4s/pmc.c ****  *
 871:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 872:.././hal/sam4s/pmc.c ****  * \retval 1 Timeout error.
 873:.././hal/sam4s/pmc.c ****  */
 874:.././hal/sam4s/pmc.c **** uint32_t pmc_switch_pck_to_sclk(uint32_t ul_id, uint32_t ul_pres)
 875:.././hal/sam4s/pmc.c **** {
 1897              	 .loc 1 875 1 is_stmt 1 view-0
 1898              	 .cfi_startproc
 1899              	 
 1900              	 
 1901              	 
 876:.././hal/sam4s/pmc.c **** 	uint32_t ul_timeout;
 1902              	 .loc 1 876 2 view .LVU503
 877:.././hal/sam4s/pmc.c **** 
 878:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_SLOW_CLK | ul_pres;
 1903              	 .loc 1 878 2 view .LVU504
 1904              	 .loc 1 878 22 is_stmt 0 view .LVU505
 1905 0000 00F11003 	 add r3,r0,#16
 1906 0004 084A     	 ldr r2,.L230
 1907 0006 42F82310 	 str r1,[r2,r3,lsl#2]
 879:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1908              	 .loc 1 879 2 is_stmt 1 view .LVU506
 1909              	.LVL109:
 880:.././hal/sam4s/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 1910              	 .loc 1 880 34 is_stmt 0 view .LVU507
 1911 000a 4FF48073 	 mov r3,#256
 1912 000e 03FA00F0 	 lsl r0,r3,r0
 1913              	.LVL110:
 879:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1914              	 .loc 1 879 2 view .LVU508
 1915 0012 40F60103 	 movw r3,#2049
 1916              	.LVL111:
 1917              	.L225:
 1918              	 .loc 1 880 2 is_stmt 1 discriminator 1 view .LVU509
 1919              	 .loc 1 880 7 is_stmt 0 discriminator 1 view .LVU510
 1920 0016 916E     	 ldr r1,[r2,#104]
 879:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1921              	 .loc 1 879 2 discriminator 1 view .LVU511
 1922 0018 0142     	 tst r1,r0
 1923 001a 01D0     	 beq .L227
 881:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 882:.././hal/sam4s/pmc.c **** 			return 1;
 883:.././hal/sam4s/pmc.c **** 		}
 884:.././hal/sam4s/pmc.c **** 	}
 885:.././hal/sam4s/pmc.c **** 
 886:.././hal/sam4s/pmc.c **** 	return 0;
 1924              	 .loc 1 886 9 view .LVU512
 1925 001c 0020     	 movs r0,#0
 1926 001e 7047     	 bx lr
 1927              	.L227:
 881:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 1928              	 .loc 1 881 3 is_stmt 1 view .LVU513
 881:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 1929              	 .loc 1 881 6 is_stmt 0 view .LVU514
 1930 0020 013B     	 subs r3,r3,#1
 1931              	.LVL112:
 881:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 1932              	 .loc 1 881 6 view .LVU515
 1933 0022 F8D1     	 bne .L225
 882:.././hal/sam4s/pmc.c **** 		}
 1934              	 .loc 1 882 11 view .LVU516
 1935 0024 0120     	 movs r0,#1
 887:.././hal/sam4s/pmc.c **** }
 1936              	 .loc 1 887 1 view .LVU517
 1937 0026 7047     	 bx lr
 1938              	.L231:
 1939              	 .align 2
 1940              	.L230:
 1941 0028 00040E40 	 .word 1074660352
 1942              	 .cfi_endproc
 1943              	.LFE170:
 1945              	 .section .text.pmc_switch_pck_to_mainck,"ax",%progbits
 1946              	 .align 1
 1947              	 .global pmc_switch_pck_to_mainck
 1948              	 .syntax unified
 1949              	 .thumb
 1950              	 .thumb_func
 1951              	 .fpu softvfp
 1953              	pmc_switch_pck_to_mainck:
 1954              	.LVL113:
 1955              	.LFB171:
 888:.././hal/sam4s/pmc.c **** 
 889:.././hal/sam4s/pmc.c **** /**
 890:.././hal/sam4s/pmc.c ****  * \brief Switch programmable clock source selection to main clock.
 891:.././hal/sam4s/pmc.c ****  *
 892:.././hal/sam4s/pmc.c ****  * \param ul_id Id of the programmable clock.
 893:.././hal/sam4s/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 894:.././hal/sam4s/pmc.c ****  *
 895:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 896:.././hal/sam4s/pmc.c ****  * \retval 1 Timeout error.
 897:.././hal/sam4s/pmc.c ****  */
 898:.././hal/sam4s/pmc.c **** uint32_t pmc_switch_pck_to_mainck(uint32_t ul_id, uint32_t ul_pres)
 899:.././hal/sam4s/pmc.c **** {
 1956              	 .loc 1 899 1 is_stmt 1 view-0
 1957              	 .cfi_startproc
 1958              	 
 1959              	 
 1960              	 
 900:.././hal/sam4s/pmc.c **** 	uint32_t ul_timeout;
 1961              	 .loc 1 900 2 view .LVU519
 901:.././hal/sam4s/pmc.c **** 
 902:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MAIN_CLK | ul_pres;
 1962              	 .loc 1 902 2 view .LVU520
 1963              	 .loc 1 902 22 is_stmt 0 view .LVU521
 1964 0000 00F11003 	 add r3,r0,#16
 1965 0004 094A     	 ldr r2,.L238
 1966              	 .loc 1 902 45 view .LVU522
 1967 0006 41F00101 	 orr r1,r1,#1
 1968              	.LVL114:
 1969              	 .loc 1 902 22 view .LVU523
 1970 000a 42F82310 	 str r1,[r2,r3,lsl#2]
 903:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1971              	 .loc 1 903 2 is_stmt 1 view .LVU524
 1972              	.LVL115:
 904:.././hal/sam4s/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 1973              	 .loc 1 904 34 is_stmt 0 view .LVU525
 1974 000e 4FF48073 	 mov r3,#256
 1975 0012 03FA00F0 	 lsl r0,r3,r0
 1976              	.LVL116:
 903:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1977              	 .loc 1 903 2 view .LVU526
 1978 0016 40F60103 	 movw r3,#2049
 1979              	.LVL117:
 1980              	.L233:
 1981              	 .loc 1 904 2 is_stmt 1 discriminator 1 view .LVU527
 1982              	 .loc 1 904 7 is_stmt 0 discriminator 1 view .LVU528
 1983 001a 916E     	 ldr r1,[r2,#104]
 903:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 1984              	 .loc 1 903 2 discriminator 1 view .LVU529
 1985 001c 0142     	 tst r1,r0
 1986 001e 01D0     	 beq .L235
 905:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 906:.././hal/sam4s/pmc.c **** 			return 1;
 907:.././hal/sam4s/pmc.c **** 		}
 908:.././hal/sam4s/pmc.c **** 	}
 909:.././hal/sam4s/pmc.c **** 
 910:.././hal/sam4s/pmc.c **** 	return 0;
 1987              	 .loc 1 910 9 view .LVU530
 1988 0020 0020     	 movs r0,#0
 1989 0022 7047     	 bx lr
 1990              	.L235:
 905:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 1991              	 .loc 1 905 3 is_stmt 1 view .LVU531
 905:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 1992              	 .loc 1 905 6 is_stmt 0 view .LVU532
 1993 0024 013B     	 subs r3,r3,#1
 1994              	.LVL118:
 905:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 1995              	 .loc 1 905 6 view .LVU533
 1996 0026 F8D1     	 bne .L233
 906:.././hal/sam4s/pmc.c **** 		}
 1997              	 .loc 1 906 11 view .LVU534
 1998 0028 0120     	 movs r0,#1
 911:.././hal/sam4s/pmc.c **** }
 1999              	 .loc 1 911 1 view .LVU535
 2000 002a 7047     	 bx lr
 2001              	.L239:
 2002              	 .align 2
 2003              	.L238:
 2004 002c 00040E40 	 .word 1074660352
 2005              	 .cfi_endproc
 2006              	.LFE171:
 2008              	 .section .text.pmc_switch_pck_to_pllack,"ax",%progbits
 2009              	 .align 1
 2010              	 .global pmc_switch_pck_to_pllack
 2011              	 .syntax unified
 2012              	 .thumb
 2013              	 .thumb_func
 2014              	 .fpu softvfp
 2016              	pmc_switch_pck_to_pllack:
 2017              	.LVL119:
 2018              	.LFB172:
 912:.././hal/sam4s/pmc.c **** 
 913:.././hal/sam4s/pmc.c **** /**
 914:.././hal/sam4s/pmc.c ****  * \brief Switch programmable clock source selection to PLLA clock.
 915:.././hal/sam4s/pmc.c ****  *
 916:.././hal/sam4s/pmc.c ****  * \param ul_id Id of the programmable clock.
 917:.././hal/sam4s/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 918:.././hal/sam4s/pmc.c ****  *
 919:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 920:.././hal/sam4s/pmc.c ****  * \retval 1 Timeout error.
 921:.././hal/sam4s/pmc.c ****  */
 922:.././hal/sam4s/pmc.c **** uint32_t pmc_switch_pck_to_pllack(uint32_t ul_id, uint32_t ul_pres)
 923:.././hal/sam4s/pmc.c **** {
 2019              	 .loc 1 923 1 is_stmt 1 view-0
 2020              	 .cfi_startproc
 2021              	 
 2022              	 
 2023              	 
 924:.././hal/sam4s/pmc.c **** 	uint32_t ul_timeout;
 2024              	 .loc 1 924 2 view .LVU537
 925:.././hal/sam4s/pmc.c **** 
 926:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLA_CLK | ul_pres;
 2025              	 .loc 1 926 2 view .LVU538
 2026              	 .loc 1 926 22 is_stmt 0 view .LVU539
 2027 0000 00F11003 	 add r3,r0,#16
 2028 0004 094A     	 ldr r2,.L246
 2029              	 .loc 1 926 45 view .LVU540
 2030 0006 41F00201 	 orr r1,r1,#2
 2031              	.LVL120:
 2032              	 .loc 1 926 22 view .LVU541
 2033 000a 42F82310 	 str r1,[r2,r3,lsl#2]
 927:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2034              	 .loc 1 927 2 is_stmt 1 view .LVU542
 2035              	.LVL121:
 928:.././hal/sam4s/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2036              	 .loc 1 928 34 is_stmt 0 view .LVU543
 2037 000e 4FF48073 	 mov r3,#256
 2038 0012 03FA00F0 	 lsl r0,r3,r0
 2039              	.LVL122:
 927:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2040              	 .loc 1 927 2 view .LVU544
 2041 0016 40F60103 	 movw r3,#2049
 2042              	.LVL123:
 2043              	.L241:
 2044              	 .loc 1 928 2 is_stmt 1 discriminator 1 view .LVU545
 2045              	 .loc 1 928 7 is_stmt 0 discriminator 1 view .LVU546
 2046 001a 916E     	 ldr r1,[r2,#104]
 927:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2047              	 .loc 1 927 2 discriminator 1 view .LVU547
 2048 001c 0142     	 tst r1,r0
 2049 001e 01D0     	 beq .L243
 929:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 930:.././hal/sam4s/pmc.c **** 			return 1;
 931:.././hal/sam4s/pmc.c **** 		}
 932:.././hal/sam4s/pmc.c **** 	}
 933:.././hal/sam4s/pmc.c **** 
 934:.././hal/sam4s/pmc.c **** 	return 0;
 2050              	 .loc 1 934 9 view .LVU548
 2051 0020 0020     	 movs r0,#0
 2052 0022 7047     	 bx lr
 2053              	.L243:
 929:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 2054              	 .loc 1 929 3 is_stmt 1 view .LVU549
 929:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 2055              	 .loc 1 929 6 is_stmt 0 view .LVU550
 2056 0024 013B     	 subs r3,r3,#1
 2057              	.LVL124:
 929:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 2058              	 .loc 1 929 6 view .LVU551
 2059 0026 F8D1     	 bne .L241
 930:.././hal/sam4s/pmc.c **** 		}
 2060              	 .loc 1 930 11 view .LVU552
 2061 0028 0120     	 movs r0,#1
 935:.././hal/sam4s/pmc.c **** }
 2062              	 .loc 1 935 1 view .LVU553
 2063 002a 7047     	 bx lr
 2064              	.L247:
 2065              	 .align 2
 2066              	.L246:
 2067 002c 00040E40 	 .word 1074660352
 2068              	 .cfi_endproc
 2069              	.LFE172:
 2071              	 .section .text.pmc_switch_pck_to_pllbck,"ax",%progbits
 2072              	 .align 1
 2073              	 .global pmc_switch_pck_to_pllbck
 2074              	 .syntax unified
 2075              	 .thumb
 2076              	 .thumb_func
 2077              	 .fpu softvfp
 2079              	pmc_switch_pck_to_pllbck:
 2080              	.LVL125:
 2081              	.LFB173:
 936:.././hal/sam4s/pmc.c **** 
 937:.././hal/sam4s/pmc.c **** #if (SAM3S || SAM4S || SAM4C || SAM4CM || SAM4CP || SAMG55)
 938:.././hal/sam4s/pmc.c **** /**
 939:.././hal/sam4s/pmc.c ****  * \brief Switch programmable clock source selection to PLLB clock.
 940:.././hal/sam4s/pmc.c ****  *
 941:.././hal/sam4s/pmc.c ****  * \param ul_id Id of the programmable clock.
 942:.././hal/sam4s/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 943:.././hal/sam4s/pmc.c ****  *
 944:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 945:.././hal/sam4s/pmc.c ****  * \retval 1 Timeout error.
 946:.././hal/sam4s/pmc.c ****  */
 947:.././hal/sam4s/pmc.c **** uint32_t pmc_switch_pck_to_pllbck(uint32_t ul_id, uint32_t ul_pres)
 948:.././hal/sam4s/pmc.c **** {
 2082              	 .loc 1 948 1 is_stmt 1 view-0
 2083              	 .cfi_startproc
 2084              	 
 2085              	 
 2086              	 
 949:.././hal/sam4s/pmc.c **** 	uint32_t ul_timeout;
 2087              	 .loc 1 949 2 view .LVU555
 950:.././hal/sam4s/pmc.c **** 
 951:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_PLLB_CLK | ul_pres;
 2088              	 .loc 1 951 2 view .LVU556
 2089              	 .loc 1 951 22 is_stmt 0 view .LVU557
 2090 0000 00F11003 	 add r3,r0,#16
 2091 0004 094A     	 ldr r2,.L254
 2092              	 .loc 1 951 45 view .LVU558
 2093 0006 41F00301 	 orr r1,r1,#3
 2094              	.LVL126:
 2095              	 .loc 1 951 22 view .LVU559
 2096 000a 42F82310 	 str r1,[r2,r3,lsl#2]
 952:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2097              	 .loc 1 952 2 is_stmt 1 view .LVU560
 2098              	.LVL127:
 953:.././hal/sam4s/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 2099              	 .loc 1 953 36 is_stmt 0 view .LVU561
 2100 000e 4FF48073 	 mov r3,#256
 2101 0012 03FA00F0 	 lsl r0,r3,r0
 2102              	.LVL128:
 952:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2103              	 .loc 1 952 2 view .LVU562
 2104 0016 40F60103 	 movw r3,#2049
 2105              	.LVL129:
 2106              	.L249:
 2107              	 .loc 1 953 4 is_stmt 1 discriminator 1 view .LVU563
 2108              	 .loc 1 953 9 is_stmt 0 discriminator 1 view .LVU564
 2109 001a 916E     	 ldr r1,[r2,#104]
 952:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2110              	 .loc 1 952 2 discriminator 1 view .LVU565
 2111 001c 0142     	 tst r1,r0
 2112 001e 01D0     	 beq .L251
 954:.././hal/sam4s/pmc.c **** 			--ul_timeout) {
 955:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 956:.././hal/sam4s/pmc.c **** 			return 1;
 957:.././hal/sam4s/pmc.c **** 		}
 958:.././hal/sam4s/pmc.c **** 	}
 959:.././hal/sam4s/pmc.c **** 
 960:.././hal/sam4s/pmc.c **** 	return 0;
 2113              	 .loc 1 960 9 view .LVU566
 2114 0020 0020     	 movs r0,#0
 2115 0022 7047     	 bx lr
 2116              	.L251:
 955:.././hal/sam4s/pmc.c **** 			return 1;
 2117              	 .loc 1 955 3 is_stmt 1 view .LVU567
 955:.././hal/sam4s/pmc.c **** 			return 1;
 2118              	 .loc 1 955 6 is_stmt 0 view .LVU568
 2119 0024 013B     	 subs r3,r3,#1
 2120              	.LVL130:
 955:.././hal/sam4s/pmc.c **** 			return 1;
 2121              	 .loc 1 955 6 view .LVU569
 2122 0026 F8D1     	 bne .L249
 956:.././hal/sam4s/pmc.c **** 		}
 2123              	 .loc 1 956 11 view .LVU570
 2124 0028 0120     	 movs r0,#1
 961:.././hal/sam4s/pmc.c **** }
 2125              	 .loc 1 961 1 view .LVU571
 2126 002a 7047     	 bx lr
 2127              	.L255:
 2128              	 .align 2
 2129              	.L254:
 2130 002c 00040E40 	 .word 1074660352
 2131              	 .cfi_endproc
 2132              	.LFE173:
 2134              	 .section .text.pmc_switch_pck_to_mck,"ax",%progbits
 2135              	 .align 1
 2136              	 .global pmc_switch_pck_to_mck
 2137              	 .syntax unified
 2138              	 .thumb
 2139              	 .thumb_func
 2140              	 .fpu softvfp
 2142              	pmc_switch_pck_to_mck:
 2143              	.LVL131:
 2144              	.LFB174:
 962:.././hal/sam4s/pmc.c **** #endif
 963:.././hal/sam4s/pmc.c **** 
 964:.././hal/sam4s/pmc.c **** #if (SAM3XA || SAM3U || SAMV71 || SAMV70 || SAME70 || SAMS70)
 965:.././hal/sam4s/pmc.c **** /**
 966:.././hal/sam4s/pmc.c ****  * \brief Switch programmable clock source selection to UPLL clock.
 967:.././hal/sam4s/pmc.c ****  *
 968:.././hal/sam4s/pmc.c ****  * \param ul_id Id of the programmable clock.
 969:.././hal/sam4s/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 970:.././hal/sam4s/pmc.c ****  *
 971:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 972:.././hal/sam4s/pmc.c ****  * \retval 1 Timeout error.
 973:.././hal/sam4s/pmc.c ****  */
 974:.././hal/sam4s/pmc.c **** uint32_t pmc_switch_pck_to_upllck(uint32_t ul_id, uint32_t ul_pres)
 975:.././hal/sam4s/pmc.c **** {
 976:.././hal/sam4s/pmc.c **** 	uint32_t ul_timeout;
 977:.././hal/sam4s/pmc.c **** 
 978:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_UPLL_CLK | ul_pres;
 979:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 980:.././hal/sam4s/pmc.c **** 			!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id));
 981:.././hal/sam4s/pmc.c **** 			--ul_timeout) {
 982:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 983:.././hal/sam4s/pmc.c **** 			return 1;
 984:.././hal/sam4s/pmc.c **** 		}
 985:.././hal/sam4s/pmc.c **** 	}
 986:.././hal/sam4s/pmc.c **** 
 987:.././hal/sam4s/pmc.c **** 	return 0;
 988:.././hal/sam4s/pmc.c **** }
 989:.././hal/sam4s/pmc.c **** #endif
 990:.././hal/sam4s/pmc.c **** 
 991:.././hal/sam4s/pmc.c **** /**
 992:.././hal/sam4s/pmc.c ****  * \brief Switch programmable clock source selection to mck.
 993:.././hal/sam4s/pmc.c ****  *
 994:.././hal/sam4s/pmc.c ****  * \param ul_id Id of the programmable clock.
 995:.././hal/sam4s/pmc.c ****  * \param ul_pres Programmable clock prescaler.
 996:.././hal/sam4s/pmc.c ****  *
 997:.././hal/sam4s/pmc.c ****  * \retval 0 Success.
 998:.././hal/sam4s/pmc.c ****  * \retval 1 Timeout error.
 999:.././hal/sam4s/pmc.c ****  */
1000:.././hal/sam4s/pmc.c **** uint32_t pmc_switch_pck_to_mck(uint32_t ul_id, uint32_t ul_pres)
1001:.././hal/sam4s/pmc.c **** {
 2145              	 .loc 1 1001 1 is_stmt 1 view-0
 2146              	 .cfi_startproc
 2147              	 
 2148              	 
 2149              	 
1002:.././hal/sam4s/pmc.c **** 	uint32_t ul_timeout;
 2150              	 .loc 1 1002 2 view .LVU573
1003:.././hal/sam4s/pmc.c **** 
1004:.././hal/sam4s/pmc.c **** 	PMC->PMC_PCK[ul_id] = PMC_PCK_CSS_MCK | ul_pres;
 2151              	 .loc 1 1004 2 view .LVU574
 2152              	 .loc 1 1004 22 is_stmt 0 view .LVU575
 2153 0000 00F11003 	 add r3,r0,#16
 2154 0004 094A     	 ldr r2,.L262
 2155              	 .loc 1 1004 40 view .LVU576
 2156 0006 41F00401 	 orr r1,r1,#4
 2157              	.LVL132:
 2158              	 .loc 1 1004 22 view .LVU577
 2159 000a 42F82310 	 str r1,[r2,r3,lsl#2]
1005:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2160              	 .loc 1 1005 2 is_stmt 1 view .LVU578
 2161              	.LVL133:
1006:.././hal/sam4s/pmc.c **** 	!(PMC->PMC_SR & (PMC_SR_PCKRDY0 << ul_id)); --ul_timeout) {
 2162              	 .loc 1 1006 34 is_stmt 0 view .LVU579
 2163 000e 4FF48073 	 mov r3,#256
 2164 0012 03FA00F0 	 lsl r0,r3,r0
 2165              	.LVL134:
1005:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2166              	 .loc 1 1005 2 view .LVU580
 2167 0016 40F60103 	 movw r3,#2049
 2168              	.LVL135:
 2169              	.L257:
 2170              	 .loc 1 1006 2 is_stmt 1 discriminator 1 view .LVU581
 2171              	 .loc 1 1006 7 is_stmt 0 discriminator 1 view .LVU582
 2172 001a 916E     	 ldr r1,[r2,#104]
1005:.././hal/sam4s/pmc.c **** 	for (ul_timeout = PMC_TIMEOUT;
 2173              	 .loc 1 1005 2 discriminator 1 view .LVU583
 2174 001c 0142     	 tst r1,r0
 2175 001e 01D0     	 beq .L259
1007:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
1008:.././hal/sam4s/pmc.c **** 			return 1;
1009:.././hal/sam4s/pmc.c **** 		}
1010:.././hal/sam4s/pmc.c **** 	}
1011:.././hal/sam4s/pmc.c **** 
1012:.././hal/sam4s/pmc.c **** 	return 0;
 2176              	 .loc 1 1012 9 view .LVU584
 2177 0020 0020     	 movs r0,#0
 2178 0022 7047     	 bx lr
 2179              	.L259:
1007:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 2180              	 .loc 1 1007 3 is_stmt 1 view .LVU585
1007:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 2181              	 .loc 1 1007 6 is_stmt 0 view .LVU586
 2182 0024 013B     	 subs r3,r3,#1
 2183              	.LVL136:
1007:.././hal/sam4s/pmc.c **** 		if (ul_timeout == 0) {
 2184              	 .loc 1 1007 6 view .LVU587
 2185 0026 F8D1     	 bne .L257
1008:.././hal/sam4s/pmc.c **** 		}
 2186              	 .loc 1 1008 11 view .LVU588
 2187 0028 0120     	 movs r0,#1
1013:.././hal/sam4s/pmc.c **** }
 2188              	 .loc 1 1013 1 view .LVU589
 2189 002a 7047     	 bx lr
 2190              	.L263:
 2191              	 .align 2
 2192              	.L262:
 2193 002c 00040E40 	 .word 1074660352
 2194              	 .cfi_endproc
 2195              	.LFE174:
 2197              	 .section .text.pmc_enable_pck,"ax",%progbits
 2198              	 .align 1
 2199              	 .global pmc_enable_pck
 2200              	 .syntax unified
 2201              	 .thumb
 2202              	 .thumb_func
 2203              	 .fpu softvfp
 2205              	pmc_enable_pck:
 2206              	.LVL137:
 2207              	.LFB175:
1014:.././hal/sam4s/pmc.c **** 
1015:.././hal/sam4s/pmc.c **** /**
1016:.././hal/sam4s/pmc.c ****  * \brief Enable the specified programmable clock.
1017:.././hal/sam4s/pmc.c ****  *
1018:.././hal/sam4s/pmc.c ****  * \param ul_id Id of the programmable clock.
1019:.././hal/sam4s/pmc.c ****  */
1020:.././hal/sam4s/pmc.c **** void pmc_enable_pck(uint32_t ul_id)
1021:.././hal/sam4s/pmc.c **** {
 2208              	 .loc 1 1021 1 is_stmt 1 view-0
 2209              	 .cfi_startproc
 2210              	 
 2211              	 
 2212              	 
1022:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_PCK0 << ul_id;
 2213              	 .loc 1 1022 2 view .LVU591
 2214              	 .loc 1 1022 16 is_stmt 0 view .LVU592
 2215 0000 024A     	 ldr r2,.L265
 2216              	 .loc 1 1022 32 view .LVU593
 2217 0002 4FF48073 	 mov r3,#256
 2218 0006 8340     	 lsls r3,r3,r0
 2219              	 .loc 1 1022 16 view .LVU594
 2220 0008 1360     	 str r3,[r2]
1023:.././hal/sam4s/pmc.c **** }
 2221              	 .loc 1 1023 1 view .LVU595
 2222 000a 7047     	 bx lr
 2223              	.L266:
 2224              	 .align 2
 2225              	.L265:
 2226 000c 00040E40 	 .word 1074660352
 2227              	 .cfi_endproc
 2228              	.LFE175:
 2230              	 .section .text.pmc_disable_pck,"ax",%progbits
 2231              	 .align 1
 2232              	 .global pmc_disable_pck
 2233              	 .syntax unified
 2234              	 .thumb
 2235              	 .thumb_func
 2236              	 .fpu softvfp
 2238              	pmc_disable_pck:
 2239              	.LVL138:
 2240              	.LFB176:
1024:.././hal/sam4s/pmc.c **** 
1025:.././hal/sam4s/pmc.c **** /**
1026:.././hal/sam4s/pmc.c ****  * \brief Disable the specified programmable clock.
1027:.././hal/sam4s/pmc.c ****  *
1028:.././hal/sam4s/pmc.c ****  * \param ul_id Id of the programmable clock.
1029:.././hal/sam4s/pmc.c ****  */
1030:.././hal/sam4s/pmc.c **** void pmc_disable_pck(uint32_t ul_id)
1031:.././hal/sam4s/pmc.c **** {
 2241              	 .loc 1 1031 1 is_stmt 1 view-0
 2242              	 .cfi_startproc
 2243              	 
 2244              	 
 2245              	 
1032:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCDR = PMC_SCER_PCK0 << ul_id;
 2246              	 .loc 1 1032 2 view .LVU597
 2247              	 .loc 1 1032 16 is_stmt 0 view .LVU598
 2248 0000 024A     	 ldr r2,.L268
 2249              	 .loc 1 1032 32 view .LVU599
 2250 0002 4FF48073 	 mov r3,#256
 2251 0006 8340     	 lsls r3,r3,r0
 2252              	 .loc 1 1032 16 view .LVU600
 2253 0008 5360     	 str r3,[r2,#4]
1033:.././hal/sam4s/pmc.c **** }
 2254              	 .loc 1 1033 1 view .LVU601
 2255 000a 7047     	 bx lr
 2256              	.L269:
 2257              	 .align 2
 2258              	.L268:
 2259 000c 00040E40 	 .word 1074660352
 2260              	 .cfi_endproc
 2261              	.LFE176:
 2263              	 .section .text.pmc_enable_all_pck,"ax",%progbits
 2264              	 .align 1
 2265              	 .global pmc_enable_all_pck
 2266              	 .syntax unified
 2267              	 .thumb
 2268              	 .thumb_func
 2269              	 .fpu softvfp
 2271              	pmc_enable_all_pck:
 2272              	.LFB177:
1034:.././hal/sam4s/pmc.c **** 
1035:.././hal/sam4s/pmc.c **** /**
1036:.././hal/sam4s/pmc.c ****  * \brief Enable all programmable clocks.
1037:.././hal/sam4s/pmc.c ****  */
1038:.././hal/sam4s/pmc.c **** void pmc_enable_all_pck(void)
1039:.././hal/sam4s/pmc.c **** {
 2273              	 .loc 1 1039 1 is_stmt 1 view-0
 2274              	 .cfi_startproc
 2275              	 
 2276              	 
 2277              	 
1040:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_PCK0 | PMC_SCER_PCK1 | PMC_SCER_PCK2;
 2278              	 .loc 1 1040 2 view .LVU603
 2279              	 .loc 1 1040 16 is_stmt 0 view .LVU604
 2280 0000 024B     	 ldr r3,.L271
 2281 0002 4FF4E062 	 mov r2,#1792
 2282 0006 1A60     	 str r2,[r3]
1041:.././hal/sam4s/pmc.c **** }
 2283              	 .loc 1 1041 1 view .LVU605
 2284 0008 7047     	 bx lr
 2285              	.L272:
 2286 000a 00BF     	 .align 2
 2287              	.L271:
 2288 000c 00040E40 	 .word 1074660352
 2289              	 .cfi_endproc
 2290              	.LFE177:
 2292              	 .section .text.pmc_disable_all_pck,"ax",%progbits
 2293              	 .align 1
 2294              	 .global pmc_disable_all_pck
 2295              	 .syntax unified
 2296              	 .thumb
 2297              	 .thumb_func
 2298              	 .fpu softvfp
 2300              	pmc_disable_all_pck:
 2301              	.LFB178:
1042:.././hal/sam4s/pmc.c **** 
1043:.././hal/sam4s/pmc.c **** /**
1044:.././hal/sam4s/pmc.c ****  * \brief Disable all programmable clocks.
1045:.././hal/sam4s/pmc.c ****  */
1046:.././hal/sam4s/pmc.c **** void pmc_disable_all_pck(void)
1047:.././hal/sam4s/pmc.c **** {
 2302              	 .loc 1 1047 1 is_stmt 1 view-0
 2303              	 .cfi_startproc
 2304              	 
 2305              	 
 2306              	 
1048:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_PCK0 | PMC_SCDR_PCK1 | PMC_SCDR_PCK2;
 2307              	 .loc 1 1048 2 view .LVU607
 2308              	 .loc 1 1048 16 is_stmt 0 view .LVU608
 2309 0000 024B     	 ldr r3,.L274
 2310 0002 4FF4E062 	 mov r2,#1792
 2311 0006 5A60     	 str r2,[r3,#4]
1049:.././hal/sam4s/pmc.c **** }
 2312              	 .loc 1 1049 1 view .LVU609
 2313 0008 7047     	 bx lr
 2314              	.L275:
 2315 000a 00BF     	 .align 2
 2316              	.L274:
 2317 000c 00040E40 	 .word 1074660352
 2318              	 .cfi_endproc
 2319              	.LFE178:
 2321              	 .section .text.pmc_is_pck_enabled,"ax",%progbits
 2322              	 .align 1
 2323              	 .global pmc_is_pck_enabled
 2324              	 .syntax unified
 2325              	 .thumb
 2326              	 .thumb_func
 2327              	 .fpu softvfp
 2329              	pmc_is_pck_enabled:
 2330              	.LVL139:
 2331              	.LFB179:
1050:.././hal/sam4s/pmc.c **** 
1051:.././hal/sam4s/pmc.c **** /**
1052:.././hal/sam4s/pmc.c ****  * \brief Check if the specified programmable clock is enabled.
1053:.././hal/sam4s/pmc.c ****  *
1054:.././hal/sam4s/pmc.c ****  * \param ul_id Id of the programmable clock.
1055:.././hal/sam4s/pmc.c ****  *
1056:.././hal/sam4s/pmc.c ****  * \retval 0 Programmable clock is disabled or unknown.
1057:.././hal/sam4s/pmc.c ****  * \retval 1 Programmable clock is enabled.
1058:.././hal/sam4s/pmc.c ****  */
1059:.././hal/sam4s/pmc.c **** uint32_t pmc_is_pck_enabled(uint32_t ul_id)
1060:.././hal/sam4s/pmc.c **** {
 2332              	 .loc 1 1060 1 is_stmt 1 view-0
 2333              	 .cfi_startproc
 2334              	 
 2335              	 
 2336              	 
1061:.././hal/sam4s/pmc.c **** 	if (ul_id > 2) {
 2337              	 .loc 1 1061 2 view .LVU611
 2338              	 .loc 1 1061 5 is_stmt 0 view .LVU612
 2339 0000 0228     	 cmp r0,#2
1062:.././hal/sam4s/pmc.c **** 		return 0;
1063:.././hal/sam4s/pmc.c **** 	}
1064:.././hal/sam4s/pmc.c **** 
1065:.././hal/sam4s/pmc.c **** 	return (PMC->PMC_SCSR & (PMC_SCSR_PCK0 << ul_id));
 2340              	 .loc 1 1065 2 is_stmt 1 view .LVU613
 2341              	 .loc 1 1065 13 is_stmt 0 view .LVU614
 2342 0002 9FBF     	 itttt ls
 2343 0004 044B     	 ldrls r3,.L279
 2344 0006 9A68     	 ldrls r2,[r3,#8]
 2345              	 .loc 1 1065 41 view .LVU615
 2346 0008 4FF48073 	 movls r3,#256
 2347 000c 03FA00F0 	 lslls r0,r3,r0
 2348              	.LVL140:
 2349              	 .loc 1 1065 24 view .LVU616
 2350 0010 94BF     	 ite ls
 2351 0012 1040     	 andls r0,r0,r2
1062:.././hal/sam4s/pmc.c **** 		return 0;
 2352              	 .loc 1 1062 10 view .LVU617
 2353 0014 0020     	 movhi r0,#0
1066:.././hal/sam4s/pmc.c **** }
 2354              	 .loc 1 1066 1 view .LVU618
 2355 0016 7047     	 bx lr
 2356              	.L280:
 2357              	 .align 2
 2358              	.L279:
 2359 0018 00040E40 	 .word 1074660352
 2360              	 .cfi_endproc
 2361              	.LFE179:
 2363              	 .section .text.pmc_switch_udpck_to_pllack,"ax",%progbits
 2364              	 .align 1
 2365              	 .global pmc_switch_udpck_to_pllack
 2366              	 .syntax unified
 2367              	 .thumb
 2368              	 .thumb_func
 2369              	 .fpu softvfp
 2371              	pmc_switch_udpck_to_pllack:
 2372              	.LVL141:
 2373              	.LFB180:
1067:.././hal/sam4s/pmc.c **** 
1068:.././hal/sam4s/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1069:.././hal/sam4s/pmc.c **** /**
1070:.././hal/sam4s/pmc.c ****  * \brief Enable Coprocessor Clocks.
1071:.././hal/sam4s/pmc.c ****  */
1072:.././hal/sam4s/pmc.c **** void pmc_enable_cpck(void)
1073:.././hal/sam4s/pmc.c **** {
1074:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_CPCK | PMC_SCER_CPKEY_PASSWD;
1075:.././hal/sam4s/pmc.c **** }
1076:.././hal/sam4s/pmc.c **** 
1077:.././hal/sam4s/pmc.c **** /**
1078:.././hal/sam4s/pmc.c ****  * \brief Disable Coprocessor Clocks.
1079:.././hal/sam4s/pmc.c ****  */
1080:.././hal/sam4s/pmc.c **** void pmc_disable_cpck(void)
1081:.././hal/sam4s/pmc.c **** {
1082:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_CPCK | PMC_SCDR_CPKEY_PASSWD;
1083:.././hal/sam4s/pmc.c **** }
1084:.././hal/sam4s/pmc.c **** 
1085:.././hal/sam4s/pmc.c **** /**
1086:.././hal/sam4s/pmc.c ****  * \brief Check if the Coprocessor Clocks is enabled.
1087:.././hal/sam4s/pmc.c ****  *
1088:.././hal/sam4s/pmc.c ****  * \retval 0 Coprocessor Clocks is disabled.
1089:.././hal/sam4s/pmc.c ****  * \retval 1 Coprocessor Clocks is enabled.
1090:.././hal/sam4s/pmc.c ****  */
1091:.././hal/sam4s/pmc.c **** bool pmc_is_cpck_enabled(void)
1092:.././hal/sam4s/pmc.c **** {
1093:.././hal/sam4s/pmc.c **** 	if(PMC->PMC_SCSR & PMC_SCSR_CPCK) {
1094:.././hal/sam4s/pmc.c **** 		return 1;
1095:.././hal/sam4s/pmc.c **** 	} else {
1096:.././hal/sam4s/pmc.c **** 		return 0;
1097:.././hal/sam4s/pmc.c **** 	}
1098:.././hal/sam4s/pmc.c **** }
1099:.././hal/sam4s/pmc.c **** 
1100:.././hal/sam4s/pmc.c **** /**
1101:.././hal/sam4s/pmc.c ****  * \brief Enable Coprocessor Bus Master Clocks.
1102:.././hal/sam4s/pmc.c ****  */
1103:.././hal/sam4s/pmc.c **** void pmc_enable_cpbmck(void)
1104:.././hal/sam4s/pmc.c **** {
1105:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_CPBMCK | PMC_SCER_CPKEY_PASSWD;
1106:.././hal/sam4s/pmc.c **** }
1107:.././hal/sam4s/pmc.c **** 
1108:.././hal/sam4s/pmc.c **** /**
1109:.././hal/sam4s/pmc.c ****  * \brief Disable Coprocessor Bus Master Clocks.
1110:.././hal/sam4s/pmc.c ****  */
1111:.././hal/sam4s/pmc.c **** void pmc_disable_cpbmck(void)
1112:.././hal/sam4s/pmc.c **** {
1113:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_CPBMCK | PMC_SCDR_CPKEY_PASSWD;
1114:.././hal/sam4s/pmc.c **** }
1115:.././hal/sam4s/pmc.c **** 
1116:.././hal/sam4s/pmc.c **** /**
1117:.././hal/sam4s/pmc.c ****  * \brief Check if the Coprocessor Bus Master Clocks is enabled.
1118:.././hal/sam4s/pmc.c ****  *
1119:.././hal/sam4s/pmc.c ****  * \retval 0 Coprocessor Bus Master Clocks is disabled.
1120:.././hal/sam4s/pmc.c ****  * \retval 1 Coprocessor Bus Master Clocks is enabled.
1121:.././hal/sam4s/pmc.c ****  */
1122:.././hal/sam4s/pmc.c **** bool pmc_is_cpbmck_enabled(void)
1123:.././hal/sam4s/pmc.c **** {
1124:.././hal/sam4s/pmc.c **** 	if(PMC->PMC_SCSR & PMC_SCSR_CPBMCK) {
1125:.././hal/sam4s/pmc.c **** 		return 1;
1126:.././hal/sam4s/pmc.c **** 	} else {
1127:.././hal/sam4s/pmc.c **** 		return 0;
1128:.././hal/sam4s/pmc.c **** 	}
1129:.././hal/sam4s/pmc.c **** }
1130:.././hal/sam4s/pmc.c **** 
1131:.././hal/sam4s/pmc.c **** /**
1132:.././hal/sam4s/pmc.c ****  * \brief Set the prescaler for the Coprocessor Master Clock.
1133:.././hal/sam4s/pmc.c ****  *
1134:.././hal/sam4s/pmc.c ****  * \param ul_pres Prescaler value.
1135:.././hal/sam4s/pmc.c ****  */
1136:.././hal/sam4s/pmc.c **** void pmc_cpck_set_prescaler(uint32_t ul_pres)
1137:.././hal/sam4s/pmc.c **** {
1138:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR =
1139:.././hal/sam4s/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CPPRES_Msk)) | PMC_MCKR_CPPRES(ul_pres);
1140:.././hal/sam4s/pmc.c **** }
1141:.././hal/sam4s/pmc.c **** 
1142:.././hal/sam4s/pmc.c **** /**
1143:.././hal/sam4s/pmc.c ****  * \brief Set the source for the Coprocessor Master Clock.
1144:.././hal/sam4s/pmc.c ****  *
1145:.././hal/sam4s/pmc.c ****  * \param ul_source Source selection value.
1146:.././hal/sam4s/pmc.c ****  */
1147:.././hal/sam4s/pmc.c **** void pmc_cpck_set_source(uint32_t ul_source)
1148:.././hal/sam4s/pmc.c **** {
1149:.././hal/sam4s/pmc.c **** 	PMC->PMC_MCKR =
1150:.././hal/sam4s/pmc.c **** 			(PMC->PMC_MCKR & (~PMC_MCKR_CPCSS_Msk)) | ul_source;
1151:.././hal/sam4s/pmc.c **** }
1152:.././hal/sam4s/pmc.c **** #endif
1153:.././hal/sam4s/pmc.c **** 
1154:.././hal/sam4s/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
1155:.././hal/sam4s/pmc.c **** /**
1156:.././hal/sam4s/pmc.c ****  * \brief Switch UDP (USB) clock source selection to PLLA clock.
1157:.././hal/sam4s/pmc.c ****  *
1158:.././hal/sam4s/pmc.c ****  * \param ul_usbdiv Clock divisor.
1159:.././hal/sam4s/pmc.c ****  */
1160:.././hal/sam4s/pmc.c **** void pmc_switch_udpck_to_pllack(uint32_t ul_usbdiv)
1161:.././hal/sam4s/pmc.c **** {
 2374              	 .loc 1 1161 1 is_stmt 1 view-0
 2375              	 .cfi_startproc
 2376              	 
 2377              	 
 2378              	 
1162:.././hal/sam4s/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv);
 2379              	 .loc 1 1162 2 view .LVU620
 2380              	 .loc 1 1162 15 is_stmt 0 view .LVU621
 2381 0000 024B     	 ldr r3,.L282
 2382              	 .loc 1 1162 17 view .LVU622
 2383 0002 0002     	 lsls r0,r0,#8
 2384              	.LVL142:
 2385              	 .loc 1 1162 17 view .LVU623
 2386 0004 00F47060 	 and r0,r0,#3840
 2387              	 .loc 1 1162 15 view .LVU624
 2388 0008 9863     	 str r0,[r3,#56]
1163:.././hal/sam4s/pmc.c **** }
 2389              	 .loc 1 1163 1 view .LVU625
 2390 000a 7047     	 bx lr
 2391              	.L283:
 2392              	 .align 2
 2393              	.L282:
 2394 000c 00040E40 	 .word 1074660352
 2395              	 .cfi_endproc
 2396              	.LFE180:
 2398              	 .section .text.pmc_switch_udpck_to_pllbck,"ax",%progbits
 2399              	 .align 1
 2400              	 .global pmc_switch_udpck_to_pllbck
 2401              	 .syntax unified
 2402              	 .thumb
 2403              	 .thumb_func
 2404              	 .fpu softvfp
 2406              	pmc_switch_udpck_to_pllbck:
 2407              	.LVL143:
 2408              	.LFB181:
1164:.././hal/sam4s/pmc.c **** #endif
1165:.././hal/sam4s/pmc.c **** 
1166:.././hal/sam4s/pmc.c **** #if (SAM3S || SAM4S || SAMG55)
1167:.././hal/sam4s/pmc.c **** /**
1168:.././hal/sam4s/pmc.c ****  * \brief Switch UDP (USB) clock source selection to PLLB clock.
1169:.././hal/sam4s/pmc.c ****  *
1170:.././hal/sam4s/pmc.c ****  * \param ul_usbdiv Clock divisor.
1171:.././hal/sam4s/pmc.c ****  */
1172:.././hal/sam4s/pmc.c **** void pmc_switch_udpck_to_pllbck(uint32_t ul_usbdiv)
1173:.././hal/sam4s/pmc.c **** {
 2409              	 .loc 1 1173 1 is_stmt 1 view-0
 2410              	 .cfi_startproc
 2411              	 
 2412              	 
 2413              	 
1174:.././hal/sam4s/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
 2414              	 .loc 1 1174 2 view .LVU627
 2415              	 .loc 1 1174 17 is_stmt 0 view .LVU628
 2416 0000 0002     	 lsls r0,r0,#8
 2417              	.LVL144:
 2418              	 .loc 1 1174 15 view .LVU629
 2419 0002 034B     	 ldr r3,.L285
 2420              	 .loc 1 1174 17 view .LVU630
 2421 0004 00F47060 	 and r0,r0,#3840
 2422              	 .loc 1 1174 43 view .LVU631
 2423 0008 40F00100 	 orr r0,r0,#1
 2424              	 .loc 1 1174 15 view .LVU632
 2425 000c 9863     	 str r0,[r3,#56]
1175:.././hal/sam4s/pmc.c **** }
 2426              	 .loc 1 1175 1 view .LVU633
 2427 000e 7047     	 bx lr
 2428              	.L286:
 2429              	 .align 2
 2430              	.L285:
 2431 0010 00040E40 	 .word 1074660352
 2432              	 .cfi_endproc
 2433              	.LFE181:
 2435              	 .section .text.pmc_enable_udpck,"ax",%progbits
 2436              	 .align 1
 2437              	 .global pmc_enable_udpck
 2438              	 .syntax unified
 2439              	 .thumb
 2440              	 .thumb_func
 2441              	 .fpu softvfp
 2443              	pmc_enable_udpck:
 2444              	.LFB182:
1176:.././hal/sam4s/pmc.c **** #endif
1177:.././hal/sam4s/pmc.c **** 
1178:.././hal/sam4s/pmc.c **** #if (SAM3XA || SAMV71 || SAMV70 || SAME70 || SAMS70)
1179:.././hal/sam4s/pmc.c **** /**
1180:.././hal/sam4s/pmc.c ****  * \brief Switch UDP (USB) clock source selection to UPLL clock.
1181:.././hal/sam4s/pmc.c ****  *
1182:.././hal/sam4s/pmc.c ****  * \param ul_usbdiv Clock divisor.
1183:.././hal/sam4s/pmc.c ****  */
1184:.././hal/sam4s/pmc.c **** void pmc_switch_udpck_to_upllck(uint32_t ul_usbdiv)
1185:.././hal/sam4s/pmc.c **** {
1186:.././hal/sam4s/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBS | PMC_USB_USBDIV(ul_usbdiv);
1187:.././hal/sam4s/pmc.c **** }
1188:.././hal/sam4s/pmc.c **** #endif
1189:.././hal/sam4s/pmc.c **** 
1190:.././hal/sam4s/pmc.c **** #if (SAM3S || SAM3XA || SAM4S || SAM4E || SAMG55 || SAMV71 || SAMV70 || SAME70 || SAMS70)
1191:.././hal/sam4s/pmc.c **** /**
1192:.././hal/sam4s/pmc.c ****  * \brief Enable UDP (USB) clock.
1193:.././hal/sam4s/pmc.c ****  */
1194:.././hal/sam4s/pmc.c **** void pmc_enable_udpck(void)
1195:.././hal/sam4s/pmc.c **** {
 2445              	 .loc 1 1195 1 is_stmt 1 view-0
 2446              	 .cfi_startproc
 2447              	 
 2448              	 
 2449              	 
1196:.././hal/sam4s/pmc.c **** #if (SAM3S || SAM4S || SAM4E || SAMG55)
1197:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_UDP;
 2450              	 .loc 1 1197 2 view .LVU635
 2451              	 .loc 1 1197 16 is_stmt 0 view .LVU636
 2452 0000 014B     	 ldr r3,.L288
 2453 0002 8022     	 movs r2,#128
 2454 0004 1A60     	 str r2,[r3]
1198:.././hal/sam4s/pmc.c **** #elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
1199:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_USBCLK;
1200:.././hal/sam4s/pmc.c **** #else
1201:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_UOTGCLK;
1202:.././hal/sam4s/pmc.c **** # endif
1203:.././hal/sam4s/pmc.c **** }
 2455              	 .loc 1 1203 1 view .LVU637
 2456 0006 7047     	 bx lr
 2457              	.L289:
 2458              	 .align 2
 2459              	.L288:
 2460 0008 00040E40 	 .word 1074660352
 2461              	 .cfi_endproc
 2462              	.LFE182:
 2464              	 .section .text.pmc_disable_udpck,"ax",%progbits
 2465              	 .align 1
 2466              	 .global pmc_disable_udpck
 2467              	 .syntax unified
 2468              	 .thumb
 2469              	 .thumb_func
 2470              	 .fpu softvfp
 2472              	pmc_disable_udpck:
 2473              	.LFB183:
1204:.././hal/sam4s/pmc.c **** 
1205:.././hal/sam4s/pmc.c **** /**
1206:.././hal/sam4s/pmc.c ****  * \brief Disable UDP (USB) clock.
1207:.././hal/sam4s/pmc.c ****  */
1208:.././hal/sam4s/pmc.c **** void pmc_disable_udpck(void)
1209:.././hal/sam4s/pmc.c **** {
 2474              	 .loc 1 1209 1 is_stmt 1 view-0
 2475              	 .cfi_startproc
 2476              	 
 2477              	 
 2478              	 
1210:.././hal/sam4s/pmc.c **** #if (SAM3S || SAM4S || SAM4E || SAMG55)
1211:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_UDP;
 2479              	 .loc 1 1211 2 view .LVU639
 2480              	 .loc 1 1211 16 is_stmt 0 view .LVU640
 2481 0000 014B     	 ldr r3,.L291
 2482 0002 8022     	 movs r2,#128
 2483 0004 5A60     	 str r2,[r3,#4]
1212:.././hal/sam4s/pmc.c **** #elif (SAMV71 || SAMV70 || SAME70 || SAMS70)
1213:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_USBCLK;
1214:.././hal/sam4s/pmc.c **** #else
1215:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCDR = PMC_SCDR_UOTGCLK;
1216:.././hal/sam4s/pmc.c **** # endif
1217:.././hal/sam4s/pmc.c **** }
 2484              	 .loc 1 1217 1 view .LVU641
 2485 0006 7047     	 bx lr
 2486              	.L292:
 2487              	 .align 2
 2488              	.L291:
 2489 0008 00040E40 	 .word 1074660352
 2490              	 .cfi_endproc
 2491              	.LFE183:
 2493              	 .section .text.pmc_enable_interrupt,"ax",%progbits
 2494              	 .align 1
 2495              	 .global pmc_enable_interrupt
 2496              	 .syntax unified
 2497              	 .thumb
 2498              	 .thumb_func
 2499              	 .fpu softvfp
 2501              	pmc_enable_interrupt:
 2502              	.LVL145:
 2503              	.LFB184:
1218:.././hal/sam4s/pmc.c **** #endif
1219:.././hal/sam4s/pmc.c **** 
1220:.././hal/sam4s/pmc.c **** #if SAMG55
1221:.././hal/sam4s/pmc.c **** /**
1222:.././hal/sam4s/pmc.c ****  * \brief Switch UHP (USB) clock source selection to PLLA clock.
1223:.././hal/sam4s/pmc.c ****  *
1224:.././hal/sam4s/pmc.c ****  * \param ul_usbdiv Clock divisor.
1225:.././hal/sam4s/pmc.c ****  */
1226:.././hal/sam4s/pmc.c **** void pmc_switch_uhpck_to_pllack(uint32_t ul_usbdiv)
1227:.././hal/sam4s/pmc.c **** {
1228:.././hal/sam4s/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv);
1229:.././hal/sam4s/pmc.c **** }
1230:.././hal/sam4s/pmc.c **** 
1231:.././hal/sam4s/pmc.c **** /**
1232:.././hal/sam4s/pmc.c ****  * \brief Switch UHP (USB) clock source selection to PLLB clock.
1233:.././hal/sam4s/pmc.c ****  *
1234:.././hal/sam4s/pmc.c ****  * \param ul_usbdiv Clock divisor.
1235:.././hal/sam4s/pmc.c ****  */
1236:.././hal/sam4s/pmc.c **** void pmc_switch_uhpck_to_pllbck(uint32_t ul_usbdiv)
1237:.././hal/sam4s/pmc.c **** {
1238:.././hal/sam4s/pmc.c **** 	PMC->PMC_USB = PMC_USB_USBDIV(ul_usbdiv) | PMC_USB_USBS;
1239:.././hal/sam4s/pmc.c **** }
1240:.././hal/sam4s/pmc.c **** 
1241:.././hal/sam4s/pmc.c **** /**
1242:.././hal/sam4s/pmc.c ****  * \brief Enable UHP (USB) clock.
1243:.././hal/sam4s/pmc.c ****  */
1244:.././hal/sam4s/pmc.c **** void pmc_enable_uhpck(void)
1245:.././hal/sam4s/pmc.c **** {
1246:.././hal/sam4s/pmc.c **** 	PMC->PMC_SCER = PMC_SCER_UHP;
1247:.././hal/sam4s/pmc.c **** }
1248:.././hal/sam4s/pmc.c **** #endif
1249:.././hal/sam4s/pmc.c **** 
1250:.././hal/sam4s/pmc.c **** /**
1251:.././hal/sam4s/pmc.c ****  * \brief Enable PMC interrupts.
1252:.././hal/sam4s/pmc.c ****  *
1253:.././hal/sam4s/pmc.c ****  * \param ul_sources Interrupt sources bit map.
1254:.././hal/sam4s/pmc.c ****  */
1255:.././hal/sam4s/pmc.c **** void pmc_enable_interrupt(uint32_t ul_sources)
1256:.././hal/sam4s/pmc.c **** {
 2504              	 .loc 1 1256 1 is_stmt 1 view-0
 2505              	 .cfi_startproc
 2506              	 
 2507              	 
 2508              	 
1257:.././hal/sam4s/pmc.c **** 	PMC->PMC_IER = ul_sources;
 2509              	 .loc 1 1257 2 view .LVU643
 2510              	 .loc 1 1257 15 is_stmt 0 view .LVU644
 2511 0000 014B     	 ldr r3,.L294
 2512 0002 1866     	 str r0,[r3,#96]
1258:.././hal/sam4s/pmc.c **** }
 2513              	 .loc 1 1258 1 view .LVU645
 2514 0004 7047     	 bx lr
 2515              	.L295:
 2516 0006 00BF     	 .align 2
 2517              	.L294:
 2518 0008 00040E40 	 .word 1074660352
 2519              	 .cfi_endproc
 2520              	.LFE184:
 2522              	 .section .text.pmc_disable_interrupt,"ax",%progbits
 2523              	 .align 1
 2524              	 .global pmc_disable_interrupt
 2525              	 .syntax unified
 2526              	 .thumb
 2527              	 .thumb_func
 2528              	 .fpu softvfp
 2530              	pmc_disable_interrupt:
 2531              	.LVL146:
 2532              	.LFB185:
1259:.././hal/sam4s/pmc.c **** 
1260:.././hal/sam4s/pmc.c **** /**
1261:.././hal/sam4s/pmc.c ****  * \brief Disable PMC interrupts.
1262:.././hal/sam4s/pmc.c ****  *
1263:.././hal/sam4s/pmc.c ****  * \param ul_sources Interrupt sources bit map.
1264:.././hal/sam4s/pmc.c ****  */
1265:.././hal/sam4s/pmc.c **** void pmc_disable_interrupt(uint32_t ul_sources)
1266:.././hal/sam4s/pmc.c **** {
 2533              	 .loc 1 1266 1 is_stmt 1 view-0
 2534              	 .cfi_startproc
 2535              	 
 2536              	 
 2537              	 
1267:.././hal/sam4s/pmc.c **** 	PMC->PMC_IDR = ul_sources;
 2538              	 .loc 1 1267 2 view .LVU647
 2539              	 .loc 1 1267 15 is_stmt 0 view .LVU648
 2540 0000 014B     	 ldr r3,.L297
 2541 0002 5866     	 str r0,[r3,#100]
1268:.././hal/sam4s/pmc.c **** }
 2542              	 .loc 1 1268 1 view .LVU649
 2543 0004 7047     	 bx lr
 2544              	.L298:
 2545 0006 00BF     	 .align 2
 2546              	.L297:
 2547 0008 00040E40 	 .word 1074660352
 2548              	 .cfi_endproc
 2549              	.LFE185:
 2551              	 .section .text.pmc_get_interrupt_mask,"ax",%progbits
 2552              	 .align 1
 2553              	 .global pmc_get_interrupt_mask
 2554              	 .syntax unified
 2555              	 .thumb
 2556              	 .thumb_func
 2557              	 .fpu softvfp
 2559              	pmc_get_interrupt_mask:
 2560              	.LFB186:
1269:.././hal/sam4s/pmc.c **** 
1270:.././hal/sam4s/pmc.c **** /**
1271:.././hal/sam4s/pmc.c ****  * \brief Get PMC interrupt mask.
1272:.././hal/sam4s/pmc.c ****  *
1273:.././hal/sam4s/pmc.c ****  * \return The interrupt mask value.
1274:.././hal/sam4s/pmc.c ****  */
1275:.././hal/sam4s/pmc.c **** uint32_t pmc_get_interrupt_mask(void)
1276:.././hal/sam4s/pmc.c **** {
 2561              	 .loc 1 1276 1 is_stmt 1 view-0
 2562              	 .cfi_startproc
 2563              	 
 2564              	 
 2565              	 
1277:.././hal/sam4s/pmc.c **** 	return PMC->PMC_IMR;
 2566              	 .loc 1 1277 2 view .LVU651
 2567              	 .loc 1 1277 12 is_stmt 0 view .LVU652
 2568 0000 014B     	 ldr r3,.L300
 2569 0002 D86E     	 ldr r0,[r3,#108]
1278:.././hal/sam4s/pmc.c **** }
 2570              	 .loc 1 1278 1 view .LVU653
 2571 0004 7047     	 bx lr
 2572              	.L301:
 2573 0006 00BF     	 .align 2
 2574              	.L300:
 2575 0008 00040E40 	 .word 1074660352
 2576              	 .cfi_endproc
 2577              	.LFE186:
 2579              	 .section .text.pmc_get_status,"ax",%progbits
 2580              	 .align 1
 2581              	 .global pmc_get_status
 2582              	 .syntax unified
 2583              	 .thumb
 2584              	 .thumb_func
 2585              	 .fpu softvfp
 2587              	pmc_get_status:
 2588              	.LFB187:
1279:.././hal/sam4s/pmc.c **** 
1280:.././hal/sam4s/pmc.c **** /**
1281:.././hal/sam4s/pmc.c ****  * \brief Get current status.
1282:.././hal/sam4s/pmc.c ****  *
1283:.././hal/sam4s/pmc.c ****  * \return The current PMC status.
1284:.././hal/sam4s/pmc.c ****  */
1285:.././hal/sam4s/pmc.c **** uint32_t pmc_get_status(void)
1286:.././hal/sam4s/pmc.c **** {
 2589              	 .loc 1 1286 1 is_stmt 1 view-0
 2590              	 .cfi_startproc
 2591              	 
 2592              	 
 2593              	 
1287:.././hal/sam4s/pmc.c **** 	return PMC->PMC_SR;
 2594              	 .loc 1 1287 2 view .LVU655
 2595              	 .loc 1 1287 12 is_stmt 0 view .LVU656
 2596 0000 014B     	 ldr r3,.L303
 2597 0002 986E     	 ldr r0,[r3,#104]
1288:.././hal/sam4s/pmc.c **** }
 2598              	 .loc 1 1288 1 view .LVU657
 2599 0004 7047     	 bx lr
 2600              	.L304:
 2601 0006 00BF     	 .align 2
 2602              	.L303:
 2603 0008 00040E40 	 .word 1074660352
 2604              	 .cfi_endproc
 2605              	.LFE187:
 2607              	 .section .text.pmc_set_fast_startup_input,"ax",%progbits
 2608              	 .align 1
 2609              	 .global pmc_set_fast_startup_input
 2610              	 .syntax unified
 2611              	 .thumb
 2612              	 .thumb_func
 2613              	 .fpu softvfp
 2615              	pmc_set_fast_startup_input:
 2616              	.LVL147:
 2617              	.LFB188:
1289:.././hal/sam4s/pmc.c **** 
1290:.././hal/sam4s/pmc.c **** /**
1291:.././hal/sam4s/pmc.c ****  * \brief Set the wake-up inputs for fast startup mode registers
1292:.././hal/sam4s/pmc.c ****  *        (event generation).
1293:.././hal/sam4s/pmc.c ****  *
1294:.././hal/sam4s/pmc.c ****  * \param ul_inputs Wake up inputs to enable.
1295:.././hal/sam4s/pmc.c ****  */
1296:.././hal/sam4s/pmc.c **** void pmc_set_fast_startup_input(uint32_t ul_inputs)
1297:.././hal/sam4s/pmc.c **** {
 2618              	 .loc 1 1297 1 is_stmt 1 view-0
 2619              	 .cfi_startproc
 2620              	 
 2621              	 
 2622              	 
1298:.././hal/sam4s/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
 2623              	 .loc 1 1298 2 view .LVU659
1299:.././hal/sam4s/pmc.c **** 	PMC->PMC_FSMR |= ul_inputs;
 2624              	 .loc 1 1299 2 view .LVU660
 2625              	 .loc 1 1299 16 is_stmt 0 view .LVU661
 2626 0000 034B     	 ldr r3,.L306
 2627 0002 1A6F     	 ldr r2,[r3,#112]
1298:.././hal/sam4s/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
 2628              	 .loc 1 1298 12 view .LVU662
 2629 0004 C0F31200 	 ubfx r0,r0,#0,#19
 2630              	.LVL148:
 2631              	 .loc 1 1299 16 view .LVU663
 2632 0008 1043     	 orrs r0,r0,r2
 2633 000a 1867     	 str r0,[r3,#112]
1300:.././hal/sam4s/pmc.c **** }
 2634              	 .loc 1 1300 1 view .LVU664
 2635 000c 7047     	 bx lr
 2636              	.L307:
 2637 000e 00BF     	 .align 2
 2638              	.L306:
 2639 0010 00040E40 	 .word 1074660352
 2640              	 .cfi_endproc
 2641              	.LFE188:
 2643              	 .section .text.pmc_clr_fast_startup_input,"ax",%progbits
 2644              	 .align 1
 2645              	 .global pmc_clr_fast_startup_input
 2646              	 .syntax unified
 2647              	 .thumb
 2648              	 .thumb_func
 2649              	 .fpu softvfp
 2651              	pmc_clr_fast_startup_input:
 2652              	.LVL149:
 2653              	.LFB189:
1301:.././hal/sam4s/pmc.c **** 
1302:.././hal/sam4s/pmc.c **** /**
1303:.././hal/sam4s/pmc.c ****  * \brief Clear the wake-up inputs for fast startup mode registers
1304:.././hal/sam4s/pmc.c ****  *        (remove event generation).
1305:.././hal/sam4s/pmc.c ****  *
1306:.././hal/sam4s/pmc.c ****  * \param ul_inputs Wake up inputs to disable.
1307:.././hal/sam4s/pmc.c ****  */
1308:.././hal/sam4s/pmc.c **** void pmc_clr_fast_startup_input(uint32_t ul_inputs)
1309:.././hal/sam4s/pmc.c **** {
 2654              	 .loc 1 1309 1 is_stmt 1 view-0
 2655              	 .cfi_startproc
 2656              	 
 2657              	 
 2658              	 
1310:.././hal/sam4s/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
 2659              	 .loc 1 1310 2 view .LVU666
1311:.././hal/sam4s/pmc.c **** 	PMC->PMC_FSMR &= ~ul_inputs;
 2660              	 .loc 1 1311 2 view .LVU667
 2661              	 .loc 1 1311 16 is_stmt 0 view .LVU668
 2662 0000 034A     	 ldr r2,.L309
 2663 0002 136F     	 ldr r3,[r2,#112]
1310:.././hal/sam4s/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
 2664              	 .loc 1 1310 12 view .LVU669
 2665 0004 C0F31200 	 ubfx r0,r0,#0,#19
 2666              	.LVL150:
 2667              	 .loc 1 1311 16 view .LVU670
 2668 0008 23EA0003 	 bic r3,r3,r0
 2669 000c 1367     	 str r3,[r2,#112]
1312:.././hal/sam4s/pmc.c **** }
 2670              	 .loc 1 1312 1 view .LVU671
 2671 000e 7047     	 bx lr
 2672              	.L310:
 2673              	 .align 2
 2674              	.L309:
 2675 0010 00040E40 	 .word 1074660352
 2676              	 .cfi_endproc
 2677              	.LFE189:
 2679              	 .section .text.pmc_enable_sleepmode,"ax",%progbits
 2680              	 .align 1
 2681              	 .global pmc_enable_sleepmode
 2682              	 .syntax unified
 2683              	 .thumb
 2684              	 .thumb_func
 2685              	 .fpu softvfp
 2687              	pmc_enable_sleepmode:
 2688              	.LVL151:
 2689              	.LFB190:
1313:.././hal/sam4s/pmc.c **** 
1314:.././hal/sam4s/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1315:.././hal/sam4s/pmc.c **** /**
1316:.././hal/sam4s/pmc.c ****  * \brief Set the wake-up inputs of coprocessor for fast startup mode registers
1317:.././hal/sam4s/pmc.c ****  *        (event generation).
1318:.././hal/sam4s/pmc.c ****  *
1319:.././hal/sam4s/pmc.c ****  * \param ul_inputs Wake up inputs to enable.
1320:.././hal/sam4s/pmc.c ****  */
1321:.././hal/sam4s/pmc.c **** void pmc_cp_set_fast_startup_input(uint32_t ul_inputs)
1322:.././hal/sam4s/pmc.c **** {
1323:.././hal/sam4s/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
1324:.././hal/sam4s/pmc.c **** 	PMC->PMC_CPFSMR |= ul_inputs;
1325:.././hal/sam4s/pmc.c **** }
1326:.././hal/sam4s/pmc.c **** 
1327:.././hal/sam4s/pmc.c **** /**
1328:.././hal/sam4s/pmc.c ****  * \brief Clear the wake-up inputs of coprocessor for fast startup mode registers
1329:.././hal/sam4s/pmc.c ****  *        (remove event generation).
1330:.././hal/sam4s/pmc.c ****  *
1331:.././hal/sam4s/pmc.c ****  * \param ul_inputs Wake up inputs to disable.
1332:.././hal/sam4s/pmc.c ****  */
1333:.././hal/sam4s/pmc.c **** void pmc_cp_clr_fast_startup_input(uint32_t ul_inputs)
1334:.././hal/sam4s/pmc.c **** {
1335:.././hal/sam4s/pmc.c **** 	ul_inputs &= PMC_FAST_STARTUP_Msk;
1336:.././hal/sam4s/pmc.c **** 	PMC->PMC_CPFSMR &= ~ul_inputs;
1337:.././hal/sam4s/pmc.c **** }
1338:.././hal/sam4s/pmc.c **** #endif
1339:.././hal/sam4s/pmc.c **** 
1340:.././hal/sam4s/pmc.c **** /**
1341:.././hal/sam4s/pmc.c ****  * \brief Enable Sleep Mode.
1342:.././hal/sam4s/pmc.c ****  * Enter condition: (WFE or WFI) + (SLEEPDEEP bit = 0) + (LPM bit = 0)
1343:.././hal/sam4s/pmc.c ****  *
1344:.././hal/sam4s/pmc.c ****  * \param uc_type 0 for wait for interrupt, 1 for wait for event.
1345:.././hal/sam4s/pmc.c ****  * \note For SAM4S, SAM4C, SAM4CM, SAM4CP, SAMV71 and SAM4E series,
1346:.././hal/sam4s/pmc.c ****  * since only WFI is effective, uc_type = 1 will be treated as uc_type = 0.
1347:.././hal/sam4s/pmc.c ****  */
1348:.././hal/sam4s/pmc.c **** void pmc_enable_sleepmode(uint8_t uc_type)
1349:.././hal/sam4s/pmc.c **** {
 2690              	 .loc 1 1349 1 is_stmt 1 view-0
 2691              	 .cfi_startproc
 2692              	 
 2693              	 
 2694              	 
1350:.././hal/sam4s/pmc.c **** #if !(SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMV71 || SAMV70 || SAME70 || SAMS70)
1351:.././hal/sam4s/pmc.c **** 	PMC->PMC_FSMR &= (uint32_t) ~ PMC_FSMR_LPM; // Enter Sleep mode
1352:.././hal/sam4s/pmc.c **** #endif
1353:.././hal/sam4s/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; // Deep sleep
 2695              	 .loc 1 1353 2 view .LVU673
 2696              	 .loc 1 1353 11 is_stmt 0 view .LVU674
 2697 0000 044A     	 ldr r2,.L312
 2698 0002 1369     	 ldr r3,[r2,#16]
 2699 0004 23F00403 	 bic r3,r3,#4
 2700 0008 1361     	 str r3,[r2,#16]
1354:.././hal/sam4s/pmc.c **** 
1355:.././hal/sam4s/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMV71 || SAMV70 || SAME70 || SAMS70)
1356:.././hal/sam4s/pmc.c **** 	UNUSED(uc_type);
 2701              	 .loc 1 1356 2 is_stmt 1 view .LVU675
1357:.././hal/sam4s/pmc.c **** 	__DSB();
 2702              	 .loc 1 1357 2 view .LVU676
 2703              	.LBB32:
 2704              	.LBI32:
 2705              	 .file 2 ".././hal/sam4s/inc/core_cmInstr.h"
   1:.././hal/sam4s/inc/core_cmInstr.h **** /**************************************************************************//**
   2:.././hal/sam4s/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:.././hal/sam4s/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:.././hal/sam4s/inc/core_cmInstr.h ****  * @version  V4.00
   5:.././hal/sam4s/inc/core_cmInstr.h ****  * @date     28. August 2014
   6:.././hal/sam4s/inc/core_cmInstr.h ****  *
   7:.././hal/sam4s/inc/core_cmInstr.h ****  * @note
   8:.././hal/sam4s/inc/core_cmInstr.h ****  *
   9:.././hal/sam4s/inc/core_cmInstr.h ****  ******************************************************************************/
  10:.././hal/sam4s/inc/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:.././hal/sam4s/inc/core_cmInstr.h **** 
  12:.././hal/sam4s/inc/core_cmInstr.h ****    All rights reserved.
  13:.././hal/sam4s/inc/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:.././hal/sam4s/inc/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:.././hal/sam4s/inc/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:.././hal/sam4s/inc/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:.././hal/sam4s/inc/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:.././hal/sam4s/inc/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:.././hal/sam4s/inc/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:.././hal/sam4s/inc/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:.././hal/sam4s/inc/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:.././hal/sam4s/inc/core_cmInstr.h ****      specific prior written permission.
  23:.././hal/sam4s/inc/core_cmInstr.h ****    *
  24:.././hal/sam4s/inc/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:.././hal/sam4s/inc/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:.././hal/sam4s/inc/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:.././hal/sam4s/inc/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:.././hal/sam4s/inc/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:.././hal/sam4s/inc/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:.././hal/sam4s/inc/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:.././hal/sam4s/inc/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:.././hal/sam4s/inc/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:.././hal/sam4s/inc/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:.././hal/sam4s/inc/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:.././hal/sam4s/inc/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:.././hal/sam4s/inc/core_cmInstr.h **** 
  37:.././hal/sam4s/inc/core_cmInstr.h **** 
  38:.././hal/sam4s/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:.././hal/sam4s/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:.././hal/sam4s/inc/core_cmInstr.h **** 
  41:.././hal/sam4s/inc/core_cmInstr.h **** 
  42:.././hal/sam4s/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:.././hal/sam4s/inc/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:.././hal/sam4s/inc/core_cmInstr.h ****   Access to dedicated instructions
  45:.././hal/sam4s/inc/core_cmInstr.h ****   @{
  46:.././hal/sam4s/inc/core_cmInstr.h **** */
  47:.././hal/sam4s/inc/core_cmInstr.h **** 
  48:.././hal/sam4s/inc/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:.././hal/sam4s/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  50:.././hal/sam4s/inc/core_cmInstr.h **** 
  51:.././hal/sam4s/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:.././hal/sam4s/inc/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:.././hal/sam4s/inc/core_cmInstr.h **** #endif
  54:.././hal/sam4s/inc/core_cmInstr.h **** 
  55:.././hal/sam4s/inc/core_cmInstr.h **** 
  56:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  No Operation
  57:.././hal/sam4s/inc/core_cmInstr.h **** 
  58:.././hal/sam4s/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:.././hal/sam4s/inc/core_cmInstr.h ****  */
  60:.././hal/sam4s/inc/core_cmInstr.h **** #define __NOP                             __nop
  61:.././hal/sam4s/inc/core_cmInstr.h **** 
  62:.././hal/sam4s/inc/core_cmInstr.h **** 
  63:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:.././hal/sam4s/inc/core_cmInstr.h **** 
  65:.././hal/sam4s/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:.././hal/sam4s/inc/core_cmInstr.h ****     until one of a number of events occurs.
  67:.././hal/sam4s/inc/core_cmInstr.h ****  */
  68:.././hal/sam4s/inc/core_cmInstr.h **** #define __WFI                             __wfi
  69:.././hal/sam4s/inc/core_cmInstr.h **** 
  70:.././hal/sam4s/inc/core_cmInstr.h **** 
  71:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Wait For Event
  72:.././hal/sam4s/inc/core_cmInstr.h **** 
  73:.././hal/sam4s/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:.././hal/sam4s/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:.././hal/sam4s/inc/core_cmInstr.h ****  */
  76:.././hal/sam4s/inc/core_cmInstr.h **** #define __WFE                             __wfe
  77:.././hal/sam4s/inc/core_cmInstr.h **** 
  78:.././hal/sam4s/inc/core_cmInstr.h **** 
  79:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Send Event
  80:.././hal/sam4s/inc/core_cmInstr.h **** 
  81:.././hal/sam4s/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:.././hal/sam4s/inc/core_cmInstr.h ****  */
  83:.././hal/sam4s/inc/core_cmInstr.h **** #define __SEV                             __sev
  84:.././hal/sam4s/inc/core_cmInstr.h **** 
  85:.././hal/sam4s/inc/core_cmInstr.h **** 
  86:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:.././hal/sam4s/inc/core_cmInstr.h **** 
  88:.././hal/sam4s/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:.././hal/sam4s/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:.././hal/sam4s/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:.././hal/sam4s/inc/core_cmInstr.h ****  */
  92:.././hal/sam4s/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:.././hal/sam4s/inc/core_cmInstr.h **** 
  94:.././hal/sam4s/inc/core_cmInstr.h **** 
  95:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:.././hal/sam4s/inc/core_cmInstr.h **** 
  97:.././hal/sam4s/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:.././hal/sam4s/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:.././hal/sam4s/inc/core_cmInstr.h ****  */
 100:.././hal/sam4s/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:.././hal/sam4s/inc/core_cmInstr.h **** 
 102:.././hal/sam4s/inc/core_cmInstr.h **** 
 103:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:.././hal/sam4s/inc/core_cmInstr.h **** 
 105:.././hal/sam4s/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:.././hal/sam4s/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:.././hal/sam4s/inc/core_cmInstr.h ****  */
 108:.././hal/sam4s/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:.././hal/sam4s/inc/core_cmInstr.h **** 
 110:.././hal/sam4s/inc/core_cmInstr.h **** 
 111:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:.././hal/sam4s/inc/core_cmInstr.h **** 
 113:.././hal/sam4s/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:.././hal/sam4s/inc/core_cmInstr.h **** 
 115:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:.././hal/sam4s/inc/core_cmInstr.h ****     \return               Reversed value
 117:.././hal/sam4s/inc/core_cmInstr.h ****  */
 118:.././hal/sam4s/inc/core_cmInstr.h **** #define __REV                             __rev
 119:.././hal/sam4s/inc/core_cmInstr.h **** 
 120:.././hal/sam4s/inc/core_cmInstr.h **** 
 121:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:.././hal/sam4s/inc/core_cmInstr.h **** 
 123:.././hal/sam4s/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:.././hal/sam4s/inc/core_cmInstr.h **** 
 125:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:.././hal/sam4s/inc/core_cmInstr.h ****     \return               Reversed value
 127:.././hal/sam4s/inc/core_cmInstr.h ****  */
 128:.././hal/sam4s/inc/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:.././hal/sam4s/inc/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:.././hal/sam4s/inc/core_cmInstr.h **** {
 131:.././hal/sam4s/inc/core_cmInstr.h ****   rev16 r0, r0
 132:.././hal/sam4s/inc/core_cmInstr.h ****   bx lr
 133:.././hal/sam4s/inc/core_cmInstr.h **** }
 134:.././hal/sam4s/inc/core_cmInstr.h **** #endif
 135:.././hal/sam4s/inc/core_cmInstr.h **** 
 136:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:.././hal/sam4s/inc/core_cmInstr.h **** 
 138:.././hal/sam4s/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:.././hal/sam4s/inc/core_cmInstr.h **** 
 140:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:.././hal/sam4s/inc/core_cmInstr.h ****     \return               Reversed value
 142:.././hal/sam4s/inc/core_cmInstr.h ****  */
 143:.././hal/sam4s/inc/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:.././hal/sam4s/inc/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:.././hal/sam4s/inc/core_cmInstr.h **** {
 146:.././hal/sam4s/inc/core_cmInstr.h ****   revsh r0, r0
 147:.././hal/sam4s/inc/core_cmInstr.h ****   bx lr
 148:.././hal/sam4s/inc/core_cmInstr.h **** }
 149:.././hal/sam4s/inc/core_cmInstr.h **** #endif
 150:.././hal/sam4s/inc/core_cmInstr.h **** 
 151:.././hal/sam4s/inc/core_cmInstr.h **** 
 152:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:.././hal/sam4s/inc/core_cmInstr.h **** 
 154:.././hal/sam4s/inc/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:.././hal/sam4s/inc/core_cmInstr.h **** 
 156:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:.././hal/sam4s/inc/core_cmInstr.h ****     \return               Rotated value
 159:.././hal/sam4s/inc/core_cmInstr.h ****  */
 160:.././hal/sam4s/inc/core_cmInstr.h **** #define __ROR                             __ror
 161:.././hal/sam4s/inc/core_cmInstr.h **** 
 162:.././hal/sam4s/inc/core_cmInstr.h **** 
 163:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Breakpoint
 164:.././hal/sam4s/inc/core_cmInstr.h **** 
 165:.././hal/sam4s/inc/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:.././hal/sam4s/inc/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:.././hal/sam4s/inc/core_cmInstr.h **** 
 168:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:.././hal/sam4s/inc/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:.././hal/sam4s/inc/core_cmInstr.h ****  */
 171:.././hal/sam4s/inc/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:.././hal/sam4s/inc/core_cmInstr.h **** 
 173:.././hal/sam4s/inc/core_cmInstr.h **** 
 174:.././hal/sam4s/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 175:.././hal/sam4s/inc/core_cmInstr.h **** 
 176:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:.././hal/sam4s/inc/core_cmInstr.h **** 
 178:.././hal/sam4s/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:.././hal/sam4s/inc/core_cmInstr.h **** 
 180:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:.././hal/sam4s/inc/core_cmInstr.h ****     \return               Reversed value
 182:.././hal/sam4s/inc/core_cmInstr.h ****  */
 183:.././hal/sam4s/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 184:.././hal/sam4s/inc/core_cmInstr.h **** 
 185:.././hal/sam4s/inc/core_cmInstr.h **** 
 186:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:.././hal/sam4s/inc/core_cmInstr.h **** 
 188:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 189:.././hal/sam4s/inc/core_cmInstr.h **** 
 190:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:.././hal/sam4s/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:.././hal/sam4s/inc/core_cmInstr.h ****  */
 193:.././hal/sam4s/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:.././hal/sam4s/inc/core_cmInstr.h **** 
 195:.././hal/sam4s/inc/core_cmInstr.h **** 
 196:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:.././hal/sam4s/inc/core_cmInstr.h **** 
 198:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 199:.././hal/sam4s/inc/core_cmInstr.h **** 
 200:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:.././hal/sam4s/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:.././hal/sam4s/inc/core_cmInstr.h ****  */
 203:.././hal/sam4s/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:.././hal/sam4s/inc/core_cmInstr.h **** 
 205:.././hal/sam4s/inc/core_cmInstr.h **** 
 206:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:.././hal/sam4s/inc/core_cmInstr.h **** 
 208:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 209:.././hal/sam4s/inc/core_cmInstr.h **** 
 210:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:.././hal/sam4s/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:.././hal/sam4s/inc/core_cmInstr.h ****  */
 213:.././hal/sam4s/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:.././hal/sam4s/inc/core_cmInstr.h **** 
 215:.././hal/sam4s/inc/core_cmInstr.h **** 
 216:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:.././hal/sam4s/inc/core_cmInstr.h **** 
 218:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 219:.././hal/sam4s/inc/core_cmInstr.h **** 
 220:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 221:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:.././hal/sam4s/inc/core_cmInstr.h ****     \return          0  Function succeeded
 223:.././hal/sam4s/inc/core_cmInstr.h ****     \return          1  Function failed
 224:.././hal/sam4s/inc/core_cmInstr.h ****  */
 225:.././hal/sam4s/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:.././hal/sam4s/inc/core_cmInstr.h **** 
 227:.././hal/sam4s/inc/core_cmInstr.h **** 
 228:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:.././hal/sam4s/inc/core_cmInstr.h **** 
 230:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 231:.././hal/sam4s/inc/core_cmInstr.h **** 
 232:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 233:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:.././hal/sam4s/inc/core_cmInstr.h ****     \return          0  Function succeeded
 235:.././hal/sam4s/inc/core_cmInstr.h ****     \return          1  Function failed
 236:.././hal/sam4s/inc/core_cmInstr.h ****  */
 237:.././hal/sam4s/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:.././hal/sam4s/inc/core_cmInstr.h **** 
 239:.././hal/sam4s/inc/core_cmInstr.h **** 
 240:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:.././hal/sam4s/inc/core_cmInstr.h **** 
 242:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 243:.././hal/sam4s/inc/core_cmInstr.h **** 
 244:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 245:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:.././hal/sam4s/inc/core_cmInstr.h ****     \return          0  Function succeeded
 247:.././hal/sam4s/inc/core_cmInstr.h ****     \return          1  Function failed
 248:.././hal/sam4s/inc/core_cmInstr.h ****  */
 249:.././hal/sam4s/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:.././hal/sam4s/inc/core_cmInstr.h **** 
 251:.././hal/sam4s/inc/core_cmInstr.h **** 
 252:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:.././hal/sam4s/inc/core_cmInstr.h **** 
 254:.././hal/sam4s/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:.././hal/sam4s/inc/core_cmInstr.h **** 
 256:.././hal/sam4s/inc/core_cmInstr.h ****  */
 257:.././hal/sam4s/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 258:.././hal/sam4s/inc/core_cmInstr.h **** 
 259:.././hal/sam4s/inc/core_cmInstr.h **** 
 260:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 261:.././hal/sam4s/inc/core_cmInstr.h **** 
 262:.././hal/sam4s/inc/core_cmInstr.h ****     This function saturates a signed value.
 263:.././hal/sam4s/inc/core_cmInstr.h **** 
 264:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:.././hal/sam4s/inc/core_cmInstr.h ****     \return             Saturated value
 267:.././hal/sam4s/inc/core_cmInstr.h ****  */
 268:.././hal/sam4s/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 269:.././hal/sam4s/inc/core_cmInstr.h **** 
 270:.././hal/sam4s/inc/core_cmInstr.h **** 
 271:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:.././hal/sam4s/inc/core_cmInstr.h **** 
 273:.././hal/sam4s/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 274:.././hal/sam4s/inc/core_cmInstr.h **** 
 275:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:.././hal/sam4s/inc/core_cmInstr.h ****     \return             Saturated value
 278:.././hal/sam4s/inc/core_cmInstr.h ****  */
 279:.././hal/sam4s/inc/core_cmInstr.h **** #define __USAT                            __usat
 280:.././hal/sam4s/inc/core_cmInstr.h **** 
 281:.././hal/sam4s/inc/core_cmInstr.h **** 
 282:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 283:.././hal/sam4s/inc/core_cmInstr.h **** 
 284:.././hal/sam4s/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:.././hal/sam4s/inc/core_cmInstr.h **** 
 286:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:.././hal/sam4s/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 288:.././hal/sam4s/inc/core_cmInstr.h ****  */
 289:.././hal/sam4s/inc/core_cmInstr.h **** #define __CLZ                             __clz
 290:.././hal/sam4s/inc/core_cmInstr.h **** 
 291:.././hal/sam4s/inc/core_cmInstr.h **** 
 292:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 293:.././hal/sam4s/inc/core_cmInstr.h **** 
 294:.././hal/sam4s/inc/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit. The carry input is shifted in at 
 295:.././hal/sam4s/inc/core_cmInstr.h **** 
 296:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 297:.././hal/sam4s/inc/core_cmInstr.h ****     \return               Rotated value
 298:.././hal/sam4s/inc/core_cmInstr.h ****  */
 299:.././hal/sam4s/inc/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 300:.././hal/sam4s/inc/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 301:.././hal/sam4s/inc/core_cmInstr.h **** {
 302:.././hal/sam4s/inc/core_cmInstr.h ****   rrx r0, r0
 303:.././hal/sam4s/inc/core_cmInstr.h ****   bx lr
 304:.././hal/sam4s/inc/core_cmInstr.h **** }
 305:.././hal/sam4s/inc/core_cmInstr.h **** #endif
 306:.././hal/sam4s/inc/core_cmInstr.h **** 
 307:.././hal/sam4s/inc/core_cmInstr.h **** 
 308:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 309:.././hal/sam4s/inc/core_cmInstr.h **** 
 310:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 311:.././hal/sam4s/inc/core_cmInstr.h **** 
 312:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 313:.././hal/sam4s/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 314:.././hal/sam4s/inc/core_cmInstr.h ****  */
 315:.././hal/sam4s/inc/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 316:.././hal/sam4s/inc/core_cmInstr.h **** 
 317:.././hal/sam4s/inc/core_cmInstr.h **** 
 318:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 319:.././hal/sam4s/inc/core_cmInstr.h **** 
 320:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 321:.././hal/sam4s/inc/core_cmInstr.h **** 
 322:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 323:.././hal/sam4s/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 324:.././hal/sam4s/inc/core_cmInstr.h ****  */
 325:.././hal/sam4s/inc/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 326:.././hal/sam4s/inc/core_cmInstr.h **** 
 327:.././hal/sam4s/inc/core_cmInstr.h **** 
 328:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 329:.././hal/sam4s/inc/core_cmInstr.h **** 
 330:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 331:.././hal/sam4s/inc/core_cmInstr.h **** 
 332:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 333:.././hal/sam4s/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 334:.././hal/sam4s/inc/core_cmInstr.h ****  */
 335:.././hal/sam4s/inc/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 336:.././hal/sam4s/inc/core_cmInstr.h **** 
 337:.././hal/sam4s/inc/core_cmInstr.h **** 
 338:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 339:.././hal/sam4s/inc/core_cmInstr.h **** 
 340:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 341:.././hal/sam4s/inc/core_cmInstr.h **** 
 342:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 343:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 344:.././hal/sam4s/inc/core_cmInstr.h ****  */
 345:.././hal/sam4s/inc/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 346:.././hal/sam4s/inc/core_cmInstr.h **** 
 347:.././hal/sam4s/inc/core_cmInstr.h **** 
 348:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 349:.././hal/sam4s/inc/core_cmInstr.h **** 
 350:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 351:.././hal/sam4s/inc/core_cmInstr.h **** 
 352:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 353:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 354:.././hal/sam4s/inc/core_cmInstr.h ****  */
 355:.././hal/sam4s/inc/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 356:.././hal/sam4s/inc/core_cmInstr.h **** 
 357:.././hal/sam4s/inc/core_cmInstr.h **** 
 358:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 359:.././hal/sam4s/inc/core_cmInstr.h **** 
 360:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 361:.././hal/sam4s/inc/core_cmInstr.h **** 
 362:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 363:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 364:.././hal/sam4s/inc/core_cmInstr.h ****  */
 365:.././hal/sam4s/inc/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 366:.././hal/sam4s/inc/core_cmInstr.h **** 
 367:.././hal/sam4s/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 368:.././hal/sam4s/inc/core_cmInstr.h **** 
 369:.././hal/sam4s/inc/core_cmInstr.h **** 
 370:.././hal/sam4s/inc/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 371:.././hal/sam4s/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 372:.././hal/sam4s/inc/core_cmInstr.h **** 
 373:.././hal/sam4s/inc/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 374:.././hal/sam4s/inc/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 375:.././hal/sam4s/inc/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 376:.././hal/sam4s/inc/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 377:.././hal/sam4s/inc/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 378:.././hal/sam4s/inc/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 379:.././hal/sam4s/inc/core_cmInstr.h **** #else
 380:.././hal/sam4s/inc/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 381:.././hal/sam4s/inc/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 382:.././hal/sam4s/inc/core_cmInstr.h **** #endif
 383:.././hal/sam4s/inc/core_cmInstr.h **** 
 384:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  No Operation
 385:.././hal/sam4s/inc/core_cmInstr.h **** 
 386:.././hal/sam4s/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 387:.././hal/sam4s/inc/core_cmInstr.h ****  */
 388:.././hal/sam4s/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 389:.././hal/sam4s/inc/core_cmInstr.h **** {
 390:.././hal/sam4s/inc/core_cmInstr.h ****   __ASM volatile ("nop");
 391:.././hal/sam4s/inc/core_cmInstr.h **** }
 392:.././hal/sam4s/inc/core_cmInstr.h **** 
 393:.././hal/sam4s/inc/core_cmInstr.h **** 
 394:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
 395:.././hal/sam4s/inc/core_cmInstr.h **** 
 396:.././hal/sam4s/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
 397:.././hal/sam4s/inc/core_cmInstr.h ****     until one of a number of events occurs.
 398:.././hal/sam4s/inc/core_cmInstr.h ****  */
 399:.././hal/sam4s/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFI(void)
 400:.././hal/sam4s/inc/core_cmInstr.h **** {
 401:.././hal/sam4s/inc/core_cmInstr.h ****   __ASM volatile ("wfi");
 402:.././hal/sam4s/inc/core_cmInstr.h **** }
 403:.././hal/sam4s/inc/core_cmInstr.h **** 
 404:.././hal/sam4s/inc/core_cmInstr.h **** 
 405:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Wait For Event
 406:.././hal/sam4s/inc/core_cmInstr.h **** 
 407:.././hal/sam4s/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
 408:.././hal/sam4s/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
 409:.././hal/sam4s/inc/core_cmInstr.h ****  */
 410:.././hal/sam4s/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __WFE(void)
 411:.././hal/sam4s/inc/core_cmInstr.h **** {
 412:.././hal/sam4s/inc/core_cmInstr.h ****   __ASM volatile ("wfe");
 413:.././hal/sam4s/inc/core_cmInstr.h **** }
 414:.././hal/sam4s/inc/core_cmInstr.h **** 
 415:.././hal/sam4s/inc/core_cmInstr.h **** 
 416:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Send Event
 417:.././hal/sam4s/inc/core_cmInstr.h **** 
 418:.././hal/sam4s/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 419:.././hal/sam4s/inc/core_cmInstr.h ****  */
 420:.././hal/sam4s/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __SEV(void)
 421:.././hal/sam4s/inc/core_cmInstr.h **** {
 422:.././hal/sam4s/inc/core_cmInstr.h ****   __ASM volatile ("sev");
 423:.././hal/sam4s/inc/core_cmInstr.h **** }
 424:.././hal/sam4s/inc/core_cmInstr.h **** 
 425:.././hal/sam4s/inc/core_cmInstr.h **** 
 426:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
 427:.././hal/sam4s/inc/core_cmInstr.h **** 
 428:.././hal/sam4s/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
 429:.././hal/sam4s/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
 430:.././hal/sam4s/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
 431:.././hal/sam4s/inc/core_cmInstr.h ****  */
 432:.././hal/sam4s/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __ISB(void)
 433:.././hal/sam4s/inc/core_cmInstr.h **** {
 434:.././hal/sam4s/inc/core_cmInstr.h ****   __ASM volatile ("isb");
 435:.././hal/sam4s/inc/core_cmInstr.h **** }
 436:.././hal/sam4s/inc/core_cmInstr.h **** 
 437:.././hal/sam4s/inc/core_cmInstr.h **** 
 438:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
 439:.././hal/sam4s/inc/core_cmInstr.h **** 
 440:.././hal/sam4s/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
 441:.././hal/sam4s/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
 442:.././hal/sam4s/inc/core_cmInstr.h ****  */
 443:.././hal/sam4s/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __DSB(void)
 2706              	 .loc 2 443 57 view .LVU677
 2707              	.LBB33:
 444:.././hal/sam4s/inc/core_cmInstr.h **** {
 445:.././hal/sam4s/inc/core_cmInstr.h ****   __ASM volatile ("dsb");
 2708              	 .loc 2 445 3 view .LVU678
 2709              	 .syntax unified
 2710              	
 2711 000a BFF34F8F 	 dsb
 2712              	
 2713              	 .thumb
 2714              	 .syntax unified
 2715              	.LBE33:
 2716              	.LBE32:
1358:.././hal/sam4s/pmc.c **** 	__WFI();
 2717              	 .loc 1 1358 2 view .LVU679
 2718              	.LBB34:
 2719              	.LBI34:
 399:.././hal/sam4s/inc/core_cmInstr.h **** {
 2720              	 .loc 2 399 57 view .LVU680
 2721              	.LBB35:
 401:.././hal/sam4s/inc/core_cmInstr.h **** }
 2722              	 .loc 2 401 3 view .LVU681
 2723              	 .syntax unified
 2724              	
 2725 000e 30BF     	 wfi
 2726              	
 2727              	 .thumb
 2728              	 .syntax unified
 2729              	.LBE35:
 2730              	.LBE34:
1359:.././hal/sam4s/pmc.c **** #else
1360:.././hal/sam4s/pmc.c **** 	if (uc_type == 0) {
1361:.././hal/sam4s/pmc.c **** 		__DSB();
1362:.././hal/sam4s/pmc.c **** 		__WFI();
1363:.././hal/sam4s/pmc.c **** 	} else {
1364:.././hal/sam4s/pmc.c **** 		__DSB();
1365:.././hal/sam4s/pmc.c **** 		__WFE();
1366:.././hal/sam4s/pmc.c **** 	}
1367:.././hal/sam4s/pmc.c **** #endif
1368:.././hal/sam4s/pmc.c **** }
 2731              	 .loc 1 1368 1 is_stmt 0 view .LVU682
 2732 0010 7047     	 bx lr
 2733              	.L313:
 2734 0012 00BF     	 .align 2
 2735              	.L312:
 2736 0014 00ED00E0 	 .word -536810240
 2737              	 .cfi_endproc
 2738              	.LFE190:
 2740              	 .section .text.pmc_set_flash_in_wait_mode,"ax",%progbits
 2741              	 .align 1
 2742              	 .global pmc_set_flash_in_wait_mode
 2743              	 .syntax unified
 2744              	 .thumb
 2745              	 .thumb_func
 2746              	 .fpu softvfp
 2748              	pmc_set_flash_in_wait_mode:
 2749              	.LVL152:
 2750              	.LFB191:
1369:.././hal/sam4s/pmc.c **** 
1370:.././hal/sam4s/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAMG || SAM4CP || SAMV71 || SAMV70 || SAME70 || 
1371:.././hal/sam4s/pmc.c **** static uint32_t ul_flash_in_wait_mode = PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN;
1372:.././hal/sam4s/pmc.c **** /**
1373:.././hal/sam4s/pmc.c ****  * \brief Set the embedded flash state in wait mode
1374:.././hal/sam4s/pmc.c ****  *
1375:.././hal/sam4s/pmc.c ****  * \param ul_flash_state PMC_WAIT_MODE_FLASH_STANDBY flash in standby mode,
1376:.././hal/sam4s/pmc.c ****  * PMC_WAIT_MODE_FLASH_DEEP_POWERDOWN flash in deep power down mode.
1377:.././hal/sam4s/pmc.c ****  */
1378:.././hal/sam4s/pmc.c **** void pmc_set_flash_in_wait_mode(uint32_t ul_flash_state)
1379:.././hal/sam4s/pmc.c **** {
 2751              	 .loc 1 1379 1 is_stmt 1 view-0
 2752              	 .cfi_startproc
 2753              	 
 2754              	 
 2755              	 
1380:.././hal/sam4s/pmc.c **** 	ul_flash_in_wait_mode = ul_flash_state;
 2756              	 .loc 1 1380 2 view .LVU684
 2757              	 .loc 1 1380 24 is_stmt 0 view .LVU685
 2758 0000 014B     	 ldr r3,.L315
 2759 0002 1860     	 str r0,[r3]
1381:.././hal/sam4s/pmc.c **** }
 2760              	 .loc 1 1381 1 view .LVU686
 2761 0004 7047     	 bx lr
 2762              	.L316:
 2763 0006 00BF     	 .align 2
 2764              	.L315:
 2765 0008 00000000 	 .word .LANCHOR0
 2766              	 .cfi_endproc
 2767              	.LFE191:
 2769              	 .section .text.pmc_enable_waitmode,"ax",%progbits
 2770              	 .align 1
 2771              	 .global pmc_enable_waitmode
 2772              	 .syntax unified
 2773              	 .thumb
 2774              	 .thumb_func
 2775              	 .fpu softvfp
 2777              	pmc_enable_waitmode:
 2778              	.LFB192:
1382:.././hal/sam4s/pmc.c **** 
1383:.././hal/sam4s/pmc.c **** /**
1384:.././hal/sam4s/pmc.c ****  * \brief Enable Wait Mode. Enter condition: (WAITMODE bit = 1) + FLPM
1385:.././hal/sam4s/pmc.c ****  *
1386:.././hal/sam4s/pmc.c ****  * \note In this function, FLPM will retain, WAITMODE bit will be set,
1387:.././hal/sam4s/pmc.c ****  * Generally, this function will be called by pmc_sleep() in order to
1388:.././hal/sam4s/pmc.c ****  * complete all sequence entering wait mode.
1389:.././hal/sam4s/pmc.c ****  * See \ref pmc_sleep() for entering different sleep modes.
1390:.././hal/sam4s/pmc.c ****  */
1391:.././hal/sam4s/pmc.c **** void pmc_enable_waitmode(void)
1392:.././hal/sam4s/pmc.c **** {
 2779              	 .loc 1 1392 1 is_stmt 1 view-0
 2780              	 .cfi_startproc
 2781              	 
 2782              	 
 2783              	 
1393:.././hal/sam4s/pmc.c **** 	uint32_t i;
 2784              	 .loc 1 1393 2 view .LVU688
1394:.././hal/sam4s/pmc.c **** 
1395:.././hal/sam4s/pmc.c **** 	/* Flash in wait mode */
1396:.././hal/sam4s/pmc.c **** 	i = PMC->PMC_FSMR;
 2785              	 .loc 1 1396 2 view .LVU689
 2786              	 .loc 1 1396 4 is_stmt 0 view .LVU690
 2787 0000 0F4B     	 ldr r3,.L326
1397:.././hal/sam4s/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
1398:.././hal/sam4s/pmc.c **** #if !(SAMV71 || SAMV70 || SAME70 || SAMS70)
1399:.././hal/sam4s/pmc.c **** 	i |= ul_flash_in_wait_mode;
 2788              	 .loc 1 1399 4 view .LVU691
 2789 0002 1049     	 ldr r1,.L326+4
1396:.././hal/sam4s/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
 2790              	 .loc 1 1396 4 view .LVU692
 2791 0004 1A6F     	 ldr r2,[r3,#112]
 2792              	.LVL153:
1397:.././hal/sam4s/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
 2793              	 .loc 1 1397 2 is_stmt 1 view .LVU693
 2794              	 .loc 1 1399 4 is_stmt 0 view .LVU694
 2795 0006 0968     	 ldr r1,[r1]
1397:.././hal/sam4s/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
 2796              	 .loc 1 1397 4 view .LVU695
 2797 0008 22F4C002 	 bic r2,r2,#6291456
 2798              	.LVL154:
 2799              	 .loc 1 1399 2 is_stmt 1 view .LVU696
 2800              	 .loc 1 1399 4 is_stmt 0 view .LVU697
 2801 000c 0A43     	 orrs r2,r2,r1
 2802              	.LVL155:
1400:.././hal/sam4s/pmc.c **** #else
1401:.././hal/sam4s/pmc.c **** 	(void)ul_flash_in_wait_mode;
1402:.././hal/sam4s/pmc.c **** 	i |= PMC_WAIT_MODE_FLASH_IDLE;
1403:.././hal/sam4s/pmc.c **** #endif
1404:.././hal/sam4s/pmc.c **** 	PMC->PMC_FSMR = i;
 2803              	 .loc 1 1404 2 is_stmt 1 view .LVU698
 2804              	 .loc 1 1404 16 is_stmt 0 view .LVU699
 2805 000e 1A67     	 str r2,[r3,#112]
1405:.././hal/sam4s/pmc.c **** 
1406:.././hal/sam4s/pmc.c **** 	/* Set the WAITMODE bit = 1 */
1407:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_WAITMODE;
 2806              	 .loc 1 1407 2 is_stmt 1 view .LVU700
 2807              	 .loc 1 1407 16 is_stmt 0 view .LVU701
 2808 0010 1A6A     	 ldr r2,[r3,#32]
 2809              	.LVL156:
 2810              	 .loc 1 1407 16 view .LVU702
 2811 0012 42F45C12 	 orr r2,r2,#3604480
 2812 0016 42F00402 	 orr r2,r2,#4
 2813 001a 1A62     	 str r2,[r3,#32]
 2814              	.LVL157:
1408:.././hal/sam4s/pmc.c **** 
1409:.././hal/sam4s/pmc.c **** 	/* Waiting for Master Clock Ready MCKRDY = 1 */
1410:.././hal/sam4s/pmc.c **** 	while (!(PMC->PMC_SR & PMC_SR_MCKRDY));
 2815              	 .loc 1 1410 2 is_stmt 1 view .LVU703
 2816              	.L318:
 2817              	 .loc 1 1410 40 discriminator 1 view .LVU704
 2818              	 .loc 1 1410 8 discriminator 1 view .LVU705
 2819              	 .loc 1 1410 14 is_stmt 0 discriminator 1 view .LVU706
 2820 001c 9A6E     	 ldr r2,[r3,#104]
 2821              	 .loc 1 1410 8 discriminator 1 view .LVU707
 2822 001e 1107     	 lsls r1,r2,#28
 2823 0020 FCD5     	 bpl .L318
 2824 0022 4FF4FA72 	 mov r2,#500
 2825              	.L319:
 2826              	.LVL158:
1411:.././hal/sam4s/pmc.c **** 
1412:.././hal/sam4s/pmc.c **** 	/* Waiting for MOSCRCEN bit cleared is strongly recommended
1413:.././hal/sam4s/pmc.c **** 	 * to ensure that the core will not execute undesired instructions
1414:.././hal/sam4s/pmc.c **** 	 */
1415:.././hal/sam4s/pmc.c **** 	for (i = 0; i < 500; i++) {
1416:.././hal/sam4s/pmc.c **** 		__NOP();
 2827              	 .loc 1 1416 3 is_stmt 1 view .LVU708
 2828              	.LBB36:
 2829              	.LBI36:
 388:.././hal/sam4s/inc/core_cmInstr.h **** {
 2830              	 .loc 2 388 57 view .LVU709
 2831              	.LBB37:
 390:.././hal/sam4s/inc/core_cmInstr.h **** }
 2832              	 .loc 2 390 3 view .LVU710
 2833              	 .syntax unified
 2834              	
 2835 0026 00BF     	 nop
 2836              	
 2837              	 .thumb
 2838              	 .syntax unified
 2839              	.LBE37:
 2840              	.LBE36:
1415:.././hal/sam4s/pmc.c **** 		__NOP();
 2841              	 .loc 1 1415 23 view .LVU711
 2842              	.LVL159:
1415:.././hal/sam4s/pmc.c **** 		__NOP();
 2843              	 .loc 1 1415 14 view .LVU712
1415:.././hal/sam4s/pmc.c **** 		__NOP();
 2844              	 .loc 1 1415 2 is_stmt 0 view .LVU713
 2845 0028 013A     	 subs r2,r2,#1
 2846              	.LVL160:
1415:.././hal/sam4s/pmc.c **** 		__NOP();
 2847              	 .loc 1 1415 2 view .LVU714
 2848 002a FCD1     	 bne .L319
 2849              	.LVL161:
 2850              	.L320:
1417:.././hal/sam4s/pmc.c **** 	}
1418:.././hal/sam4s/pmc.c **** 	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
 2851              	 .loc 1 1418 46 is_stmt 1 discriminator 1 view .LVU715
 2852              	 .loc 1 1418 8 discriminator 1 view .LVU716
 2853              	 .loc 1 1418 14 is_stmt 0 discriminator 1 view .LVU717
 2854 002c 1A6A     	 ldr r2,[r3,#32]
 2855              	 .loc 1 1418 8 discriminator 1 view .LVU718
 2856 002e 1207     	 lsls r2,r2,#28
 2857 0030 FCD5     	 bpl .L320
1419:.././hal/sam4s/pmc.c **** 
1420:.././hal/sam4s/pmc.c **** #if (!SAMG)
1421:.././hal/sam4s/pmc.c **** 	/* Restore Flash in idle mode */
1422:.././hal/sam4s/pmc.c **** 	i = PMC->PMC_FSMR;
 2858              	 .loc 1 1422 2 is_stmt 1 view .LVU719
 2859              	 .loc 1 1422 4 is_stmt 0 view .LVU720
 2860 0032 1A6F     	 ldr r2,[r3,#112]
 2861              	.LVL162:
1423:.././hal/sam4s/pmc.c **** 	i &= ~PMC_FSMR_FLPM_Msk;
 2862              	 .loc 1 1423 2 is_stmt 1 view .LVU721
 2863              	 .loc 1 1423 4 is_stmt 0 view .LVU722
 2864 0034 22F4C002 	 bic r2,r2,#6291456
 2865              	.LVL163:
1424:.././hal/sam4s/pmc.c **** 	i |= PMC_WAIT_MODE_FLASH_IDLE;
 2866              	 .loc 1 1424 2 is_stmt 1 view .LVU723
 2867              	 .loc 1 1424 4 is_stmt 0 view .LVU724
 2868 0038 42F48002 	 orr r2,r2,#4194304
 2869              	.LVL164:
1425:.././hal/sam4s/pmc.c **** 	PMC->PMC_FSMR = i;
 2870              	 .loc 1 1425 2 is_stmt 1 view .LVU725
 2871              	 .loc 1 1425 16 is_stmt 0 view .LVU726
 2872 003c 1A67     	 str r2,[r3,#112]
1426:.././hal/sam4s/pmc.c **** #endif
1427:.././hal/sam4s/pmc.c **** }
 2873              	 .loc 1 1427 1 view .LVU727
 2874 003e 7047     	 bx lr
 2875              	.L327:
 2876              	 .align 2
 2877              	.L326:
 2878 0040 00040E40 	 .word 1074660352
 2879 0044 00000000 	 .word .LANCHOR0
 2880              	 .cfi_endproc
 2881              	.LFE192:
 2883              	 .section .text.pmc_enable_backupmode,"ax",%progbits
 2884              	 .align 1
 2885              	 .global pmc_enable_backupmode
 2886              	 .syntax unified
 2887              	 .thumb
 2888              	 .thumb_func
 2889              	 .fpu softvfp
 2891              	pmc_enable_backupmode:
 2892              	.LFB193:
1428:.././hal/sam4s/pmc.c **** #else
1429:.././hal/sam4s/pmc.c **** /**
1430:.././hal/sam4s/pmc.c ****  * \brief Enable Wait Mode. Enter condition: WFE + (SLEEPDEEP bit = 0) +
1431:.././hal/sam4s/pmc.c ****  * (LPM bit = 1)
1432:.././hal/sam4s/pmc.c ****  */
1433:.././hal/sam4s/pmc.c **** void pmc_enable_waitmode(void)
1434:.././hal/sam4s/pmc.c **** {
1435:.././hal/sam4s/pmc.c **** 	uint32_t i;
1436:.././hal/sam4s/pmc.c **** 
1437:.././hal/sam4s/pmc.c **** 	PMC->PMC_FSMR |= PMC_FSMR_LPM; /* Enter Wait mode */
1438:.././hal/sam4s/pmc.c **** 	SCB->SCR &= (uint32_t) ~ SCB_SCR_SLEEPDEEP_Msk; /* Deep sleep */
1439:.././hal/sam4s/pmc.c **** 
1440:.././hal/sam4s/pmc.c **** 	__DSB();
1441:.././hal/sam4s/pmc.c **** 	__WFE();
1442:.././hal/sam4s/pmc.c **** 
1443:.././hal/sam4s/pmc.c **** 	/* Waiting for MOSCRCEN bit cleared is strongly recommended
1444:.././hal/sam4s/pmc.c **** 	 * to ensure that the core will not execute undesired instructions
1445:.././hal/sam4s/pmc.c **** 	 */
1446:.././hal/sam4s/pmc.c **** 	for (i = 0; i < 500; i++) {
1447:.././hal/sam4s/pmc.c **** 		__NOP();
1448:.././hal/sam4s/pmc.c **** 	}
1449:.././hal/sam4s/pmc.c **** 	while (!(PMC->CKGR_MOR & CKGR_MOR_MOSCRCEN));
1450:.././hal/sam4s/pmc.c **** 
1451:.././hal/sam4s/pmc.c **** }
1452:.././hal/sam4s/pmc.c **** #endif
1453:.././hal/sam4s/pmc.c **** 
1454:.././hal/sam4s/pmc.c **** #if (!(SAMG51 || SAMG53 || SAMG54))
1455:.././hal/sam4s/pmc.c **** /**
1456:.././hal/sam4s/pmc.c ****  * \brief Enable Backup Mode. Enter condition: WFE/(VROFF bit = 1) +
1457:.././hal/sam4s/pmc.c ****  * (SLEEPDEEP bit = 1)
1458:.././hal/sam4s/pmc.c ****  */
1459:.././hal/sam4s/pmc.c **** void pmc_enable_backupmode(void)
1460:.././hal/sam4s/pmc.c **** {
 2893              	 .loc 1 1460 1 is_stmt 1 view-0
 2894              	 .cfi_startproc
 2895              	 
 2896              	 
 2897              	 
1461:.././hal/sam4s/pmc.c **** #if (SAM4C || SAM4CM || SAM4CP)
1462:.././hal/sam4s/pmc.c **** 	uint32_t tmp = SUPC->SUPC_MR & ~(SUPC_MR_BUPPOREN | SUPC_MR_KEY_Msk);
1463:.././hal/sam4s/pmc.c **** 	SUPC->SUPC_MR = tmp | SUPC_MR_KEY_PASSWD;
1464:.././hal/sam4s/pmc.c **** 	while (SUPC->SUPC_SR & SUPC_SR_BUPPORS);
1465:.././hal/sam4s/pmc.c **** #endif
1466:.././hal/sam4s/pmc.c **** 	SCB->SCR |= SCB_SCR_SLEEPDEEP_Msk;
 2898              	 .loc 1 1466 2 view .LVU729
 2899              	 .loc 1 1466 11 is_stmt 0 view .LVU730
 2900 0000 064A     	 ldr r2,.L329
 2901 0002 1369     	 ldr r3,[r2,#16]
 2902 0004 43F00403 	 orr r3,r3,#4
 2903 0008 1361     	 str r3,[r2,#16]
1467:.././hal/sam4s/pmc.c **** #if (SAM4S || SAM4E || SAM4N || SAM4C || SAM4CM || SAM4CP || SAMG55 || SAMV71 || SAMV70 || SAME70 |
1468:.././hal/sam4s/pmc.c **** 	SUPC->SUPC_CR = SUPC_CR_KEY_PASSWD | SUPC_CR_VROFF_STOP_VREG;
 2904              	 .loc 1 1468 2 is_stmt 1 view .LVU731
 2905              	 .loc 1 1468 16 is_stmt 0 view .LVU732
 2906 000a 054B     	 ldr r3,.L329+4
 2907 000c 054A     	 ldr r2,.L329+8
 2908 000e 1A61     	 str r2,[r3,#16]
1469:.././hal/sam4s/pmc.c **** 	uint32_t ul_dummy = SUPC->SUPC_MR;
 2909              	 .loc 1 1469 2 is_stmt 1 view .LVU733
 2910              	 .loc 1 1469 11 is_stmt 0 view .LVU734
 2911 0010 9B69     	 ldr r3,[r3,#24]
1470:.././hal/sam4s/pmc.c **** 	UNUSED(ul_dummy);
 2912              	 .loc 1 1470 2 is_stmt 1 view .LVU735
1471:.././hal/sam4s/pmc.c **** 	__DSB();
 2913              	 .loc 1 1471 2 view .LVU736
 2914              	.LBB38:
 2915              	.LBI38:
 443:.././hal/sam4s/inc/core_cmInstr.h **** {
 2916              	 .loc 2 443 57 view .LVU737
 2917              	.LBB39:
 2918              	 .loc 2 445 3 view .LVU738
 2919              	 .syntax unified
 2920              	
 2921 0012 BFF34F8F 	 dsb
 2922              	
 2923              	 .thumb
 2924              	 .syntax unified
 2925              	.LBE39:
 2926              	.LBE38:
1472:.././hal/sam4s/pmc.c **** 	__WFE();
 2927              	 .loc 1 1472 2 view .LVU739
 2928              	.LBB40:
 2929              	.LBI40:
 410:.././hal/sam4s/inc/core_cmInstr.h **** {
 2930              	 .loc 2 410 57 view .LVU740
 2931              	.LBB41:
 412:.././hal/sam4s/inc/core_cmInstr.h **** }
 2932              	 .loc 2 412 3 view .LVU741
 2933              	 .syntax unified
 2934              	
 2935 0016 20BF     	 wfe
 2936              	
 2937              	 .thumb
 2938              	 .syntax unified
 2939              	.LBE41:
 2940              	.LBE40:
1473:.././hal/sam4s/pmc.c **** 	__WFI();
 2941              	 .loc 1 1473 2 view .LVU742
 2942              	.LBB42:
 2943              	.LBI42:
 399:.././hal/sam4s/inc/core_cmInstr.h **** {
 2944              	 .loc 2 399 57 view .LVU743
 2945              	.LBB43:
 401:.././hal/sam4s/inc/core_cmInstr.h **** }
 2946              	 .loc 2 401 3 view .LVU744
 2947              	 .syntax unified
 2948              	
 2949 0018 30BF     	 wfi
 2950              	
 2951              	 .thumb
 2952              	 .syntax unified
 2953              	.LBE43:
 2954              	.LBE42:
1474:.././hal/sam4s/pmc.c **** #else
1475:.././hal/sam4s/pmc.c **** 	__DSB();
1476:.././hal/sam4s/pmc.c **** 	__WFE();
1477:.././hal/sam4s/pmc.c **** #endif
1478:.././hal/sam4s/pmc.c **** }
 2955              	 .loc 1 1478 1 is_stmt 0 view .LVU745
 2956 001a 7047     	 bx lr
 2957              	.L330:
 2958              	 .align 2
 2959              	.L329:
 2960 001c 00ED00E0 	 .word -536810240
 2961 0020 00140E40 	 .word 1074664448
 2962 0024 040000A5 	 .word -1526726652
 2963              	 .cfi_endproc
 2964              	.LFE193:
 2966              	 .section .text.pmc_enable_clock_failure_detector,"ax",%progbits
 2967              	 .align 1
 2968              	 .global pmc_enable_clock_failure_detector
 2969              	 .syntax unified
 2970              	 .thumb
 2971              	 .thumb_func
 2972              	 .fpu softvfp
 2974              	pmc_enable_clock_failure_detector:
 2975              	.LFB194:
1479:.././hal/sam4s/pmc.c **** #endif
1480:.././hal/sam4s/pmc.c **** 
1481:.././hal/sam4s/pmc.c **** /**
1482:.././hal/sam4s/pmc.c ****  * \brief Enable Clock Failure Detector.
1483:.././hal/sam4s/pmc.c ****  */
1484:.././hal/sam4s/pmc.c **** void pmc_enable_clock_failure_detector(void)
1485:.././hal/sam4s/pmc.c **** {
 2976              	 .loc 1 1485 1 is_stmt 1 view-0
 2977              	 .cfi_startproc
 2978              	 
 2979              	 
 2980              	 
1486:.././hal/sam4s/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR;
 2981              	 .loc 1 1486 2 view .LVU747
 2982              	 .loc 1 1486 11 is_stmt 0 view .LVU748
 2983 0000 034A     	 ldr r2,.L332
 2984 0002 136A     	 ldr r3,[r2,#32]
 2985              	.LVL165:
1487:.././hal/sam4s/pmc.c **** 
1488:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | CKGR_MOR_CFDEN | ul_reg;
 2986              	 .loc 1 1488 2 is_stmt 1 view .LVU749
 2987              	 .loc 1 1488 55 is_stmt 0 view .LVU750
 2988 0004 43F00D73 	 orr r3,r3,#36962304
 2989              	.LVL166:
 2990              	 .loc 1 1488 55 view .LVU751
 2991 0008 43F44033 	 orr r3,r3,#196608
 2992              	 .loc 1 1488 16 view .LVU752
 2993 000c 1362     	 str r3,[r2,#32]
1489:.././hal/sam4s/pmc.c **** }
 2994              	 .loc 1 1489 1 view .LVU753
 2995 000e 7047     	 bx lr
 2996              	.L333:
 2997              	 .align 2
 2998              	.L332:
 2999 0010 00040E40 	 .word 1074660352
 3000              	 .cfi_endproc
 3001              	.LFE194:
 3003              	 .section .text.pmc_disable_clock_failure_detector,"ax",%progbits
 3004              	 .align 1
 3005              	 .global pmc_disable_clock_failure_detector
 3006              	 .syntax unified
 3007              	 .thumb
 3008              	 .thumb_func
 3009              	 .fpu softvfp
 3011              	pmc_disable_clock_failure_detector:
 3012              	.LFB195:
1490:.././hal/sam4s/pmc.c **** 
1491:.././hal/sam4s/pmc.c **** /**
1492:.././hal/sam4s/pmc.c ****  * \brief Disable Clock Failure Detector.
1493:.././hal/sam4s/pmc.c ****  */
1494:.././hal/sam4s/pmc.c **** void pmc_disable_clock_failure_detector(void)
1495:.././hal/sam4s/pmc.c **** {
 3013              	 .loc 1 1495 1 is_stmt 1 view-0
 3014              	 .cfi_startproc
 3015              	 
 3016              	 
 3017              	 
1496:.././hal/sam4s/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR & (~CKGR_MOR_CFDEN);
 3018              	 .loc 1 1496 2 view .LVU755
 3019              	 .loc 1 1496 23 is_stmt 0 view .LVU756
 3020 0000 034A     	 ldr r2,.L335
 3021 0002 136A     	 ldr r3,[r2,#32]
 3022              	.LVL167:
1497:.././hal/sam4s/pmc.c **** 
1498:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | ul_reg;
 3023              	 .loc 1 1498 2 is_stmt 1 view .LVU757
1496:.././hal/sam4s/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR & (~CKGR_MOR_CFDEN);
 3024              	 .loc 1 1496 11 is_stmt 0 view .LVU758
 3025 0004 23F00073 	 bic r3,r3,#33554432
 3026              	.LVL168:
 3027              	 .loc 1 1498 38 view .LVU759
 3028 0008 43F45C13 	 orr r3,r3,#3604480
 3029              	.LVL169:
 3030              	 .loc 1 1498 16 view .LVU760
 3031 000c 1362     	 str r3,[r2,#32]
1499:.././hal/sam4s/pmc.c **** }
 3032              	 .loc 1 1499 1 view .LVU761
 3033 000e 7047     	 bx lr
 3034              	.L336:
 3035              	 .align 2
 3036              	.L335:
 3037 0010 00040E40 	 .word 1074660352
 3038              	 .cfi_endproc
 3039              	.LFE195:
 3041              	 .section .text.pmc_set_writeprotect,"ax",%progbits
 3042              	 .align 1
 3043              	 .global pmc_set_writeprotect
 3044              	 .syntax unified
 3045              	 .thumb
 3046              	 .thumb_func
 3047              	 .fpu softvfp
 3049              	pmc_set_writeprotect:
 3050              	.LVL170:
 3051              	.LFB196:
1500:.././hal/sam4s/pmc.c **** 
1501:.././hal/sam4s/pmc.c **** #if (SAM4N || SAM4C || SAM4CM || SAM4CP || SAMV71 || SAMV70 || SAME70 || SAMS70)
1502:.././hal/sam4s/pmc.c **** /**
1503:.././hal/sam4s/pmc.c ****  * \brief Enable Slow Crystal Oscillator Frequency Monitoring.
1504:.././hal/sam4s/pmc.c ****  */
1505:.././hal/sam4s/pmc.c **** void pmc_enable_sclk_osc_freq_monitor(void)
1506:.././hal/sam4s/pmc.c **** {
1507:.././hal/sam4s/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR;
1508:.././hal/sam4s/pmc.c **** 
1509:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | CKGR_MOR_XT32KFME | ul_reg;
1510:.././hal/sam4s/pmc.c **** }
1511:.././hal/sam4s/pmc.c **** 
1512:.././hal/sam4s/pmc.c **** /**
1513:.././hal/sam4s/pmc.c ****  * \brief Disable Slow Crystal Oscillator Frequency Monitoring.
1514:.././hal/sam4s/pmc.c ****  */
1515:.././hal/sam4s/pmc.c **** void pmc_disable_sclk_osc_freq_monitor(void)
1516:.././hal/sam4s/pmc.c **** {
1517:.././hal/sam4s/pmc.c **** 	uint32_t ul_reg = PMC->CKGR_MOR & (~CKGR_MOR_XT32KFME);
1518:.././hal/sam4s/pmc.c **** 
1519:.././hal/sam4s/pmc.c **** 	PMC->CKGR_MOR = CKGR_MOR_KEY_PASSWD | ul_reg;
1520:.././hal/sam4s/pmc.c **** }
1521:.././hal/sam4s/pmc.c **** #endif
1522:.././hal/sam4s/pmc.c **** 
1523:.././hal/sam4s/pmc.c **** /**
1524:.././hal/sam4s/pmc.c ****  * \brief Enable or disable write protect of PMC registers.
1525:.././hal/sam4s/pmc.c ****  *
1526:.././hal/sam4s/pmc.c ****  * \param ul_enable 1 to enable, 0 to disable.
1527:.././hal/sam4s/pmc.c ****  */
1528:.././hal/sam4s/pmc.c **** void pmc_set_writeprotect(uint32_t ul_enable)
1529:.././hal/sam4s/pmc.c **** {
 3052              	 .loc 1 1529 1 is_stmt 1 view-0
 3053              	 .cfi_startproc
 3054              	 
 3055              	 
 3056              	 
1530:.././hal/sam4s/pmc.c **** 	if (ul_enable) {
 3057              	 .loc 1 1530 2 view .LVU763
 3058 0000 034B     	 ldr r3,.L341
 3059              	 .loc 1 1530 5 is_stmt 0 view .LVU764
 3060 0002 18B1     	 cbz r0,.L338
1531:.././hal/sam4s/pmc.c **** 		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD | PMC_WPMR_WPEN;
 3061              	 .loc 1 1531 3 is_stmt 1 view .LVU765
 3062              	 .loc 1 1531 17 is_stmt 0 view .LVU766
 3063 0004 034A     	 ldr r2,.L341+4
 3064              	.L340:
1532:.././hal/sam4s/pmc.c **** 	} else {
1533:.././hal/sam4s/pmc.c **** 		PMC->PMC_WPMR = PMC_WPMR_WPKEY_PASSWD;
 3065              	 .loc 1 1533 17 view .LVU767
 3066 0006 C3F8E420 	 str r2,[r3,#228]
1534:.././hal/sam4s/pmc.c **** 	}
1535:.././hal/sam4s/pmc.c **** }
 3067              	 .loc 1 1535 1 view .LVU768
 3068 000a 7047     	 bx lr
 3069              	.L338:
1533:.././hal/sam4s/pmc.c **** 	}
 3070              	 .loc 1 1533 3 is_stmt 1 view .LVU769
1533:.././hal/sam4s/pmc.c **** 	}
 3071              	 .loc 1 1533 17 is_stmt 0 view .LVU770
 3072 000c 024A     	 ldr r2,.L341+8
 3073 000e FAE7     	 b .L340
 3074              	.L342:
 3075              	 .align 2
 3076              	.L341:
 3077 0010 00040E40 	 .word 1074660352
 3078 0014 01434D50 	 .word 1347240705
 3079 0018 00434D50 	 .word 1347240704
 3080              	 .cfi_endproc
 3081              	.LFE196:
 3083              	 .section .text.pmc_get_writeprotect_status,"ax",%progbits
 3084              	 .align 1
 3085              	 .global pmc_get_writeprotect_status
 3086              	 .syntax unified
 3087              	 .thumb
 3088              	 .thumb_func
 3089              	 .fpu softvfp
 3091              	pmc_get_writeprotect_status:
 3092              	.LFB197:
1536:.././hal/sam4s/pmc.c **** 
1537:.././hal/sam4s/pmc.c **** /**
1538:.././hal/sam4s/pmc.c ****  * \brief Return write protect status.
1539:.././hal/sam4s/pmc.c ****  *
1540:.././hal/sam4s/pmc.c ****  * \return Return write protect status.
1541:.././hal/sam4s/pmc.c ****  */
1542:.././hal/sam4s/pmc.c **** uint32_t pmc_get_writeprotect_status(void)
1543:.././hal/sam4s/pmc.c **** {
 3093              	 .loc 1 1543 1 is_stmt 1 view-0
 3094              	 .cfi_startproc
 3095              	 
 3096              	 
 3097              	 
1544:.././hal/sam4s/pmc.c **** 	return PMC->PMC_WPSR;
 3098              	 .loc 1 1544 2 view .LVU772
 3099              	 .loc 1 1544 12 is_stmt 0 view .LVU773
 3100 0000 014B     	 ldr r3,.L344
 3101 0002 D3F8E800 	 ldr r0,[r3,#232]
1545:.././hal/sam4s/pmc.c **** }
 3102              	 .loc 1 1545 1 view .LVU774
 3103 0006 7047     	 bx lr
 3104              	.L345:
 3105              	 .align 2
 3106              	.L344:
 3107 0008 00040E40 	 .word 1074660352
 3108              	 .cfi_endproc
 3109              	.LFE197:
 3111              	 .section .bss.cpu_irq_critical_section_counter,"aw",%nobits
 3112              	 .align 2
 3115              	cpu_irq_critical_section_counter:
 3116 0000 00000000 	 .space 4
 3117              	 .section .bss.cpu_irq_prev_interrupt_state,"aw",%nobits
 3120              	cpu_irq_prev_interrupt_state:
 3121 0000 00       	 .space 1
 3122              	 .section .data.ul_flash_in_wait_mode,"aw"
 3123              	 .align 2
 3124              	 .set .LANCHOR0,.+0
 3127              	ul_flash_in_wait_mode:
 3128 0000 00002000 	 .word 2097152
 3129              	 .text
 3130              	.Letext0:
 3131              	 .file 3 "c:\\chipwh~2\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 3132              	 .file 4 "c:\\chipwh~2\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 3133              	 .file 5 ".././hal/sam4s/inc/core_cm4.h"
 3134              	 .file 6 ".././hal/sam4s/inc/component/component_pmc.h"
 3135              	 .file 7 ".././hal/sam4s/inc/component/component_supc.h"
 3136              	 .file 8 ".././hal/sam4s/inc/interrupt/interrupt_sam_nvic.h"
DEFINED SYMBOLS
                            *ABS*:00000000 pmc.c
    {standard input}:16     .text.pmc_mck_set_prescaler:00000000 $t
    {standard input}:24     .text.pmc_mck_set_prescaler:00000000 pmc_mck_set_prescaler
    {standard input}:57     .text.pmc_mck_set_prescaler:00000014 $d
    {standard input}:62     .text.pmc_mck_set_source:00000000 $t
    {standard input}:69     .text.pmc_mck_set_source:00000000 pmc_mck_set_source
    {standard input}:101    .text.pmc_mck_set_source:00000014 $d
    {standard input}:106    .text.pmc_switch_mck_to_sclk:00000000 $t
    {standard input}:113    .text.pmc_switch_mck_to_sclk:00000000 pmc_switch_mck_to_sclk
    {standard input}:194    .text.pmc_switch_mck_to_sclk:0000003c $d
    {standard input}:199    .text.pmc_switch_mck_to_mainck:00000000 $t
    {standard input}:206    .text.pmc_switch_mck_to_mainck:00000000 pmc_switch_mck_to_mainck
    {standard input}:289    .text.pmc_switch_mck_to_mainck:00000040 $d
    {standard input}:294    .text.pmc_switch_mck_to_pllack:00000000 $t
    {standard input}:301    .text.pmc_switch_mck_to_pllack:00000000 pmc_switch_mck_to_pllack
    {standard input}:382    .text.pmc_switch_mck_to_pllack:00000040 $d
    {standard input}:387    .text.pmc_switch_mck_to_pllbck:00000000 $t
    {standard input}:394    .text.pmc_switch_mck_to_pllbck:00000000 pmc_switch_mck_to_pllbck
    {standard input}:473    .text.pmc_switch_mck_to_pllbck:0000003c $d
    {standard input}:478    .text.pmc_switch_sclk_to_32kxtal:00000000 $t
    {standard input}:485    .text.pmc_switch_sclk_to_32kxtal:00000000 pmc_switch_sclk_to_32kxtal
    {standard input}:513    .text.pmc_switch_sclk_to_32kxtal:00000018 $d
    {standard input}:519    .text.pmc_osc_is_ready_32kxtal:00000000 $t
    {standard input}:526    .text.pmc_osc_is_ready_32kxtal:00000000 pmc_osc_is_ready_32kxtal
    {standard input}:550    .text.pmc_osc_is_ready_32kxtal:00000018 $d
    {standard input}:555    .text.pmc_switch_mainck_to_fastrc:00000000 $t
    {standard input}:562    .text.pmc_switch_mainck_to_fastrc:00000000 pmc_switch_mainck_to_fastrc
    {standard input}:620    .text.pmc_switch_mainck_to_fastrc:00000040 $d
    {standard input}:625    .text.pmc_osc_enable_fastrc:00000000 $t
    {standard input}:632    .text.pmc_osc_enable_fastrc:00000000 pmc_osc_enable_fastrc
    {standard input}:681    .text.pmc_osc_enable_fastrc:00000030 $d
    {standard input}:686    .text.pmc_osc_disable_fastrc:00000000 $t
    {standard input}:693    .text.pmc_osc_disable_fastrc:00000000 pmc_osc_disable_fastrc
    {standard input}:715    .text.pmc_osc_disable_fastrc:00000014 $d
    {standard input}:720    .text.pmc_osc_is_ready_fastrc:00000000 $t
    {standard input}:727    .text.pmc_osc_is_ready_fastrc:00000000 pmc_osc_is_ready_fastrc
    {standard input}:744    .text.pmc_osc_is_ready_fastrc:0000000c $d
    {standard input}:749    .text.pmc_osc_enable_main_xtal:00000000 $t
    {standard input}:756    .text.pmc_osc_enable_main_xtal:00000000 pmc_osc_enable_main_xtal
    {standard input}:800    .text.pmc_osc_enable_main_xtal:00000020 $d
    {standard input}:805    .text.pmc_osc_bypass_main_xtal:00000000 $t
    {standard input}:812    .text.pmc_osc_bypass_main_xtal:00000000 pmc_osc_bypass_main_xtal
    {standard input}:843    .text.pmc_osc_bypass_main_xtal:00000014 $d
    {standard input}:848    .text.pmc_osc_disable_main_xtal:00000000 $t
    {standard input}:855    .text.pmc_osc_disable_main_xtal:00000000 pmc_osc_disable_main_xtal
    {standard input}:882    .text.pmc_osc_disable_main_xtal:00000010 $d
    {standard input}:887    .text.pmc_osc_is_bypassed_main_xtal:00000000 $t
    {standard input}:894    .text.pmc_osc_is_bypassed_main_xtal:00000000 pmc_osc_is_bypassed_main_xtal
    {standard input}:911    .text.pmc_osc_is_bypassed_main_xtal:0000000c $d
    {standard input}:916    .text.pmc_osc_is_ready_main_xtal:00000000 $t
    {standard input}:923    .text.pmc_osc_is_ready_main_xtal:00000000 pmc_osc_is_ready_main_xtal
    {standard input}:940    .text.pmc_osc_is_ready_main_xtal:0000000c $d
    {standard input}:945    .text.pmc_switch_mainck_to_xtal:00000000 $t
    {standard input}:952    .text.pmc_switch_mainck_to_xtal:00000000 pmc_switch_mainck_to_xtal
    {standard input}:1019   .text.pmc_switch_mainck_to_xtal:00000040 $d
    {standard input}:1026   .text.pmc_osc_disable_xtal:00000000 $t
    {standard input}:1033   .text.pmc_osc_disable_xtal:00000000 pmc_osc_disable_xtal
    {standard input}:1067   .text.pmc_osc_disable_xtal:0000001c $d
    {standard input}:1072   .text.pmc_osc_is_ready_mainck:00000000 $t
    {standard input}:1079   .text.pmc_osc_is_ready_mainck:00000000 pmc_osc_is_ready_mainck
    {standard input}:1096   .text.pmc_osc_is_ready_mainck:0000000c $d
    {standard input}:1101   .text.pmc_mainck_osc_select:00000000 $t
    {standard input}:1108   .text.pmc_mainck_osc_select:00000000 pmc_mainck_osc_select
    {standard input}:1148   .text.pmc_mainck_osc_select:00000018 $d
    {standard input}:1153   .text.pmc_enable_pllack:00000000 $t
    {standard input}:1160   .text.pmc_enable_pllack:00000000 pmc_enable_pllack
    {standard input}:1234   .text.pmc_enable_pllack:00000028 $d
    {standard input}:1240   .text.pmc_disable_pllack:00000000 $t
    {standard input}:1247   .text.pmc_disable_pllack:00000000 pmc_disable_pllack
    {standard input}:1264   .text.pmc_disable_pllack:0000000c $d
    {standard input}:1269   .text.pmc_is_locked_pllack:00000000 $t
    {standard input}:1276   .text.pmc_is_locked_pllack:00000000 pmc_is_locked_pllack
    {standard input}:1293   .text.pmc_is_locked_pllack:0000000c $d
    {standard input}:1298   .text.pmc_enable_pllbck:00000000 $t
    {standard input}:1305   .text.pmc_enable_pllbck:00000000 pmc_enable_pllbck
    {standard input}:1372   .text.pmc_enable_pllbck:00000024 $d
    {standard input}:1378   .text.pmc_disable_pllbck:00000000 $t
    {standard input}:1385   .text.pmc_disable_pllbck:00000000 pmc_disable_pllbck
    {standard input}:1402   .text.pmc_disable_pllbck:00000008 $d
    {standard input}:1407   .text.pmc_is_locked_pllbck:00000000 $t
    {standard input}:1414   .text.pmc_is_locked_pllbck:00000000 pmc_is_locked_pllbck
    {standard input}:1431   .text.pmc_is_locked_pllbck:0000000c $d
    {standard input}:1436   .text.pmc_enable_periph_clk:00000000 $t
    {standard input}:1443   .text.pmc_enable_periph_clk:00000000 pmc_enable_periph_clk
    {standard input}:1508   .text.pmc_enable_periph_clk:0000003c $d
    {standard input}:1513   .text.pmc_disable_periph_clk:00000000 $t
    {standard input}:1520   .text.pmc_disable_periph_clk:00000000 pmc_disable_periph_clk
    {standard input}:1585   .text.pmc_disable_periph_clk:0000003c $d
    {standard input}:1590   .text.pmc_enable_all_periph_clk:00000000 $t
    {standard input}:1597   .text.pmc_enable_all_periph_clk:00000000 pmc_enable_all_periph_clk
    {standard input}:1638   .text.pmc_enable_all_periph_clk:00000024 $d
    {standard input}:1643   .text.pmc_disable_all_periph_clk:00000000 $t
    {standard input}:1650   .text.pmc_disable_all_periph_clk:00000000 pmc_disable_all_periph_clk
    {standard input}:1689   .text.pmc_disable_all_periph_clk:00000024 $d
    {standard input}:1694   .text.pmc_is_periph_clk_enabled:00000000 $t
    {standard input}:1701   .text.pmc_is_periph_clk_enabled:00000000 pmc_is_periph_clk_enabled
    {standard input}:1762   .text.pmc_is_periph_clk_enabled:00000038 $d
    {standard input}:1767   .text.pmc_pck_set_prescaler:00000000 $t
    {standard input}:1774   .text.pmc_pck_set_prescaler:00000000 pmc_pck_set_prescaler
    {standard input}:1822   .text.pmc_pck_set_prescaler:00000028 $d
    {standard input}:1827   .text.pmc_pck_set_source:00000000 $t
    {standard input}:1834   .text.pmc_pck_set_source:00000000 pmc_pck_set_source
    {standard input}:1882   .text.pmc_pck_set_source:00000028 $d
    {standard input}:1887   .text.pmc_switch_pck_to_sclk:00000000 $t
    {standard input}:1894   .text.pmc_switch_pck_to_sclk:00000000 pmc_switch_pck_to_sclk
    {standard input}:1941   .text.pmc_switch_pck_to_sclk:00000028 $d
    {standard input}:1946   .text.pmc_switch_pck_to_mainck:00000000 $t
    {standard input}:1953   .text.pmc_switch_pck_to_mainck:00000000 pmc_switch_pck_to_mainck
    {standard input}:2004   .text.pmc_switch_pck_to_mainck:0000002c $d
    {standard input}:2009   .text.pmc_switch_pck_to_pllack:00000000 $t
    {standard input}:2016   .text.pmc_switch_pck_to_pllack:00000000 pmc_switch_pck_to_pllack
    {standard input}:2067   .text.pmc_switch_pck_to_pllack:0000002c $d
    {standard input}:2072   .text.pmc_switch_pck_to_pllbck:00000000 $t
    {standard input}:2079   .text.pmc_switch_pck_to_pllbck:00000000 pmc_switch_pck_to_pllbck
    {standard input}:2130   .text.pmc_switch_pck_to_pllbck:0000002c $d
    {standard input}:2135   .text.pmc_switch_pck_to_mck:00000000 $t
    {standard input}:2142   .text.pmc_switch_pck_to_mck:00000000 pmc_switch_pck_to_mck
    {standard input}:2193   .text.pmc_switch_pck_to_mck:0000002c $d
    {standard input}:2198   .text.pmc_enable_pck:00000000 $t
    {standard input}:2205   .text.pmc_enable_pck:00000000 pmc_enable_pck
    {standard input}:2226   .text.pmc_enable_pck:0000000c $d
    {standard input}:2231   .text.pmc_disable_pck:00000000 $t
    {standard input}:2238   .text.pmc_disable_pck:00000000 pmc_disable_pck
    {standard input}:2259   .text.pmc_disable_pck:0000000c $d
    {standard input}:2264   .text.pmc_enable_all_pck:00000000 $t
    {standard input}:2271   .text.pmc_enable_all_pck:00000000 pmc_enable_all_pck
    {standard input}:2288   .text.pmc_enable_all_pck:0000000c $d
    {standard input}:2293   .text.pmc_disable_all_pck:00000000 $t
    {standard input}:2300   .text.pmc_disable_all_pck:00000000 pmc_disable_all_pck
    {standard input}:2317   .text.pmc_disable_all_pck:0000000c $d
    {standard input}:2322   .text.pmc_is_pck_enabled:00000000 $t
    {standard input}:2329   .text.pmc_is_pck_enabled:00000000 pmc_is_pck_enabled
    {standard input}:2359   .text.pmc_is_pck_enabled:00000018 $d
    {standard input}:2364   .text.pmc_switch_udpck_to_pllack:00000000 $t
    {standard input}:2371   .text.pmc_switch_udpck_to_pllack:00000000 pmc_switch_udpck_to_pllack
    {standard input}:2394   .text.pmc_switch_udpck_to_pllack:0000000c $d
    {standard input}:2399   .text.pmc_switch_udpck_to_pllbck:00000000 $t
    {standard input}:2406   .text.pmc_switch_udpck_to_pllbck:00000000 pmc_switch_udpck_to_pllbck
    {standard input}:2431   .text.pmc_switch_udpck_to_pllbck:00000010 $d
    {standard input}:2436   .text.pmc_enable_udpck:00000000 $t
    {standard input}:2443   .text.pmc_enable_udpck:00000000 pmc_enable_udpck
    {standard input}:2460   .text.pmc_enable_udpck:00000008 $d
    {standard input}:2465   .text.pmc_disable_udpck:00000000 $t
    {standard input}:2472   .text.pmc_disable_udpck:00000000 pmc_disable_udpck
    {standard input}:2489   .text.pmc_disable_udpck:00000008 $d
    {standard input}:2494   .text.pmc_enable_interrupt:00000000 $t
    {standard input}:2501   .text.pmc_enable_interrupt:00000000 pmc_enable_interrupt
    {standard input}:2518   .text.pmc_enable_interrupt:00000008 $d
    {standard input}:2523   .text.pmc_disable_interrupt:00000000 $t
    {standard input}:2530   .text.pmc_disable_interrupt:00000000 pmc_disable_interrupt
    {standard input}:2547   .text.pmc_disable_interrupt:00000008 $d
    {standard input}:2552   .text.pmc_get_interrupt_mask:00000000 $t
    {standard input}:2559   .text.pmc_get_interrupt_mask:00000000 pmc_get_interrupt_mask
    {standard input}:2575   .text.pmc_get_interrupt_mask:00000008 $d
    {standard input}:2580   .text.pmc_get_status:00000000 $t
    {standard input}:2587   .text.pmc_get_status:00000000 pmc_get_status
    {standard input}:2603   .text.pmc_get_status:00000008 $d
    {standard input}:2608   .text.pmc_set_fast_startup_input:00000000 $t
    {standard input}:2615   .text.pmc_set_fast_startup_input:00000000 pmc_set_fast_startup_input
    {standard input}:2639   .text.pmc_set_fast_startup_input:00000010 $d
    {standard input}:2644   .text.pmc_clr_fast_startup_input:00000000 $t
    {standard input}:2651   .text.pmc_clr_fast_startup_input:00000000 pmc_clr_fast_startup_input
    {standard input}:2675   .text.pmc_clr_fast_startup_input:00000010 $d
    {standard input}:2680   .text.pmc_enable_sleepmode:00000000 $t
    {standard input}:2687   .text.pmc_enable_sleepmode:00000000 pmc_enable_sleepmode
    {standard input}:2736   .text.pmc_enable_sleepmode:00000014 $d
    {standard input}:2741   .text.pmc_set_flash_in_wait_mode:00000000 $t
    {standard input}:2748   .text.pmc_set_flash_in_wait_mode:00000000 pmc_set_flash_in_wait_mode
    {standard input}:2765   .text.pmc_set_flash_in_wait_mode:00000008 $d
    {standard input}:2770   .text.pmc_enable_waitmode:00000000 $t
    {standard input}:2777   .text.pmc_enable_waitmode:00000000 pmc_enable_waitmode
    {standard input}:2878   .text.pmc_enable_waitmode:00000040 $d
    {standard input}:2884   .text.pmc_enable_backupmode:00000000 $t
    {standard input}:2891   .text.pmc_enable_backupmode:00000000 pmc_enable_backupmode
    {standard input}:2960   .text.pmc_enable_backupmode:0000001c $d
    {standard input}:2967   .text.pmc_enable_clock_failure_detector:00000000 $t
    {standard input}:2974   .text.pmc_enable_clock_failure_detector:00000000 pmc_enable_clock_failure_detector
    {standard input}:2999   .text.pmc_enable_clock_failure_detector:00000010 $d
    {standard input}:3004   .text.pmc_disable_clock_failure_detector:00000000 $t
    {standard input}:3011   .text.pmc_disable_clock_failure_detector:00000000 pmc_disable_clock_failure_detector
    {standard input}:3037   .text.pmc_disable_clock_failure_detector:00000010 $d
    {standard input}:3042   .text.pmc_set_writeprotect:00000000 $t
    {standard input}:3049   .text.pmc_set_writeprotect:00000000 pmc_set_writeprotect
    {standard input}:3077   .text.pmc_set_writeprotect:00000010 $d
    {standard input}:3084   .text.pmc_get_writeprotect_status:00000000 $t
    {standard input}:3091   .text.pmc_get_writeprotect_status:00000000 pmc_get_writeprotect_status
    {standard input}:3107   .text.pmc_get_writeprotect_status:00000008 $d
    {standard input}:3112   .bss.cpu_irq_critical_section_counter:00000000 $d
    {standard input}:3115   .bss.cpu_irq_critical_section_counter:00000000 cpu_irq_critical_section_counter
    {standard input}:3120   .bss.cpu_irq_prev_interrupt_state:00000000 cpu_irq_prev_interrupt_state
    {standard input}:3121   .bss.cpu_irq_prev_interrupt_state:00000000 $d
    {standard input}:3123   .data.ul_flash_in_wait_mode:00000000 $d
    {standard input}:3127   .data.ul_flash_in_wait_mode:00000000 ul_flash_in_wait_mode
                           .group:00000000 wm4.0.545a0e1134fc651afe6e71660705947f
                           .group:00000000 wm4.stddef.h.39.27677723d43e5b5a7afdf8d798429f1d
                           .group:00000000 wm4.parts.h.38.09ccce703cc30b12360b0e797fac8cb6
                           .group:00000000 wm4.tpaste.h.38.f9caafafc33cddaf7097f68661fce374
                           .group:00000000 wm4.stringz.h.38.451b1c9629f877d07c6b3529fe5b37b2
                           .group:00000000 wm4.mrepeat.h.52.224450943b2762ae34ad2cae2fa96ad2
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam4s2b.h.221.db99b1f5dbb5d4301dbbbaff13b63e70
                           .group:00000000 wm4.core_cm4.h.43.9593ac0dcec24a3a6f1d638d754e90b2
                           .group:00000000 wm4.core_cmInstr.h.39.53f0cdf363d7ba01993152fdcb6be5d3
                           .group:00000000 wm4.core_cmSimd.h.43.c355993beb49ccd10586af5b1cfe5aee
                           .group:00000000 wm4.core_cm4.h.201.504dd1a6bdf57a6296d26f255ae618b9
                           .group:00000000 wm4.component_acc.h.36.308f7d4c1685c8ebd00910c37bbeab26
                           .group:00000000 wm4.component_adc.h.36.b8477219496e42be1d01ccb1b6f6b02b
                           .group:00000000 wm4.component_chipid.h.36.cb4a4222aca9bee8d01f4aa49afe4d6d
                           .group:00000000 wm4.component_crccu.h.36.1d71ce61706000275b271d03beaec6d2
                           .group:00000000 wm4.component_dacc.h.36.0b87b1e719912b5885bdf9531e0e43d6
                           .group:00000000 wm4.component_efc.h.36.a6b4458c43d27669aaa6147006e1eb74
                           .group:00000000 wm4.component_gpbr.h.36.595122ea9c79505c4e73c9e7421802a8
                           .group:00000000 wm4.component_hsmci.h.36.ccf6dd1a128877835aec3d40c12745dd
                           .group:00000000 wm4.component_matrix.h.36.8f1d7aeed86a08ab4d936e5a0f026440
                           .group:00000000 wm4.component_pdc.h.36.363e6546b41ce8a14a922d18930df184
                           .group:00000000 wm4.component_pio.h.36.f033c3341fbeea7d2a04545c9a72bd24
                           .group:00000000 wm4.component_pmc.h.36.2771b76afbda6351cb4cf4c6708887d5
                           .group:00000000 wm4.component_pwm.h.36.0cd735c74e99ef7d330cb87d1f16c213
                           .group:00000000 wm4.component_rstc.h.36.1af4b8140176d86bc0af5b861fd3a623
                           .group:00000000 wm4.component_rtc.h.36.c865407d28492a40a128dee548893efe
                           .group:00000000 wm4.component_rtt.h.36.46adad6456893b38ef49ae9a2d0afea1
                           .group:00000000 wm4.component_spi.h.36.a18850bcdd90fcb2d130155fa94829ea
                           .group:00000000 wm4.component_ssc.h.36.6ffc46b5a0a9219bd5c90b3f63510b0f
                           .group:00000000 wm4.component_supc.h.36.0db4554695c6e864e5338e4faca84d88
                           .group:00000000 wm4.component_tc.h.36.af47419b07ade32b2d1423414983d2f7
                           .group:00000000 wm4.component_twi.h.36.3496bc3884f63f906fd446649da75de1
                           .group:00000000 wm4.component_uart.h.36.74e9355d463b56860c56764a9be37213
                           .group:00000000 wm4.component_udp.h.36.8cb9530d4bf5319aabe6158f5e738b3d
                           .group:00000000 wm4.component_usart.h.36.5e91c114006f7b551a45955ae29cb6cf
                           .group:00000000 wm4.component_wdt.h.36.277adc27b017beabbb9f7b11b0fa46f2
                           .group:00000000 wm4.instance_hsmci.h.36.9855cb84ff287cffb479099857800873
                           .group:00000000 wm4.instance_ssc.h.36.630afe78e802d5fc05c6224c23890fe1
                           .group:00000000 wm4.instance_spi.h.36.325bf539a06b58ad3327698a7ef68d81
                           .group:00000000 wm4.instance_tc0.h.36.fbfa021f96aebd3d46fa1937156b0b0a
                           .group:00000000 wm4.instance_twi0.h.36.13a0f0822f7bd9074e9b846b04ed10b9
                           .group:00000000 wm4.instance_twi1.h.36.6c6b55c3fab76b3818eb5314bf7bc410
                           .group:00000000 wm4.instance_pwm.h.36.1b555f9fd14d69df968818a3882b2cde
                           .group:00000000 wm4.instance_usart0.h.36.3b6138f7be7c01038525724f6c5d6c1e
                           .group:00000000 wm4.instance_usart1.h.36.137c36ec170c7ca2c1f8e046f5d0e0c9
                           .group:00000000 wm4.instance_udp.h.36.b94eabb27893117a74b4d6faebd80bc6
                           .group:00000000 wm4.instance_adc.h.36.84184448551cb0a3c52160d178904d14
                           .group:00000000 wm4.instance_dacc.h.36.28a68c12285ab1a6b24d06876c4b8807
                           .group:00000000 wm4.instance_acc.h.36.71d96a8f2214f8a9d18eec4d2d93f130
                           .group:00000000 wm4.instance_crccu.h.36.549cca511b407ab33982b56bae0c25ac
                           .group:00000000 wm4.instance_matrix.h.36.da03b47f7e819cfcead8ef1cd71b60ce
                           .group:00000000 wm4.instance_pmc.h.36.002f4765e9f18dc4b183b779163ab06e
                           .group:00000000 wm4.instance_uart0.h.36.fa62b2ed6ce17806cd77556aa65a73f5
                           .group:00000000 wm4.instance_chipid.h.36.6f5f676d52e3e21dba5d88a4bb87d922
                           .group:00000000 wm4.instance_uart1.h.36.bc11f9c4189a4ac15cce81cf9f40fcf9
                           .group:00000000 wm4.instance_efc0.h.36.67a3a70e962ac1d6ef8fcee0e9fd4a9b
                           .group:00000000 wm4.instance_pioa.h.36.27d92aa6d00d8b6a2b34acdeee1aa60a
                           .group:00000000 wm4.instance_piob.h.36.b0f95d3fb66ff01bcd91fb6a4cb54dc3
                           .group:00000000 wm4.instance_rstc.h.36.f8bcddbd3310cbb6a39c155e9e6b3cfb
                           .group:00000000 wm4.instance_supc.h.36.17878f57a77a9d368090917738ff3e02
                           .group:00000000 wm4.instance_rtt.h.36.8759ab7e2580c101b6db702769407cb0
                           .group:00000000 wm4.instance_wdt.h.36.ab83587b138c65dcd29a29119835b92a
                           .group:00000000 wm4.instance_rtc.h.36.52aa67a6a7c945bf00db9fb9d057e3e0
                           .group:00000000 wm4.instance_gpbr.h.36.b2cfd4dee03ed0c28ecb9eb233d2ac42
                           .group:00000000 wm4.sam4s2b.h.313.04ed20c80f538f8fadb9388a8469283e
                           .group:00000000 wm4.pio_sam4s2b.h.36.e1b33fead6a6e1ee98b2f4cba4bb11b4
                           .group:00000000 wm4.sam4s2b.h.450.98a9c8ea67d90470c8554ffe87c8398a
                           .group:00000000 wm4.newlib.h.8.7cb3972cd43265932d4782d5eb589854
                           .group:00000000 wm4.ieeefp.h.77.f33a4dce62116f6f5175ff8bae57a54c
                           .group:00000000 wm4.config.h.224.c701144a7b0518c6ee9b9b5465b79f81
                           .group:00000000 wm4._ansi.h.31.de524f58584151836e90d8620a16f8e8
                           .group:00000000 wm4.stdio.h.31.7c0e28c411445f3f9c5b11accf882760
                           .group:00000000 wm4.stddef.h.155.ba788add86a0e365f264484f110c3c29
                           .group:00000000 wm4.cdefs.h.49.3d0fe8ea14e93bda8c589d4f684b21b8
                           .group:00000000 wm4.stdarg.h.34.3a23a216c0c293b3d2ea2e89281481e6
                           .group:00000000 wm4._types.h.20.dd0d04dca3800a0d2a6129b87f3adbb2
                           .group:00000000 wm4.stddef.h.155.3588ebfdd1e8c7ede80509bb9c3b8009
                           .group:00000000 wm4._types.h.127.34941de1b2539d59d5cac00e0dd27a45
                           .group:00000000 wm4.reent.h.17.e292bf8b0bec6c96e131a54347145a30
                           .group:00000000 wm4.lock.h.2.1461d1fff82dffe8bfddc23307f6484f
                           .group:00000000 wm4.reent.h.77.dcd6129ff07fe81bd5636db29abe53b2
                           .group:00000000 wm4.types.h.40.8b6acba56cefbb11746718204edc8f5e
                           .group:00000000 wm4._endian.h.31.65a10590763c3dde1ac4a7f66d7d4891
                           .group:00000000 wm4.endian.h.9.49f3a4695c1b61e8a0808de3c4a106cb
                           .group:00000000 wm4._timeval.h.32.bec3221fa7a9bb0bdde696c9c57e47d2
                           .group:00000000 wm4.timespec.h.41.d855182eb0e690443ab8651bcedca6e1
                           .group:00000000 wm4.select.h.19.97ca6fd0c752a0f3b6719fd314d361e6
                           .group:00000000 wm4.types.h.51.5571ec98f267d17d3c670b7a3ba33afa
                           .group:00000000 wm4.sched.h.22.c60982713a5c428609783c78f9c78d95
                           .group:00000000 wm4._pthreadtypes.h.36.fcee9961c35163dde6267ef772ad1972
                           .group:00000000 wm4.stdio.h.2.4aa87247282eca6c8f36f9de33d8df1a
                           .group:00000000 wm4.stdio.h.81.932d0c162786b883f622b8d05c120c78
                           .group:00000000 wm4.stdbool.h.29.07dce69c3b78884144b7f7bd19483461
                           .group:00000000 wm4.stdlib.h.13.4ed386f5c1a80d71e72172885d946ef2
                           .group:00000000 wm4.alloca.h.8.dfc0c703c47ec3e69746825b17d9e66d
                           .group:00000000 wm4.stdlib.h.56.f4862cfbf4363a1db01842d5bdf72c18
                           .group:00000000 wm4.compiler.h.81.f75af8228a71cd19fa09df23f58333e2
                           .group:00000000 wm4.interrupt_sam_nvic.h.77.5650b866702c5f625c80d648ec551823
                           .group:00000000 wm4.compiler.h.420.b563cf39b91298e26f28e0fd38c47072
                           .group:00000000 wm4.pmc.h.51.cf1092bd15acad39e66931dccf86590c

NO UNDEFINED SYMBOLS

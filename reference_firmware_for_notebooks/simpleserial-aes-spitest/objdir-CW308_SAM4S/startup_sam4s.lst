   1              	 .cpu cortex-m4
   2              	 .eabi_attribute 20,1
   3              	 .eabi_attribute 21,1
   4              	 .eabi_attribute 23,3
   5              	 .eabi_attribute 24,1
   6              	 .eabi_attribute 25,1
   7              	 .eabi_attribute 26,1
   8              	 .eabi_attribute 30,4
   9              	 .eabi_attribute 34,1
  10              	 .eabi_attribute 18,4
  11              	 .file "startup_sam4s.c"
  12              	 .text
  13              	.Ltext0:
  14              	 .cfi_sections .debug_frame
  15              	 .section .text.Dummy_Handler,"ax",%progbits
  16              	 .align 1
  17              	 .global Dummy_Handler
  18              	 .arch armv7e-m
  19              	 .syntax unified
  20              	 .thumb
  21              	 .thumb_func
  22              	 .fpu softvfp
  24              	Dummy_Handler:
  25              	.LFB124:
  26              	 .file 1 ".././hal/sam4s/startup_sam4s.c"
   1:.././hal/sam4s/startup_sam4s.c **** /**
   2:.././hal/sam4s/startup_sam4s.c ****  * \file
   3:.././hal/sam4s/startup_sam4s.c ****  *
   4:.././hal/sam4s/startup_sam4s.c ****  * \brief Startup file for SAM4S.
   5:.././hal/sam4s/startup_sam4s.c ****  *
   6:.././hal/sam4s/startup_sam4s.c ****  * Copyright (c) 2011-2018 Microchip Technology Inc. and its subsidiaries.
   7:.././hal/sam4s/startup_sam4s.c ****  *
   8:.././hal/sam4s/startup_sam4s.c ****  * \asf_license_start
   9:.././hal/sam4s/startup_sam4s.c ****  *
  10:.././hal/sam4s/startup_sam4s.c ****  * \page License
  11:.././hal/sam4s/startup_sam4s.c ****  *
  12:.././hal/sam4s/startup_sam4s.c ****  * Subject to your compliance with these terms, you may use Microchip
  13:.././hal/sam4s/startup_sam4s.c ****  * software and any derivatives exclusively with Microchip products.
  14:.././hal/sam4s/startup_sam4s.c ****  * It is your responsibility to comply with third party license terms applicable
  15:.././hal/sam4s/startup_sam4s.c ****  * to your use of third party software (including open source software) that
  16:.././hal/sam4s/startup_sam4s.c ****  * may accompany Microchip software.
  17:.././hal/sam4s/startup_sam4s.c ****  *
  18:.././hal/sam4s/startup_sam4s.c ****  * THIS SOFTWARE IS SUPPLIED BY MICROCHIP "AS IS". NO WARRANTIES,
  19:.././hal/sam4s/startup_sam4s.c ****  * WHETHER EXPRESS, IMPLIED OR STATUTORY, APPLY TO THIS SOFTWARE,
  20:.././hal/sam4s/startup_sam4s.c ****  * INCLUDING ANY IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY,
  21:.././hal/sam4s/startup_sam4s.c ****  * AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT WILL MICROCHIP BE
  22:.././hal/sam4s/startup_sam4s.c ****  * LIABLE FOR ANY INDIRECT, SPECIAL, PUNITIVE, INCIDENTAL OR CONSEQUENTIAL
  23:.././hal/sam4s/startup_sam4s.c ****  * LOSS, DAMAGE, COST OR EXPENSE OF ANY KIND WHATSOEVER RELATED TO THE
  24:.././hal/sam4s/startup_sam4s.c ****  * SOFTWARE, HOWEVER CAUSED, EVEN IF MICROCHIP HAS BEEN ADVISED OF THE
  25:.././hal/sam4s/startup_sam4s.c ****  * POSSIBILITY OR THE DAMAGES ARE FORESEEABLE.  TO THE FULLEST EXTENT
  26:.././hal/sam4s/startup_sam4s.c ****  * ALLOWED BY LAW, MICROCHIP'S TOTAL LIABILITY ON ALL CLAIMS IN ANY WAY
  27:.././hal/sam4s/startup_sam4s.c ****  * RELATED TO THIS SOFTWARE WILL NOT EXCEED THE AMOUNT OF FEES, IF ANY,
  28:.././hal/sam4s/startup_sam4s.c ****  * THAT YOU HAVE PAID DIRECTLY TO MICROCHIP FOR THIS SOFTWARE.
  29:.././hal/sam4s/startup_sam4s.c ****  *
  30:.././hal/sam4s/startup_sam4s.c ****  * \asf_license_stop
  31:.././hal/sam4s/startup_sam4s.c ****  *
  32:.././hal/sam4s/startup_sam4s.c ****  */
  33:.././hal/sam4s/startup_sam4s.c **** /*
  34:.././hal/sam4s/startup_sam4s.c ****  * Support and FAQ: visit <a href="https://www.microchip.com/support/">Microchip Support</a>
  35:.././hal/sam4s/startup_sam4s.c ****  */
  36:.././hal/sam4s/startup_sam4s.c **** 
  37:.././hal/sam4s/startup_sam4s.c **** #include "sam4s.h"
  38:.././hal/sam4s/startup_sam4s.c **** #include "system_sam4s.h"
  39:.././hal/sam4s/startup_sam4s.c **** 
  40:.././hal/sam4s/startup_sam4s.c **** /* Initialize segments */
  41:.././hal/sam4s/startup_sam4s.c **** extern uint32_t _sfixed;
  42:.././hal/sam4s/startup_sam4s.c **** extern uint32_t _efixed;
  43:.././hal/sam4s/startup_sam4s.c **** extern uint32_t _etext;
  44:.././hal/sam4s/startup_sam4s.c **** extern uint32_t _srelocate;
  45:.././hal/sam4s/startup_sam4s.c **** extern uint32_t _erelocate;
  46:.././hal/sam4s/startup_sam4s.c **** extern uint32_t _szero;
  47:.././hal/sam4s/startup_sam4s.c **** extern uint32_t _ezero;
  48:.././hal/sam4s/startup_sam4s.c **** extern uint32_t _sstack;
  49:.././hal/sam4s/startup_sam4s.c **** extern uint32_t _estack;
  50:.././hal/sam4s/startup_sam4s.c **** 
  51:.././hal/sam4s/startup_sam4s.c **** /** \cond DOXYGEN_SHOULD_SKIP_THIS */
  52:.././hal/sam4s/startup_sam4s.c **** int main(void);
  53:.././hal/sam4s/startup_sam4s.c **** /** \endcond */
  54:.././hal/sam4s/startup_sam4s.c **** 
  55:.././hal/sam4s/startup_sam4s.c **** void __libc_init_array(void);
  56:.././hal/sam4s/startup_sam4s.c **** 
  57:.././hal/sam4s/startup_sam4s.c **** /* Default empty handler */
  58:.././hal/sam4s/startup_sam4s.c **** void Dummy_Handler(void);
  59:.././hal/sam4s/startup_sam4s.c **** 
  60:.././hal/sam4s/startup_sam4s.c **** /* Cortex-M4 core handlers */
  61:.././hal/sam4s/startup_sam4s.c **** void NMI_Handler        ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  62:.././hal/sam4s/startup_sam4s.c **** void HardFault_Handler  ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  63:.././hal/sam4s/startup_sam4s.c **** void MemManage_Handler  ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  64:.././hal/sam4s/startup_sam4s.c **** void BusFault_Handler   ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  65:.././hal/sam4s/startup_sam4s.c **** void UsageFault_Handler ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  66:.././hal/sam4s/startup_sam4s.c **** void SVC_Handler        ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  67:.././hal/sam4s/startup_sam4s.c **** void DebugMon_Handler   ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  68:.././hal/sam4s/startup_sam4s.c **** void PendSV_Handler     ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  69:.././hal/sam4s/startup_sam4s.c **** void SysTick_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  70:.././hal/sam4s/startup_sam4s.c **** 
  71:.././hal/sam4s/startup_sam4s.c **** /* Peripherals handlers */
  72:.././hal/sam4s/startup_sam4s.c **** void SUPC_Handler   ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  73:.././hal/sam4s/startup_sam4s.c **** void RSTC_Handler   ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  74:.././hal/sam4s/startup_sam4s.c **** void RTC_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  75:.././hal/sam4s/startup_sam4s.c **** void RTT_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  76:.././hal/sam4s/startup_sam4s.c **** void WDT_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  77:.././hal/sam4s/startup_sam4s.c **** void PMC_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  78:.././hal/sam4s/startup_sam4s.c **** void EFC0_Handler   ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  79:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_EFC1_INSTANCE_
  80:.././hal/sam4s/startup_sam4s.c **** void EFC1_Handler   ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  81:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_EFC1_INSTANCE_ */
  82:.././hal/sam4s/startup_sam4s.c **** void UART0_Handler  ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  83:.././hal/sam4s/startup_sam4s.c **** void UART1_Handler  ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  84:.././hal/sam4s/startup_sam4s.c **** void PIOA_Handler   ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  85:.././hal/sam4s/startup_sam4s.c **** void PIOB_Handler   ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  86:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_PIOC_INSTANCE_
  87:.././hal/sam4s/startup_sam4s.c **** void PIOC_Handler   ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  88:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_PIOC_INSTANCE_ */
  89:.././hal/sam4s/startup_sam4s.c **** void USART0_Handler ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  90:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_USART1_INSTANCE_
  91:.././hal/sam4s/startup_sam4s.c **** void USART1_Handler ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  92:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_USART1_INSTANCE_ */
  93:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_HSMCI_INSTANCE_
  94:.././hal/sam4s/startup_sam4s.c **** void HSMCI_Handler  ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  95:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_HSMCI_INSTANCE_ */
  96:.././hal/sam4s/startup_sam4s.c **** void TWI0_Handler   ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  97:.././hal/sam4s/startup_sam4s.c **** void TWI1_Handler   ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  98:.././hal/sam4s/startup_sam4s.c **** void SPI_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
  99:.././hal/sam4s/startup_sam4s.c **** void SSC_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
 100:.././hal/sam4s/startup_sam4s.c **** void TC0_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
 101:.././hal/sam4s/startup_sam4s.c **** void TC1_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
 102:.././hal/sam4s/startup_sam4s.c **** void TC2_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
 103:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_TC1_INSTANCE_
 104:.././hal/sam4s/startup_sam4s.c **** void TC3_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
 105:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_TC1_INSTANCE_ */
 106:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_TC1_INSTANCE_
 107:.././hal/sam4s/startup_sam4s.c **** void TC4_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
 108:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_TC1_INSTANCE_ */
 109:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_TC1_INSTANCE_
 110:.././hal/sam4s/startup_sam4s.c **** void TC5_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
 111:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_TC1_INSTANCE_ */
 112:.././hal/sam4s/startup_sam4s.c **** void ADC_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
 113:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_DACC_INSTANCE_
 114:.././hal/sam4s/startup_sam4s.c **** void DACC_Handler   ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
 115:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_DACC_INSTANCE_ */
 116:.././hal/sam4s/startup_sam4s.c **** void PWM_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
 117:.././hal/sam4s/startup_sam4s.c **** void CRCCU_Handler  ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
 118:.././hal/sam4s/startup_sam4s.c **** void ACC_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
 119:.././hal/sam4s/startup_sam4s.c **** void UDP_Handler    ( void ) __attribute__ ((weak, alias("Dummy_Handler")));
 120:.././hal/sam4s/startup_sam4s.c **** 
 121:.././hal/sam4s/startup_sam4s.c **** /* Exception Table */
 122:.././hal/sam4s/startup_sam4s.c **** __attribute__ ((section(".vectors")))
 123:.././hal/sam4s/startup_sam4s.c **** const DeviceVectors exception_table = {
 124:.././hal/sam4s/startup_sam4s.c **** 
 125:.././hal/sam4s/startup_sam4s.c **** 	/* Configure Initial Stack Pointer, using linker-generated symbols */
 126:.././hal/sam4s/startup_sam4s.c **** 	.pvStack = (void*) (&_estack),
 127:.././hal/sam4s/startup_sam4s.c **** 
 128:.././hal/sam4s/startup_sam4s.c **** 	.pfnReset_Handler      = (void*) Reset_Handler,
 129:.././hal/sam4s/startup_sam4s.c **** 	.pfnNMI_Handler        = (void*) NMI_Handler,
 130:.././hal/sam4s/startup_sam4s.c **** 	.pfnHardFault_Handler  = (void*) HardFault_Handler,
 131:.././hal/sam4s/startup_sam4s.c **** 	.pfnMemManage_Handler  = (void*) MemManage_Handler,
 132:.././hal/sam4s/startup_sam4s.c **** 	.pfnBusFault_Handler   = (void*) BusFault_Handler,
 133:.././hal/sam4s/startup_sam4s.c **** 	.pfnUsageFault_Handler = (void*) UsageFault_Handler,
 134:.././hal/sam4s/startup_sam4s.c **** 	.pfnReserved1_Handler  = (void*) (0UL),          /* Reserved */
 135:.././hal/sam4s/startup_sam4s.c **** 	.pfnReserved2_Handler  = (void*) (0UL),          /* Reserved */
 136:.././hal/sam4s/startup_sam4s.c **** 	.pfnReserved3_Handler  = (void*) (0UL),          /* Reserved */
 137:.././hal/sam4s/startup_sam4s.c **** 	.pfnReserved4_Handler  = (void*) (0UL),          /* Reserved */
 138:.././hal/sam4s/startup_sam4s.c **** 	.pfnSVC_Handler        = (void*) SVC_Handler,
 139:.././hal/sam4s/startup_sam4s.c **** 	.pfnDebugMon_Handler   = (void*) DebugMon_Handler,
 140:.././hal/sam4s/startup_sam4s.c **** 	.pfnReserved5_Handler  = (void*) (0UL),          /* Reserved */
 141:.././hal/sam4s/startup_sam4s.c **** 	.pfnPendSV_Handler     = (void*) PendSV_Handler,
 142:.././hal/sam4s/startup_sam4s.c **** 	.pfnSysTick_Handler    = (void*) SysTick_Handler,
 143:.././hal/sam4s/startup_sam4s.c **** 
 144:.././hal/sam4s/startup_sam4s.c **** 	/* Configurable interrupts */
 145:.././hal/sam4s/startup_sam4s.c **** 	.pfnSUPC_Handler   = (void*) SUPC_Handler,   /* 0  Supply Controller */
 146:.././hal/sam4s/startup_sam4s.c **** 	.pfnRSTC_Handler   = (void*) RSTC_Handler,   /* 1  Reset Controller */
 147:.././hal/sam4s/startup_sam4s.c **** 	.pfnRTC_Handler    = (void*) RTC_Handler,    /* 2  Real Time Clock */
 148:.././hal/sam4s/startup_sam4s.c **** 	.pfnRTT_Handler    = (void*) RTT_Handler,    /* 3  Real Time Timer */
 149:.././hal/sam4s/startup_sam4s.c **** 	.pfnWDT_Handler    = (void*) WDT_Handler,    /* 4  Watchdog Timer */
 150:.././hal/sam4s/startup_sam4s.c **** 	.pfnPMC_Handler    = (void*) PMC_Handler,    /* 5  Power Management Controller */
 151:.././hal/sam4s/startup_sam4s.c **** 	.pfnEFC0_Handler   = (void*) EFC0_Handler,   /* 6  Enhanced Embedded Flash Controller 0 */
 152:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_EFC1_INSTANCE_
 153:.././hal/sam4s/startup_sam4s.c **** 	.pfnEFC1_Handler   = (void*) EFC1_Handler,   /* 7  Enhanced Embedded Flash Controller 1 */
 154:.././hal/sam4s/startup_sam4s.c **** #else
 155:.././hal/sam4s/startup_sam4s.c **** 	.pvReserved7       = (void*) (0UL),          /* 7  Reserved */
 156:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_EFC1_INSTANCE_ */
 157:.././hal/sam4s/startup_sam4s.c **** 	.pfnUART0_Handler  = (void*) UART0_Handler,  /* 8  UART 0 */
 158:.././hal/sam4s/startup_sam4s.c **** 	.pfnUART1_Handler  = (void*) UART1_Handler,  /* 9  UART 1 */
 159:.././hal/sam4s/startup_sam4s.c **** 	.pvReserved10      = (void*) (0UL),          /* 10 Reserved */
 160:.././hal/sam4s/startup_sam4s.c **** 	.pfnPIOA_Handler   = (void*) PIOA_Handler,   /* 11 Parallel I/O Controller A */
 161:.././hal/sam4s/startup_sam4s.c **** 	.pfnPIOB_Handler   = (void*) PIOB_Handler,   /* 12 Parallel I/O Controller B */
 162:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_PIOC_INSTANCE_
 163:.././hal/sam4s/startup_sam4s.c **** 	.pfnPIOC_Handler   = (void*) PIOC_Handler,   /* 13 Parallel I/O Controller C */
 164:.././hal/sam4s/startup_sam4s.c **** #else
 165:.././hal/sam4s/startup_sam4s.c **** 	.pvReserved13      = (void*) (0UL),          /* 13 Reserved */
 166:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_PIOC_INSTANCE_ */
 167:.././hal/sam4s/startup_sam4s.c **** 	.pfnUSART0_Handler = (void*) USART0_Handler, /* 14 USART 0 */
 168:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_USART1_INSTANCE_
 169:.././hal/sam4s/startup_sam4s.c **** 	.pfnUSART1_Handler = (void*) USART1_Handler, /* 15 USART 1 */
 170:.././hal/sam4s/startup_sam4s.c **** #else
 171:.././hal/sam4s/startup_sam4s.c **** 	.pvReserved15      = (void*) (0UL),          /* 15 Reserved */
 172:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_USART1_INSTANCE_ */
 173:.././hal/sam4s/startup_sam4s.c **** 	.pvReserved16      = (void*) (0UL),          /* 16 Reserved */
 174:.././hal/sam4s/startup_sam4s.c **** 	.pvReserved17      = (void*) (0UL),          /* 17 Reserved */
 175:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_HSMCI_INSTANCE_
 176:.././hal/sam4s/startup_sam4s.c **** 	.pfnHSMCI_Handler  = (void*) HSMCI_Handler,  /* 18 Multimedia Card Interface */
 177:.././hal/sam4s/startup_sam4s.c **** #else
 178:.././hal/sam4s/startup_sam4s.c **** 	.pvReserved18      = (void*) (0UL),          /* 18 Reserved */
 179:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_HSMCI_INSTANCE_ */
 180:.././hal/sam4s/startup_sam4s.c **** 	.pfnTWI0_Handler   = (void*) TWI0_Handler,   /* 19 Two Wire Interface 0 */
 181:.././hal/sam4s/startup_sam4s.c **** 	.pfnTWI1_Handler   = (void*) TWI1_Handler,   /* 20 Two Wire Interface 1 */
 182:.././hal/sam4s/startup_sam4s.c **** 	.pfnSPI_Handler    = (void*) SPI_Handler,    /* 21 Serial Peripheral Interface */
 183:.././hal/sam4s/startup_sam4s.c **** 	.pfnSSC_Handler    = (void*) SSC_Handler,    /* 22 Synchronous Serial Controller */
 184:.././hal/sam4s/startup_sam4s.c **** 	.pfnTC0_Handler    = (void*) TC0_Handler,    /* 23 Timer/Counter 0 */
 185:.././hal/sam4s/startup_sam4s.c **** 	.pfnTC1_Handler    = (void*) TC1_Handler,    /* 24 Timer/Counter 1 */
 186:.././hal/sam4s/startup_sam4s.c **** 	.pfnTC2_Handler    = (void*) TC2_Handler,    /* 25 Timer/Counter 2 */
 187:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_TC1_INSTANCE_
 188:.././hal/sam4s/startup_sam4s.c **** 	.pfnTC3_Handler    = (void*) TC3_Handler,    /* 26 Timer/Counter 3 */
 189:.././hal/sam4s/startup_sam4s.c **** #else
 190:.././hal/sam4s/startup_sam4s.c **** 	.pvReserved26      = (void*) (0UL),          /* 26 Reserved */
 191:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_TC1_INSTANCE_ */
 192:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_TC1_INSTANCE_
 193:.././hal/sam4s/startup_sam4s.c **** 	.pfnTC4_Handler    = (void*) TC4_Handler,    /* 27 Timer/Counter 4 */
 194:.././hal/sam4s/startup_sam4s.c **** #else
 195:.././hal/sam4s/startup_sam4s.c **** 	.pvReserved27      = (void*) (0UL),          /* 27 Reserved */
 196:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_TC1_INSTANCE_ */
 197:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_TC1_INSTANCE_
 198:.././hal/sam4s/startup_sam4s.c **** 	.pfnTC5_Handler    = (void*) TC5_Handler,    /* 28 Timer/Counter 5 */
 199:.././hal/sam4s/startup_sam4s.c **** #else
 200:.././hal/sam4s/startup_sam4s.c **** 	.pvReserved28      = (void*) (0UL),          /* 28 Reserved */
 201:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_TC1_INSTANCE_ */
 202:.././hal/sam4s/startup_sam4s.c **** 	.pfnADC_Handler    = (void*) ADC_Handler,    /* 29 Analog To Digital Converter */
 203:.././hal/sam4s/startup_sam4s.c **** #ifdef _SAM4S_DACC_INSTANCE_
 204:.././hal/sam4s/startup_sam4s.c **** 	.pfnDACC_Handler   = (void*) DACC_Handler,   /* 30 Digital To Analog Converter */
 205:.././hal/sam4s/startup_sam4s.c **** #else
 206:.././hal/sam4s/startup_sam4s.c **** 	.pvReserved30      = (void*) (0UL),          /* 30 Reserved */
 207:.././hal/sam4s/startup_sam4s.c **** #endif /* _SAM4S_DACC_INSTANCE_ */
 208:.././hal/sam4s/startup_sam4s.c **** 	.pfnPWM_Handler    = (void*) PWM_Handler,    /* 31 Pulse Width Modulation */
 209:.././hal/sam4s/startup_sam4s.c **** 	.pfnCRCCU_Handler  = (void*) CRCCU_Handler,  /* 32 CRC Calculation Unit */
 210:.././hal/sam4s/startup_sam4s.c **** 	.pfnACC_Handler    = (void*) ACC_Handler,    /* 33 Analog Comparator */
 211:.././hal/sam4s/startup_sam4s.c **** 	.pfnUDP_Handler    = (void*) UDP_Handler     /* 34 USB Device Port */
 212:.././hal/sam4s/startup_sam4s.c **** };
 213:.././hal/sam4s/startup_sam4s.c **** 
 214:.././hal/sam4s/startup_sam4s.c **** /**
 215:.././hal/sam4s/startup_sam4s.c ****  * \brief This is the code that gets called on processor reset.
 216:.././hal/sam4s/startup_sam4s.c ****  * To initialize the device, and call the main() routine.
 217:.././hal/sam4s/startup_sam4s.c ****  */
 218:.././hal/sam4s/startup_sam4s.c **** void Reset_Handler(void)
 219:.././hal/sam4s/startup_sam4s.c **** {
 220:.././hal/sam4s/startup_sam4s.c **** 	uint32_t *pSrc, *pDest;
 221:.././hal/sam4s/startup_sam4s.c **** 
 222:.././hal/sam4s/startup_sam4s.c **** 	/* Initialize the relocate segment */
 223:.././hal/sam4s/startup_sam4s.c **** 	pSrc = &_etext;
 224:.././hal/sam4s/startup_sam4s.c **** 	pDest = &_srelocate;
 225:.././hal/sam4s/startup_sam4s.c **** 
 226:.././hal/sam4s/startup_sam4s.c **** 	if (pSrc > pDest) {
 227:.././hal/sam4s/startup_sam4s.c **** 		for (; pDest < &_erelocate;) {
 228:.././hal/sam4s/startup_sam4s.c **** 			*pDest++ = *pSrc++;
 229:.././hal/sam4s/startup_sam4s.c **** 		}
 230:.././hal/sam4s/startup_sam4s.c **** 	} else if (pSrc < pDest) {
 231:.././hal/sam4s/startup_sam4s.c **** 		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
 232:.././hal/sam4s/startup_sam4s.c **** 		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
 233:.././hal/sam4s/startup_sam4s.c **** 		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
 234:.././hal/sam4s/startup_sam4s.c **** 		for (;nb_bytes;nb_bytes -= 4) {
 235:.././hal/sam4s/startup_sam4s.c **** 			*pDest-- = *pSrc--;
 236:.././hal/sam4s/startup_sam4s.c **** 		}
 237:.././hal/sam4s/startup_sam4s.c **** 	}
 238:.././hal/sam4s/startup_sam4s.c **** 	__NOP();
 239:.././hal/sam4s/startup_sam4s.c **** 
 240:.././hal/sam4s/startup_sam4s.c **** 	/* Clear the zero segment */
 241:.././hal/sam4s/startup_sam4s.c **** 	for (pDest = &_szero; pDest < &_ezero;) {
 242:.././hal/sam4s/startup_sam4s.c **** 		*pDest++ = 0;
 243:.././hal/sam4s/startup_sam4s.c **** 	}
 244:.././hal/sam4s/startup_sam4s.c **** 
 245:.././hal/sam4s/startup_sam4s.c **** 	/* Set the vector table base address */
 246:.././hal/sam4s/startup_sam4s.c **** 	pSrc = (uint32_t *) & _sfixed;
 247:.././hal/sam4s/startup_sam4s.c **** 	SCB->VTOR = ((uint32_t) pSrc);
 248:.././hal/sam4s/startup_sam4s.c **** 
 249:.././hal/sam4s/startup_sam4s.c **** 	/* Initialize the C library */
 250:.././hal/sam4s/startup_sam4s.c **** 	__libc_init_array();
 251:.././hal/sam4s/startup_sam4s.c **** 
 252:.././hal/sam4s/startup_sam4s.c **** 	/* Branch to main function */
 253:.././hal/sam4s/startup_sam4s.c **** 	main();
 254:.././hal/sam4s/startup_sam4s.c **** 
 255:.././hal/sam4s/startup_sam4s.c **** 	/* Infinite loop */
 256:.././hal/sam4s/startup_sam4s.c **** 	while (1);
 257:.././hal/sam4s/startup_sam4s.c **** }
 258:.././hal/sam4s/startup_sam4s.c **** 
 259:.././hal/sam4s/startup_sam4s.c **** /**
 260:.././hal/sam4s/startup_sam4s.c ****  * \brief Default interrupt handler for unused IRQs.
 261:.././hal/sam4s/startup_sam4s.c ****  */
 262:.././hal/sam4s/startup_sam4s.c **** void Dummy_Handler(void)
 263:.././hal/sam4s/startup_sam4s.c **** {
  27              	 .loc 1 263 1 view-0
  28              	 .cfi_startproc
  29              	 
  30              	 
  31              	 
  32              	 
  33              	.L2:
 264:.././hal/sam4s/startup_sam4s.c **** 	while (1) {
  34              	 .loc 1 264 2 discriminator 1 view .LVU1
 265:.././hal/sam4s/startup_sam4s.c **** 	}
  35              	 .loc 1 265 2 discriminator 1 view .LVU2
 264:.././hal/sam4s/startup_sam4s.c **** 	while (1) {
  36              	 .loc 1 264 8 discriminator 1 view .LVU3
  37 0000 FEE7     	 b .L2
  38              	 .cfi_endproc
  39              	.LFE124:
  41              	 .weak UDP_Handler
  42              	 .thumb_set UDP_Handler,Dummy_Handler
  43              	 .weak ACC_Handler
  44              	 .thumb_set ACC_Handler,Dummy_Handler
  45              	 .weak CRCCU_Handler
  46              	 .thumb_set CRCCU_Handler,Dummy_Handler
  47              	 .weak PWM_Handler
  48              	 .thumb_set PWM_Handler,Dummy_Handler
  49              	 .weak DACC_Handler
  50              	 .thumb_set DACC_Handler,Dummy_Handler
  51              	 .weak ADC_Handler
  52              	 .thumb_set ADC_Handler,Dummy_Handler
  53              	 .weak TC2_Handler
  54              	 .thumb_set TC2_Handler,Dummy_Handler
  55              	 .weak TC1_Handler
  56              	 .thumb_set TC1_Handler,Dummy_Handler
  57              	 .weak TC0_Handler
  58              	 .thumb_set TC0_Handler,Dummy_Handler
  59              	 .weak SSC_Handler
  60              	 .thumb_set SSC_Handler,Dummy_Handler
  61              	 .weak SPI_Handler
  62              	 .thumb_set SPI_Handler,Dummy_Handler
  63              	 .weak TWI1_Handler
  64              	 .thumb_set TWI1_Handler,Dummy_Handler
  65              	 .weak TWI0_Handler
  66              	 .thumb_set TWI0_Handler,Dummy_Handler
  67              	 .weak HSMCI_Handler
  68              	 .thumb_set HSMCI_Handler,Dummy_Handler
  69              	 .weak USART1_Handler
  70              	 .thumb_set USART1_Handler,Dummy_Handler
  71              	 .weak USART0_Handler
  72              	 .thumb_set USART0_Handler,Dummy_Handler
  73              	 .weak PIOB_Handler
  74              	 .thumb_set PIOB_Handler,Dummy_Handler
  75              	 .weak PIOA_Handler
  76              	 .thumb_set PIOA_Handler,Dummy_Handler
  77              	 .weak UART1_Handler
  78              	 .thumb_set UART1_Handler,Dummy_Handler
  79              	 .weak UART0_Handler
  80              	 .thumb_set UART0_Handler,Dummy_Handler
  81              	 .weak EFC0_Handler
  82              	 .thumb_set EFC0_Handler,Dummy_Handler
  83              	 .weak PMC_Handler
  84              	 .thumb_set PMC_Handler,Dummy_Handler
  85              	 .weak WDT_Handler
  86              	 .thumb_set WDT_Handler,Dummy_Handler
  87              	 .weak RTT_Handler
  88              	 .thumb_set RTT_Handler,Dummy_Handler
  89              	 .weak RTC_Handler
  90              	 .thumb_set RTC_Handler,Dummy_Handler
  91              	 .weak RSTC_Handler
  92              	 .thumb_set RSTC_Handler,Dummy_Handler
  93              	 .weak SUPC_Handler
  94              	 .thumb_set SUPC_Handler,Dummy_Handler
  95              	 .weak SysTick_Handler
  96              	 .thumb_set SysTick_Handler,Dummy_Handler
  97              	 .weak PendSV_Handler
  98              	 .thumb_set PendSV_Handler,Dummy_Handler
  99              	 .weak DebugMon_Handler
 100              	 .thumb_set DebugMon_Handler,Dummy_Handler
 101              	 .weak SVC_Handler
 102              	 .thumb_set SVC_Handler,Dummy_Handler
 103              	 .weak UsageFault_Handler
 104              	 .thumb_set UsageFault_Handler,Dummy_Handler
 105              	 .weak BusFault_Handler
 106              	 .thumb_set BusFault_Handler,Dummy_Handler
 107              	 .weak MemManage_Handler
 108              	 .thumb_set MemManage_Handler,Dummy_Handler
 109              	 .weak HardFault_Handler
 110              	 .thumb_set HardFault_Handler,Dummy_Handler
 111              	 .weak NMI_Handler
 112              	 .thumb_set NMI_Handler,Dummy_Handler
 113              	 .section .text.Reset_Handler,"ax",%progbits
 114              	 .align 1
 115              	 .global Reset_Handler
 116              	 .syntax unified
 117              	 .thumb
 118              	 .thumb_func
 119              	 .fpu softvfp
 121              	Reset_Handler:
 122              	.LFB123:
 219:.././hal/sam4s/startup_sam4s.c **** 	uint32_t *pSrc, *pDest;
 123              	 .loc 1 219 1 view-0
 124              	 .cfi_startproc
 125              	 
 126              	 
 220:.././hal/sam4s/startup_sam4s.c **** 
 127              	 .loc 1 220 2 view .LVU5
 223:.././hal/sam4s/startup_sam4s.c **** 	pDest = &_srelocate;
 128              	 .loc 1 223 2 view .LVU6
 129              	.LVL0:
 224:.././hal/sam4s/startup_sam4s.c **** 
 130              	 .loc 1 224 2 view .LVU7
 226:.././hal/sam4s/startup_sam4s.c **** 		for (; pDest < &_erelocate;) {
 131              	 .loc 1 226 2 view .LVU8
 226:.././hal/sam4s/startup_sam4s.c **** 		for (; pDest < &_erelocate;) {
 132              	 .loc 1 226 5 is_stmt 0 view .LVU9
 133 0000 1949     	 ldr r1,.L9
 134 0002 1A48     	 ldr r0,.L9+4
 135 0004 8142     	 cmp r1,r0
 219:.././hal/sam4s/startup_sam4s.c **** 	uint32_t *pSrc, *pDest;
 136              	 .loc 1 219 1 view .LVU10
 137 0006 10B5     	 push {r4,lr}
 138              	.LCFI0:
 139              	 .cfi_def_cfa_offset 8
 140              	 .cfi_offset 4,-8
 141              	 .cfi_offset 14,-4
 226:.././hal/sam4s/startup_sam4s.c **** 		for (; pDest < &_erelocate;) {
 142              	 .loc 1 226 5 view .LVU11
 143 0008 20D9     	 bls .L4
 228:.././hal/sam4s/startup_sam4s.c **** 		}
 144              	 .loc 1 228 13 view .LVU12
 145 000a 194B     	 ldr r3,.L9+8
 146 000c DA1C     	 adds r2,r3,#3
 147 000e 121A     	 subs r2,r2,r0
 148 0010 22F00302 	 bic r2,r2,#3
 149 0014 C41E     	 subs r4,r0,#3
 150 0016 A342     	 cmp r3,r4
 151 0018 38BF     	 it cc
 152 001a 0022     	 movcc r2,#0
 153 001c 154B     	 ldr r3,.L9+12
 154 001e 9847     	 blx r3
 155              	.LVL1:
 156              	.L6:
 238:.././hal/sam4s/startup_sam4s.c **** 
 157              	 .loc 1 238 2 is_stmt 1 view .LVU13
 158              	.LBB5:
 159              	.LBI5:
 160              	 .file 2 ".././hal/sam4s/inc/core_cmInstr.h"
   1:.././hal/sam4s/inc/core_cmInstr.h **** /**************************************************************************//**
   2:.././hal/sam4s/inc/core_cmInstr.h ****  * @file     core_cmInstr.h
   3:.././hal/sam4s/inc/core_cmInstr.h ****  * @brief    CMSIS Cortex-M Core Instruction Access Header File
   4:.././hal/sam4s/inc/core_cmInstr.h ****  * @version  V4.00
   5:.././hal/sam4s/inc/core_cmInstr.h ****  * @date     28. August 2014
   6:.././hal/sam4s/inc/core_cmInstr.h ****  *
   7:.././hal/sam4s/inc/core_cmInstr.h ****  * @note
   8:.././hal/sam4s/inc/core_cmInstr.h ****  *
   9:.././hal/sam4s/inc/core_cmInstr.h ****  ******************************************************************************/
  10:.././hal/sam4s/inc/core_cmInstr.h **** /* Copyright (c) 2009 - 2014 ARM LIMITED
  11:.././hal/sam4s/inc/core_cmInstr.h **** 
  12:.././hal/sam4s/inc/core_cmInstr.h ****    All rights reserved.
  13:.././hal/sam4s/inc/core_cmInstr.h ****    Redistribution and use in source and binary forms, with or without
  14:.././hal/sam4s/inc/core_cmInstr.h ****    modification, are permitted provided that the following conditions are met:
  15:.././hal/sam4s/inc/core_cmInstr.h ****    - Redistributions of source code must retain the above copyright
  16:.././hal/sam4s/inc/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer.
  17:.././hal/sam4s/inc/core_cmInstr.h ****    - Redistributions in binary form must reproduce the above copyright
  18:.././hal/sam4s/inc/core_cmInstr.h ****      notice, this list of conditions and the following disclaimer in the
  19:.././hal/sam4s/inc/core_cmInstr.h ****      documentation and/or other materials provided with the distribution.
  20:.././hal/sam4s/inc/core_cmInstr.h ****    - Neither the name of ARM nor the names of its contributors may be used
  21:.././hal/sam4s/inc/core_cmInstr.h ****      to endorse or promote products derived from this software without
  22:.././hal/sam4s/inc/core_cmInstr.h ****      specific prior written permission.
  23:.././hal/sam4s/inc/core_cmInstr.h ****    *
  24:.././hal/sam4s/inc/core_cmInstr.h ****    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  25:.././hal/sam4s/inc/core_cmInstr.h ****    AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  26:.././hal/sam4s/inc/core_cmInstr.h ****    IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  27:.././hal/sam4s/inc/core_cmInstr.h ****    ARE DISCLAIMED. IN NO EVENT SHALL COPYRIGHT HOLDERS AND CONTRIBUTORS BE
  28:.././hal/sam4s/inc/core_cmInstr.h ****    LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
  29:.././hal/sam4s/inc/core_cmInstr.h ****    CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
  30:.././hal/sam4s/inc/core_cmInstr.h ****    SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
  31:.././hal/sam4s/inc/core_cmInstr.h ****    INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
  32:.././hal/sam4s/inc/core_cmInstr.h ****    CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
  33:.././hal/sam4s/inc/core_cmInstr.h ****    ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  34:.././hal/sam4s/inc/core_cmInstr.h ****    POSSIBILITY OF SUCH DAMAGE.
  35:.././hal/sam4s/inc/core_cmInstr.h ****    ---------------------------------------------------------------------------*/
  36:.././hal/sam4s/inc/core_cmInstr.h **** 
  37:.././hal/sam4s/inc/core_cmInstr.h **** 
  38:.././hal/sam4s/inc/core_cmInstr.h **** #ifndef __CORE_CMINSTR_H
  39:.././hal/sam4s/inc/core_cmInstr.h **** #define __CORE_CMINSTR_H
  40:.././hal/sam4s/inc/core_cmInstr.h **** 
  41:.././hal/sam4s/inc/core_cmInstr.h **** 
  42:.././hal/sam4s/inc/core_cmInstr.h **** /* ##########################  Core Instruction Access  ######################### */
  43:.././hal/sam4s/inc/core_cmInstr.h **** /** \defgroup CMSIS_Core_InstructionInterface CMSIS Core Instruction Interface
  44:.././hal/sam4s/inc/core_cmInstr.h ****   Access to dedicated instructions
  45:.././hal/sam4s/inc/core_cmInstr.h ****   @{
  46:.././hal/sam4s/inc/core_cmInstr.h **** */
  47:.././hal/sam4s/inc/core_cmInstr.h **** 
  48:.././hal/sam4s/inc/core_cmInstr.h **** #if   defined ( __CC_ARM ) /*------------------RealView Compiler -----------------*/
  49:.././hal/sam4s/inc/core_cmInstr.h **** /* ARM armcc specific functions */
  50:.././hal/sam4s/inc/core_cmInstr.h **** 
  51:.././hal/sam4s/inc/core_cmInstr.h **** #if (__ARMCC_VERSION < 400677)
  52:.././hal/sam4s/inc/core_cmInstr.h ****   #error "Please use ARM Compiler Toolchain V4.0.677 or later!"
  53:.././hal/sam4s/inc/core_cmInstr.h **** #endif
  54:.././hal/sam4s/inc/core_cmInstr.h **** 
  55:.././hal/sam4s/inc/core_cmInstr.h **** 
  56:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  No Operation
  57:.././hal/sam4s/inc/core_cmInstr.h **** 
  58:.././hal/sam4s/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
  59:.././hal/sam4s/inc/core_cmInstr.h ****  */
  60:.././hal/sam4s/inc/core_cmInstr.h **** #define __NOP                             __nop
  61:.././hal/sam4s/inc/core_cmInstr.h **** 
  62:.././hal/sam4s/inc/core_cmInstr.h **** 
  63:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Wait For Interrupt
  64:.././hal/sam4s/inc/core_cmInstr.h **** 
  65:.././hal/sam4s/inc/core_cmInstr.h ****     Wait For Interrupt is a hint instruction that suspends execution
  66:.././hal/sam4s/inc/core_cmInstr.h ****     until one of a number of events occurs.
  67:.././hal/sam4s/inc/core_cmInstr.h ****  */
  68:.././hal/sam4s/inc/core_cmInstr.h **** #define __WFI                             __wfi
  69:.././hal/sam4s/inc/core_cmInstr.h **** 
  70:.././hal/sam4s/inc/core_cmInstr.h **** 
  71:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Wait For Event
  72:.././hal/sam4s/inc/core_cmInstr.h **** 
  73:.././hal/sam4s/inc/core_cmInstr.h ****     Wait For Event is a hint instruction that permits the processor to enter
  74:.././hal/sam4s/inc/core_cmInstr.h ****     a low-power state until one of a number of events occurs.
  75:.././hal/sam4s/inc/core_cmInstr.h ****  */
  76:.././hal/sam4s/inc/core_cmInstr.h **** #define __WFE                             __wfe
  77:.././hal/sam4s/inc/core_cmInstr.h **** 
  78:.././hal/sam4s/inc/core_cmInstr.h **** 
  79:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Send Event
  80:.././hal/sam4s/inc/core_cmInstr.h **** 
  81:.././hal/sam4s/inc/core_cmInstr.h ****     Send Event is a hint instruction. It causes an event to be signaled to the CPU.
  82:.././hal/sam4s/inc/core_cmInstr.h ****  */
  83:.././hal/sam4s/inc/core_cmInstr.h **** #define __SEV                             __sev
  84:.././hal/sam4s/inc/core_cmInstr.h **** 
  85:.././hal/sam4s/inc/core_cmInstr.h **** 
  86:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Instruction Synchronization Barrier
  87:.././hal/sam4s/inc/core_cmInstr.h **** 
  88:.././hal/sam4s/inc/core_cmInstr.h ****     Instruction Synchronization Barrier flushes the pipeline in the processor,
  89:.././hal/sam4s/inc/core_cmInstr.h ****     so that all instructions following the ISB are fetched from cache or
  90:.././hal/sam4s/inc/core_cmInstr.h ****     memory, after the instruction has been completed.
  91:.././hal/sam4s/inc/core_cmInstr.h ****  */
  92:.././hal/sam4s/inc/core_cmInstr.h **** #define __ISB()                           __isb(0xF)
  93:.././hal/sam4s/inc/core_cmInstr.h **** 
  94:.././hal/sam4s/inc/core_cmInstr.h **** 
  95:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Data Synchronization Barrier
  96:.././hal/sam4s/inc/core_cmInstr.h **** 
  97:.././hal/sam4s/inc/core_cmInstr.h ****     This function acts as a special kind of Data Memory Barrier.
  98:.././hal/sam4s/inc/core_cmInstr.h ****     It completes when all explicit memory accesses before this instruction complete.
  99:.././hal/sam4s/inc/core_cmInstr.h ****  */
 100:.././hal/sam4s/inc/core_cmInstr.h **** #define __DSB()                           __dsb(0xF)
 101:.././hal/sam4s/inc/core_cmInstr.h **** 
 102:.././hal/sam4s/inc/core_cmInstr.h **** 
 103:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Data Memory Barrier
 104:.././hal/sam4s/inc/core_cmInstr.h **** 
 105:.././hal/sam4s/inc/core_cmInstr.h ****     This function ensures the apparent order of the explicit memory operations before
 106:.././hal/sam4s/inc/core_cmInstr.h ****     and after the instruction, without ensuring their completion.
 107:.././hal/sam4s/inc/core_cmInstr.h ****  */
 108:.././hal/sam4s/inc/core_cmInstr.h **** #define __DMB()                           __dmb(0xF)
 109:.././hal/sam4s/inc/core_cmInstr.h **** 
 110:.././hal/sam4s/inc/core_cmInstr.h **** 
 111:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Reverse byte order (32 bit)
 112:.././hal/sam4s/inc/core_cmInstr.h **** 
 113:.././hal/sam4s/inc/core_cmInstr.h ****     This function reverses the byte order in integer value.
 114:.././hal/sam4s/inc/core_cmInstr.h **** 
 115:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 116:.././hal/sam4s/inc/core_cmInstr.h ****     \return               Reversed value
 117:.././hal/sam4s/inc/core_cmInstr.h ****  */
 118:.././hal/sam4s/inc/core_cmInstr.h **** #define __REV                             __rev
 119:.././hal/sam4s/inc/core_cmInstr.h **** 
 120:.././hal/sam4s/inc/core_cmInstr.h **** 
 121:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Reverse byte order (16 bit)
 122:.././hal/sam4s/inc/core_cmInstr.h **** 
 123:.././hal/sam4s/inc/core_cmInstr.h ****     This function reverses the byte order in two unsigned short values.
 124:.././hal/sam4s/inc/core_cmInstr.h **** 
 125:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 126:.././hal/sam4s/inc/core_cmInstr.h ****     \return               Reversed value
 127:.././hal/sam4s/inc/core_cmInstr.h ****  */
 128:.././hal/sam4s/inc/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 129:.././hal/sam4s/inc/core_cmInstr.h **** __attribute__((section(".rev16_text"))) __STATIC_INLINE __ASM uint32_t __REV16(uint32_t value)
 130:.././hal/sam4s/inc/core_cmInstr.h **** {
 131:.././hal/sam4s/inc/core_cmInstr.h ****   rev16 r0, r0
 132:.././hal/sam4s/inc/core_cmInstr.h ****   bx lr
 133:.././hal/sam4s/inc/core_cmInstr.h **** }
 134:.././hal/sam4s/inc/core_cmInstr.h **** #endif
 135:.././hal/sam4s/inc/core_cmInstr.h **** 
 136:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Reverse byte order in signed short value
 137:.././hal/sam4s/inc/core_cmInstr.h **** 
 138:.././hal/sam4s/inc/core_cmInstr.h ****     This function reverses the byte order in a signed short value with sign extension to integer.
 139:.././hal/sam4s/inc/core_cmInstr.h **** 
 140:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 141:.././hal/sam4s/inc/core_cmInstr.h ****     \return               Reversed value
 142:.././hal/sam4s/inc/core_cmInstr.h ****  */
 143:.././hal/sam4s/inc/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 144:.././hal/sam4s/inc/core_cmInstr.h **** __attribute__((section(".revsh_text"))) __STATIC_INLINE __ASM int32_t __REVSH(int32_t value)
 145:.././hal/sam4s/inc/core_cmInstr.h **** {
 146:.././hal/sam4s/inc/core_cmInstr.h ****   revsh r0, r0
 147:.././hal/sam4s/inc/core_cmInstr.h ****   bx lr
 148:.././hal/sam4s/inc/core_cmInstr.h **** }
 149:.././hal/sam4s/inc/core_cmInstr.h **** #endif
 150:.././hal/sam4s/inc/core_cmInstr.h **** 
 151:.././hal/sam4s/inc/core_cmInstr.h **** 
 152:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Rotate Right in unsigned value (32 bit)
 153:.././hal/sam4s/inc/core_cmInstr.h **** 
 154:.././hal/sam4s/inc/core_cmInstr.h ****     This function Rotate Right (immediate) provides the value of the contents of a register rotated
 155:.././hal/sam4s/inc/core_cmInstr.h **** 
 156:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 157:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  Number of Bits to rotate
 158:.././hal/sam4s/inc/core_cmInstr.h ****     \return               Rotated value
 159:.././hal/sam4s/inc/core_cmInstr.h ****  */
 160:.././hal/sam4s/inc/core_cmInstr.h **** #define __ROR                             __ror
 161:.././hal/sam4s/inc/core_cmInstr.h **** 
 162:.././hal/sam4s/inc/core_cmInstr.h **** 
 163:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Breakpoint
 164:.././hal/sam4s/inc/core_cmInstr.h **** 
 165:.././hal/sam4s/inc/core_cmInstr.h ****     This function causes the processor to enter Debug state.
 166:.././hal/sam4s/inc/core_cmInstr.h ****     Debug tools can use this to investigate system state when the instruction at a particular addre
 167:.././hal/sam4s/inc/core_cmInstr.h **** 
 168:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  is ignored by the processor.
 169:.././hal/sam4s/inc/core_cmInstr.h ****                    If required, a debugger can use it to store additional information about the bre
 170:.././hal/sam4s/inc/core_cmInstr.h ****  */
 171:.././hal/sam4s/inc/core_cmInstr.h **** #define __BKPT(value)                       __breakpoint(value)
 172:.././hal/sam4s/inc/core_cmInstr.h **** 
 173:.././hal/sam4s/inc/core_cmInstr.h **** 
 174:.././hal/sam4s/inc/core_cmInstr.h **** #if       (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300)
 175:.././hal/sam4s/inc/core_cmInstr.h **** 
 176:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Reverse bit order of value
 177:.././hal/sam4s/inc/core_cmInstr.h **** 
 178:.././hal/sam4s/inc/core_cmInstr.h ****     This function reverses the bit order of the given value.
 179:.././hal/sam4s/inc/core_cmInstr.h **** 
 180:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  Value to reverse
 181:.././hal/sam4s/inc/core_cmInstr.h ****     \return               Reversed value
 182:.././hal/sam4s/inc/core_cmInstr.h ****  */
 183:.././hal/sam4s/inc/core_cmInstr.h **** #define __RBIT                            __rbit
 184:.././hal/sam4s/inc/core_cmInstr.h **** 
 185:.././hal/sam4s/inc/core_cmInstr.h **** 
 186:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (8 bit)
 187:.././hal/sam4s/inc/core_cmInstr.h **** 
 188:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 8 bit value.
 189:.././hal/sam4s/inc/core_cmInstr.h **** 
 190:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 191:.././hal/sam4s/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 192:.././hal/sam4s/inc/core_cmInstr.h ****  */
 193:.././hal/sam4s/inc/core_cmInstr.h **** #define __LDREXB(ptr)                     ((uint8_t ) __ldrex(ptr))
 194:.././hal/sam4s/inc/core_cmInstr.h **** 
 195:.././hal/sam4s/inc/core_cmInstr.h **** 
 196:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (16 bit)
 197:.././hal/sam4s/inc/core_cmInstr.h **** 
 198:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 16 bit values.
 199:.././hal/sam4s/inc/core_cmInstr.h **** 
 200:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 201:.././hal/sam4s/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 202:.././hal/sam4s/inc/core_cmInstr.h ****  */
 203:.././hal/sam4s/inc/core_cmInstr.h **** #define __LDREXH(ptr)                     ((uint16_t) __ldrex(ptr))
 204:.././hal/sam4s/inc/core_cmInstr.h **** 
 205:.././hal/sam4s/inc/core_cmInstr.h **** 
 206:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  LDR Exclusive (32 bit)
 207:.././hal/sam4s/inc/core_cmInstr.h **** 
 208:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a exclusive LDR instruction for 32 bit values.
 209:.././hal/sam4s/inc/core_cmInstr.h **** 
 210:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 211:.././hal/sam4s/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 212:.././hal/sam4s/inc/core_cmInstr.h ****  */
 213:.././hal/sam4s/inc/core_cmInstr.h **** #define __LDREXW(ptr)                     ((uint32_t ) __ldrex(ptr))
 214:.././hal/sam4s/inc/core_cmInstr.h **** 
 215:.././hal/sam4s/inc/core_cmInstr.h **** 
 216:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  STR Exclusive (8 bit)
 217:.././hal/sam4s/inc/core_cmInstr.h **** 
 218:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a exclusive STR instruction for 8 bit values.
 219:.././hal/sam4s/inc/core_cmInstr.h **** 
 220:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 221:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 222:.././hal/sam4s/inc/core_cmInstr.h ****     \return          0  Function succeeded
 223:.././hal/sam4s/inc/core_cmInstr.h ****     \return          1  Function failed
 224:.././hal/sam4s/inc/core_cmInstr.h ****  */
 225:.././hal/sam4s/inc/core_cmInstr.h **** #define __STREXB(value, ptr)              __strex(value, ptr)
 226:.././hal/sam4s/inc/core_cmInstr.h **** 
 227:.././hal/sam4s/inc/core_cmInstr.h **** 
 228:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  STR Exclusive (16 bit)
 229:.././hal/sam4s/inc/core_cmInstr.h **** 
 230:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a exclusive STR instruction for 16 bit values.
 231:.././hal/sam4s/inc/core_cmInstr.h **** 
 232:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 233:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 234:.././hal/sam4s/inc/core_cmInstr.h ****     \return          0  Function succeeded
 235:.././hal/sam4s/inc/core_cmInstr.h ****     \return          1  Function failed
 236:.././hal/sam4s/inc/core_cmInstr.h ****  */
 237:.././hal/sam4s/inc/core_cmInstr.h **** #define __STREXH(value, ptr)              __strex(value, ptr)
 238:.././hal/sam4s/inc/core_cmInstr.h **** 
 239:.././hal/sam4s/inc/core_cmInstr.h **** 
 240:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  STR Exclusive (32 bit)
 241:.././hal/sam4s/inc/core_cmInstr.h **** 
 242:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a exclusive STR instruction for 32 bit values.
 243:.././hal/sam4s/inc/core_cmInstr.h **** 
 244:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 245:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 246:.././hal/sam4s/inc/core_cmInstr.h ****     \return          0  Function succeeded
 247:.././hal/sam4s/inc/core_cmInstr.h ****     \return          1  Function failed
 248:.././hal/sam4s/inc/core_cmInstr.h ****  */
 249:.././hal/sam4s/inc/core_cmInstr.h **** #define __STREXW(value, ptr)              __strex(value, ptr)
 250:.././hal/sam4s/inc/core_cmInstr.h **** 
 251:.././hal/sam4s/inc/core_cmInstr.h **** 
 252:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Remove the exclusive lock
 253:.././hal/sam4s/inc/core_cmInstr.h **** 
 254:.././hal/sam4s/inc/core_cmInstr.h ****     This function removes the exclusive lock which is created by LDREX.
 255:.././hal/sam4s/inc/core_cmInstr.h **** 
 256:.././hal/sam4s/inc/core_cmInstr.h ****  */
 257:.././hal/sam4s/inc/core_cmInstr.h **** #define __CLREX                           __clrex
 258:.././hal/sam4s/inc/core_cmInstr.h **** 
 259:.././hal/sam4s/inc/core_cmInstr.h **** 
 260:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Signed Saturate
 261:.././hal/sam4s/inc/core_cmInstr.h **** 
 262:.././hal/sam4s/inc/core_cmInstr.h ****     This function saturates a signed value.
 263:.././hal/sam4s/inc/core_cmInstr.h **** 
 264:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 265:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (1..32)
 266:.././hal/sam4s/inc/core_cmInstr.h ****     \return             Saturated value
 267:.././hal/sam4s/inc/core_cmInstr.h ****  */
 268:.././hal/sam4s/inc/core_cmInstr.h **** #define __SSAT                            __ssat
 269:.././hal/sam4s/inc/core_cmInstr.h **** 
 270:.././hal/sam4s/inc/core_cmInstr.h **** 
 271:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Unsigned Saturate
 272:.././hal/sam4s/inc/core_cmInstr.h **** 
 273:.././hal/sam4s/inc/core_cmInstr.h ****     This function saturates an unsigned value.
 274:.././hal/sam4s/inc/core_cmInstr.h **** 
 275:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to be saturated
 276:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    sat  Bit position to saturate to (0..31)
 277:.././hal/sam4s/inc/core_cmInstr.h ****     \return             Saturated value
 278:.././hal/sam4s/inc/core_cmInstr.h ****  */
 279:.././hal/sam4s/inc/core_cmInstr.h **** #define __USAT                            __usat
 280:.././hal/sam4s/inc/core_cmInstr.h **** 
 281:.././hal/sam4s/inc/core_cmInstr.h **** 
 282:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Count leading zeros
 283:.././hal/sam4s/inc/core_cmInstr.h **** 
 284:.././hal/sam4s/inc/core_cmInstr.h ****     This function counts the number of leading zeros of a data value.
 285:.././hal/sam4s/inc/core_cmInstr.h **** 
 286:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to count the leading zeros
 287:.././hal/sam4s/inc/core_cmInstr.h ****     \return             number of leading zeros in value
 288:.././hal/sam4s/inc/core_cmInstr.h ****  */
 289:.././hal/sam4s/inc/core_cmInstr.h **** #define __CLZ                             __clz
 290:.././hal/sam4s/inc/core_cmInstr.h **** 
 291:.././hal/sam4s/inc/core_cmInstr.h **** 
 292:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  Rotate Right with Extend (32 bit)
 293:.././hal/sam4s/inc/core_cmInstr.h **** 
 294:.././hal/sam4s/inc/core_cmInstr.h ****     This function moves each bit of a bitstring right by one bit. The carry input is shifted in at 
 295:.././hal/sam4s/inc/core_cmInstr.h **** 
 296:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    value  Value to rotate
 297:.././hal/sam4s/inc/core_cmInstr.h ****     \return               Rotated value
 298:.././hal/sam4s/inc/core_cmInstr.h ****  */
 299:.././hal/sam4s/inc/core_cmInstr.h **** #ifndef __NO_EMBEDDED_ASM
 300:.././hal/sam4s/inc/core_cmInstr.h **** __attribute__((section(".rrx_text"))) __STATIC_INLINE __ASM uint32_t __RRX(uint32_t value)
 301:.././hal/sam4s/inc/core_cmInstr.h **** {
 302:.././hal/sam4s/inc/core_cmInstr.h ****   rrx r0, r0
 303:.././hal/sam4s/inc/core_cmInstr.h ****   bx lr
 304:.././hal/sam4s/inc/core_cmInstr.h **** }
 305:.././hal/sam4s/inc/core_cmInstr.h **** #endif
 306:.././hal/sam4s/inc/core_cmInstr.h **** 
 307:.././hal/sam4s/inc/core_cmInstr.h **** 
 308:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  LDRT Unprivileged (8 bit)
 309:.././hal/sam4s/inc/core_cmInstr.h **** 
 310:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 8 bit value.
 311:.././hal/sam4s/inc/core_cmInstr.h **** 
 312:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 313:.././hal/sam4s/inc/core_cmInstr.h ****     \return             value of type uint8_t at (*ptr)
 314:.././hal/sam4s/inc/core_cmInstr.h ****  */
 315:.././hal/sam4s/inc/core_cmInstr.h **** #define __LDRBT(ptr)                      ((uint8_t )  __ldrt(ptr))
 316:.././hal/sam4s/inc/core_cmInstr.h **** 
 317:.././hal/sam4s/inc/core_cmInstr.h **** 
 318:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  LDRT Unprivileged (16 bit)
 319:.././hal/sam4s/inc/core_cmInstr.h **** 
 320:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 16 bit values.
 321:.././hal/sam4s/inc/core_cmInstr.h **** 
 322:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 323:.././hal/sam4s/inc/core_cmInstr.h ****     \return        value of type uint16_t at (*ptr)
 324:.././hal/sam4s/inc/core_cmInstr.h ****  */
 325:.././hal/sam4s/inc/core_cmInstr.h **** #define __LDRHT(ptr)                      ((uint16_t)  __ldrt(ptr))
 326:.././hal/sam4s/inc/core_cmInstr.h **** 
 327:.././hal/sam4s/inc/core_cmInstr.h **** 
 328:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  LDRT Unprivileged (32 bit)
 329:.././hal/sam4s/inc/core_cmInstr.h **** 
 330:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a Unprivileged LDRT instruction for 32 bit values.
 331:.././hal/sam4s/inc/core_cmInstr.h **** 
 332:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to data
 333:.././hal/sam4s/inc/core_cmInstr.h ****     \return        value of type uint32_t at (*ptr)
 334:.././hal/sam4s/inc/core_cmInstr.h ****  */
 335:.././hal/sam4s/inc/core_cmInstr.h **** #define __LDRT(ptr)                       ((uint32_t ) __ldrt(ptr))
 336:.././hal/sam4s/inc/core_cmInstr.h **** 
 337:.././hal/sam4s/inc/core_cmInstr.h **** 
 338:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  STRT Unprivileged (8 bit)
 339:.././hal/sam4s/inc/core_cmInstr.h **** 
 340:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 8 bit values.
 341:.././hal/sam4s/inc/core_cmInstr.h **** 
 342:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 343:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 344:.././hal/sam4s/inc/core_cmInstr.h ****  */
 345:.././hal/sam4s/inc/core_cmInstr.h **** #define __STRBT(value, ptr)               __strt(value, ptr)
 346:.././hal/sam4s/inc/core_cmInstr.h **** 
 347:.././hal/sam4s/inc/core_cmInstr.h **** 
 348:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  STRT Unprivileged (16 bit)
 349:.././hal/sam4s/inc/core_cmInstr.h **** 
 350:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 16 bit values.
 351:.././hal/sam4s/inc/core_cmInstr.h **** 
 352:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 353:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 354:.././hal/sam4s/inc/core_cmInstr.h ****  */
 355:.././hal/sam4s/inc/core_cmInstr.h **** #define __STRHT(value, ptr)               __strt(value, ptr)
 356:.././hal/sam4s/inc/core_cmInstr.h **** 
 357:.././hal/sam4s/inc/core_cmInstr.h **** 
 358:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  STRT Unprivileged (32 bit)
 359:.././hal/sam4s/inc/core_cmInstr.h **** 
 360:.././hal/sam4s/inc/core_cmInstr.h ****     This function executes a Unprivileged STRT instruction for 32 bit values.
 361:.././hal/sam4s/inc/core_cmInstr.h **** 
 362:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]  value  Value to store
 363:.././hal/sam4s/inc/core_cmInstr.h ****     \param [in]    ptr  Pointer to location
 364:.././hal/sam4s/inc/core_cmInstr.h ****  */
 365:.././hal/sam4s/inc/core_cmInstr.h **** #define __STRT(value, ptr)                __strt(value, ptr)
 366:.././hal/sam4s/inc/core_cmInstr.h **** 
 367:.././hal/sam4s/inc/core_cmInstr.h **** #endif /* (__CORTEX_M >= 0x03) || (__CORTEX_SC >= 300) */
 368:.././hal/sam4s/inc/core_cmInstr.h **** 
 369:.././hal/sam4s/inc/core_cmInstr.h **** 
 370:.././hal/sam4s/inc/core_cmInstr.h **** #elif defined ( __GNUC__ ) /*------------------ GNU Compiler ---------------------*/
 371:.././hal/sam4s/inc/core_cmInstr.h **** /* GNU gcc specific functions */
 372:.././hal/sam4s/inc/core_cmInstr.h **** 
 373:.././hal/sam4s/inc/core_cmInstr.h **** /* Define macros for porting to both thumb1 and thumb2.
 374:.././hal/sam4s/inc/core_cmInstr.h ****  * For thumb1, use low register (r0-r7), specified by constrant "l"
 375:.././hal/sam4s/inc/core_cmInstr.h ****  * Otherwise, use general registers, specified by constrant "r" */
 376:.././hal/sam4s/inc/core_cmInstr.h **** #if defined (__thumb__) && !defined (__thumb2__)
 377:.././hal/sam4s/inc/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=l" (r)
 378:.././hal/sam4s/inc/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "l" (r)
 379:.././hal/sam4s/inc/core_cmInstr.h **** #else
 380:.././hal/sam4s/inc/core_cmInstr.h **** #define __CMSIS_GCC_OUT_REG(r) "=r" (r)
 381:.././hal/sam4s/inc/core_cmInstr.h **** #define __CMSIS_GCC_USE_REG(r) "r" (r)
 382:.././hal/sam4s/inc/core_cmInstr.h **** #endif
 383:.././hal/sam4s/inc/core_cmInstr.h **** 
 384:.././hal/sam4s/inc/core_cmInstr.h **** /** \brief  No Operation
 385:.././hal/sam4s/inc/core_cmInstr.h **** 
 386:.././hal/sam4s/inc/core_cmInstr.h ****     No Operation does nothing. This instruction can be used for code alignment purposes.
 387:.././hal/sam4s/inc/core_cmInstr.h ****  */
 388:.././hal/sam4s/inc/core_cmInstr.h **** __attribute__( ( always_inline ) ) __STATIC_INLINE void __NOP(void)
 161              	 .loc 2 388 57 view .LVU14
 162              	.LBB6:
 389:.././hal/sam4s/inc/core_cmInstr.h **** {
 390:.././hal/sam4s/inc/core_cmInstr.h ****   __ASM volatile ("nop");
 163              	 .loc 2 390 3 view .LVU15
 164              	 .syntax unified
 165              	
 166 0020 00BF     	 nop
 167              	
 168              	 .thumb
 169              	 .syntax unified
 170              	.LBE6:
 171              	.LBE5:
 241:.././hal/sam4s/startup_sam4s.c **** 		*pDest++ = 0;
 172              	 .loc 1 241 2 view .LVU16
 173              	.LVL2:
 242:.././hal/sam4s/startup_sam4s.c **** 	}
 174              	 .loc 1 242 12 is_stmt 0 view .LVU17
 175 0022 154B     	 ldr r3,.L9+16
 176 0024 1548     	 ldr r0,.L9+20
 177 0026 DA1C     	 adds r2,r3,#3
 178 0028 121A     	 subs r2,r2,r0
 179 002a C11E     	 subs r1,r0,#3
 180 002c 22F00302 	 bic r2,r2,#3
 181 0030 9942     	 cmp r1,r3
 182 0032 88BF     	 it hi
 183 0034 0022     	 movhi r2,#0
 184 0036 124B     	 ldr r3,.L9+24
 185 0038 0021     	 movs r1,#0
 186 003a 9847     	 blx r3
 187              	.LVL3:
 246:.././hal/sam4s/startup_sam4s.c **** 	SCB->VTOR = ((uint32_t) pSrc);
 188              	 .loc 1 246 2 is_stmt 1 view .LVU18
 247:.././hal/sam4s/startup_sam4s.c **** 
 189              	 .loc 1 247 2 view .LVU19
 247:.././hal/sam4s/startup_sam4s.c **** 
 190              	 .loc 1 247 12 is_stmt 0 view .LVU20
 191 003c 114B     	 ldr r3,.L9+28
 192 003e 124A     	 ldr r2,.L9+32
 193 0040 9A60     	 str r2,[r3,#8]
 250:.././hal/sam4s/startup_sam4s.c **** 
 194              	 .loc 1 250 2 is_stmt 1 view .LVU21
 195 0042 124B     	 ldr r3,.L9+36
 196 0044 9847     	 blx r3
 197              	.LVL4:
 253:.././hal/sam4s/startup_sam4s.c **** 
 198              	 .loc 1 253 2 view .LVU22
 199 0046 124B     	 ldr r3,.L9+40
 200 0048 9847     	 blx r3
 201              	.LVL5:
 202              	.L5:
 256:.././hal/sam4s/startup_sam4s.c **** }
 203              	 .loc 1 256 2 discriminator 1 view .LVU23
 256:.././hal/sam4s/startup_sam4s.c **** }
 204              	 .loc 1 256 11 discriminator 1 view .LVU24
 256:.././hal/sam4s/startup_sam4s.c **** }
 205              	 .loc 1 256 8 discriminator 1 view .LVU25
 206 004a FEE7     	 b .L5
 207              	.LVL6:
 208              	.L4:
 230:.././hal/sam4s/startup_sam4s.c **** 		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
 209              	 .loc 1 230 9 view .LVU26
 230:.././hal/sam4s/startup_sam4s.c **** 		uint32_t nb_bytes = (uint32_t)&_erelocate - (uint32_t)&_srelocate;
 210              	 .loc 1 230 12 is_stmt 0 view .LVU27
 211 004c E8D2     	 bcs .L6
 212              	.LBB7:
 231:.././hal/sam4s/startup_sam4s.c **** 		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
 213              	 .loc 1 231 3 is_stmt 1 view .LVU28
 231:.././hal/sam4s/startup_sam4s.c **** 		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
 214              	 .loc 1 231 23 is_stmt 0 view .LVU29
 215 004e 084B     	 ldr r3,.L9+8
 216              	.LVL7:
 232:.././hal/sam4s/startup_sam4s.c **** 		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
 217              	 .loc 1 232 3 is_stmt 1 view .LVU30
 232:.././hal/sam4s/startup_sam4s.c **** 		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
 218              	 .loc 1 232 49 is_stmt 0 view .LVU31
 219 0050 0A1F     	 subs r2,r1,#4
 231:.././hal/sam4s/startup_sam4s.c **** 		pSrc = (uint32_t*)((uint32_t)pSrc + nb_bytes) - 1;
 220              	 .loc 1 231 12 view .LVU32
 221 0052 181A     	 subs r0,r3,r0
 232:.././hal/sam4s/startup_sam4s.c **** 		pDest = (uint32_t*)((uint32_t)pDest + nb_bytes) - 1;
 222              	 .loc 1 232 49 view .LVU33
 223 0054 1044     	 add r0,r0,r2
 224              	.LVL8:
 233:.././hal/sam4s/startup_sam4s.c **** 		for (;nb_bytes;nb_bytes -= 4) {
 225              	 .loc 1 233 3 is_stmt 1 view .LVU34
 234:.././hal/sam4s/startup_sam4s.c **** 			*pDest-- = *pSrc--;
 226              	 .loc 1 234 3 view .LVU35
 227 0056 C1F10401 	 rsb r1,r1,#4
 228              	.LVL9:
 229              	.L7:
 234:.././hal/sam4s/startup_sam4s.c **** 			*pDest-- = *pSrc--;
 230              	 .loc 1 234 9 discriminator 1 view .LVU36
 234:.././hal/sam4s/startup_sam4s.c **** 			*pDest-- = *pSrc--;
 231              	 .loc 1 234 3 is_stmt 0 discriminator 1 view .LVU37
 232 005a C842     	 cmn r0,r1
 233 005c E0D0     	 beq .L6
 235:.././hal/sam4s/startup_sam4s.c **** 		}
 234              	 .loc 1 235 4 is_stmt 1 discriminator 2 view .LVU38
 235              	.LVL10:
 235:.././hal/sam4s/startup_sam4s.c **** 		}
 236              	 .loc 1 235 15 is_stmt 0 discriminator 2 view .LVU39
 237 005e 50F80429 	 ldr r2,[r0],#-4
 238              	.LVL11:
 235:.././hal/sam4s/startup_sam4s.c **** 		}
 239              	 .loc 1 235 13 discriminator 2 view .LVU40
 240 0062 43F8042D 	 str r2,[r3,#-4]!
 234:.././hal/sam4s/startup_sam4s.c **** 			*pDest-- = *pSrc--;
 241              	 .loc 1 234 18 is_stmt 1 discriminator 2 view .LVU41
 242              	.LVL12:
 234:.././hal/sam4s/startup_sam4s.c **** 			*pDest-- = *pSrc--;
 243              	 .loc 1 234 18 is_stmt 0 discriminator 2 view .LVU42
 244 0066 F8E7     	 b .L7
 245              	.L10:
 246              	 .align 2
 247              	.L9:
 248 0068 00000000 	 .word _etext
 249 006c 00000000 	 .word _srelocate
 250 0070 00000000 	 .word _erelocate
 251 0074 00000000 	 .word memcpy
 252 0078 00000000 	 .word _ezero
 253 007c 00000000 	 .word _szero
 254 0080 00000000 	 .word memset
 255 0084 00ED00E0 	 .word -536810240
 256 0088 00000000 	 .word _sfixed
 257 008c 00000000 	 .word __libc_init_array
 258 0090 00000000 	 .word main
 259              	.LBE7:
 260              	 .cfi_endproc
 261              	.LFE123:
 263              	 .global exception_table
 264              	 .section .vectors,"a"
 265              	 .align 2
 268              	exception_table:
 269 0000 00000000 	 .word _estack
 270 0004 00000000 	 .word Reset_Handler
 271 0008 00000000 	 .word NMI_Handler
 272 000c 00000000 	 .word HardFault_Handler
 273 0010 00000000 	 .word MemManage_Handler
 274 0014 00000000 	 .word BusFault_Handler
 275 0018 00000000 	 .word UsageFault_Handler
 276 001c 00000000 	 .word 0
 277 0020 00000000 	 .word 0
 278 0024 00000000 	 .word 0
 279 0028 00000000 	 .word 0
 280 002c 00000000 	 .word SVC_Handler
 281 0030 00000000 	 .word DebugMon_Handler
 282 0034 00000000 	 .word 0
 283 0038 00000000 	 .word PendSV_Handler
 284 003c 00000000 	 .word SysTick_Handler
 285 0040 00000000 	 .word SUPC_Handler
 286 0044 00000000 	 .word RSTC_Handler
 287 0048 00000000 	 .word RTC_Handler
 288 004c 00000000 	 .word RTT_Handler
 289 0050 00000000 	 .word WDT_Handler
 290 0054 00000000 	 .word PMC_Handler
 291 0058 00000000 	 .word EFC0_Handler
 292 005c 00000000 	 .word 0
 293 0060 00000000 	 .word UART0_Handler
 294 0064 00000000 	 .word UART1_Handler
 295 0068 00000000 	 .word 0
 296 006c 00000000 	 .word PIOA_Handler
 297 0070 00000000 	 .word PIOB_Handler
 298 0074 00000000 	 .word 0
 299 0078 00000000 	 .word USART0_Handler
 300 007c 00000000 	 .word USART1_Handler
 301 0080 00000000 	 .word 0
 302 0084 00000000 	 .word 0
 303 0088 00000000 	 .word HSMCI_Handler
 304 008c 00000000 	 .word TWI0_Handler
 305 0090 00000000 	 .word TWI1_Handler
 306 0094 00000000 	 .word SPI_Handler
 307 0098 00000000 	 .word SSC_Handler
 308 009c 00000000 	 .word TC0_Handler
 309 00a0 00000000 	 .word TC1_Handler
 310 00a4 00000000 	 .word TC2_Handler
 311 00a8 00000000 	 .word 0
 312 00ac 00000000 	 .word 0
 313 00b0 00000000 	 .word 0
 314 00b4 00000000 	 .word ADC_Handler
 315 00b8 00000000 	 .word DACC_Handler
 316 00bc 00000000 	 .word PWM_Handler
 317 00c0 00000000 	 .word CRCCU_Handler
 318 00c4 00000000 	 .word ACC_Handler
 319 00c8 00000000 	 .word UDP_Handler
 320              	 .text
 321              	.Letext0:
 322              	 .file 3 "c:\\chipwh~2\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\machine\\_default_types.h"
 323              	 .file 4 "c:\\chipwh~2\\cw\\home\\portable\\armgcc\\arm-none-eabi\\include\\sys\\_stdint.h"
 324              	 .file 5 ".././hal/sam4s/inc/sam4s2b.h"
 325              	 .file 6 ".././hal/sam4s/inc/core_cm4.h"
 326              	 .file 7 "<built-in>"
DEFINED SYMBOLS
                            *ABS*:00000000 startup_sam4s.c
    {standard input}:16     .text.Dummy_Handler:00000000 $t
    {standard input}:24     .text.Dummy_Handler:00000000 Dummy_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 UDP_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 ACC_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 CRCCU_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 PWM_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 DACC_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 ADC_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 TC2_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 TC1_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 TC0_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 SSC_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 SPI_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 TWI1_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 TWI0_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 HSMCI_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 USART1_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 USART0_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 PIOB_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 PIOA_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 UART1_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 UART0_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 EFC0_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 PMC_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 WDT_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 RTT_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 RTC_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 RSTC_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 SUPC_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 SysTick_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 PendSV_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 DebugMon_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 SVC_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 UsageFault_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 BusFault_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 MemManage_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 HardFault_Handler
    {standard input}:24     .text.Dummy_Handler:00000000 NMI_Handler
    {standard input}:114    .text.Reset_Handler:00000000 $t
    {standard input}:121    .text.Reset_Handler:00000000 Reset_Handler
    {standard input}:248    .text.Reset_Handler:00000068 $d
    {standard input}:268    .vectors:00000000 exception_table
    {standard input}:265    .vectors:00000000 $d
                           .group:00000000 wm4.0.545a0e1134fc651afe6e71660705947f
                           .group:00000000 wm4._newlib_version.h.4.1ef4e12f167f8b69d7c30054be56050d
                           .group:00000000 wm4.features.h.33.5bd1eea2d80518b50f7af0b5ce6750e0
                           .group:00000000 wm4._default_types.h.15.247e5cd201eca3442cbf5404108c4935
                           .group:00000000 wm4._intsup.h.10.48bafbb683905c4daa4565a85aeeb264
                           .group:00000000 wm4._stdint.h.10.c24fa3af3bc1706662bb5593a907e841
                           .group:00000000 wm4.stdint.h.23.d53047a68f4a85177f80b422d52785ed
                           .group:00000000 wm4.sam4s2b.h.221.db99b1f5dbb5d4301dbbbaff13b63e70
                           .group:00000000 wm4.core_cm4.h.43.9593ac0dcec24a3a6f1d638d754e90b2
                           .group:00000000 wm4.core_cmInstr.h.39.53f0cdf363d7ba01993152fdcb6be5d3
                           .group:00000000 wm4.core_cmSimd.h.43.c355993beb49ccd10586af5b1cfe5aee
                           .group:00000000 wm4.core_cm4.h.201.504dd1a6bdf57a6296d26f255ae618b9
                           .group:00000000 wm4.component_acc.h.36.308f7d4c1685c8ebd00910c37bbeab26
                           .group:00000000 wm4.component_adc.h.36.b8477219496e42be1d01ccb1b6f6b02b
                           .group:00000000 wm4.component_chipid.h.36.cb4a4222aca9bee8d01f4aa49afe4d6d
                           .group:00000000 wm4.component_crccu.h.36.1d71ce61706000275b271d03beaec6d2
                           .group:00000000 wm4.component_dacc.h.36.0b87b1e719912b5885bdf9531e0e43d6
                           .group:00000000 wm4.component_efc.h.36.a6b4458c43d27669aaa6147006e1eb74
                           .group:00000000 wm4.component_gpbr.h.36.595122ea9c79505c4e73c9e7421802a8
                           .group:00000000 wm4.component_hsmci.h.36.ccf6dd1a128877835aec3d40c12745dd
                           .group:00000000 wm4.component_matrix.h.36.8f1d7aeed86a08ab4d936e5a0f026440
                           .group:00000000 wm4.component_pdc.h.36.363e6546b41ce8a14a922d18930df184
                           .group:00000000 wm4.component_pio.h.36.f033c3341fbeea7d2a04545c9a72bd24
                           .group:00000000 wm4.component_pmc.h.36.2771b76afbda6351cb4cf4c6708887d5
                           .group:00000000 wm4.component_pwm.h.36.0cd735c74e99ef7d330cb87d1f16c213
                           .group:00000000 wm4.component_rstc.h.36.1af4b8140176d86bc0af5b861fd3a623
                           .group:00000000 wm4.component_rtc.h.36.c865407d28492a40a128dee548893efe
                           .group:00000000 wm4.component_rtt.h.36.46adad6456893b38ef49ae9a2d0afea1
                           .group:00000000 wm4.component_spi.h.36.a18850bcdd90fcb2d130155fa94829ea
                           .group:00000000 wm4.component_ssc.h.36.6ffc46b5a0a9219bd5c90b3f63510b0f
                           .group:00000000 wm4.component_supc.h.36.0db4554695c6e864e5338e4faca84d88
                           .group:00000000 wm4.component_tc.h.36.af47419b07ade32b2d1423414983d2f7
                           .group:00000000 wm4.component_twi.h.36.3496bc3884f63f906fd446649da75de1
                           .group:00000000 wm4.component_uart.h.36.74e9355d463b56860c56764a9be37213
                           .group:00000000 wm4.component_udp.h.36.8cb9530d4bf5319aabe6158f5e738b3d
                           .group:00000000 wm4.component_usart.h.36.5e91c114006f7b551a45955ae29cb6cf
                           .group:00000000 wm4.component_wdt.h.36.277adc27b017beabbb9f7b11b0fa46f2
                           .group:00000000 wm4.instance_hsmci.h.36.9855cb84ff287cffb479099857800873
                           .group:00000000 wm4.instance_ssc.h.36.630afe78e802d5fc05c6224c23890fe1
                           .group:00000000 wm4.instance_spi.h.36.325bf539a06b58ad3327698a7ef68d81
                           .group:00000000 wm4.instance_tc0.h.36.fbfa021f96aebd3d46fa1937156b0b0a
                           .group:00000000 wm4.instance_twi0.h.36.13a0f0822f7bd9074e9b846b04ed10b9
                           .group:00000000 wm4.instance_twi1.h.36.6c6b55c3fab76b3818eb5314bf7bc410
                           .group:00000000 wm4.instance_pwm.h.36.1b555f9fd14d69df968818a3882b2cde
                           .group:00000000 wm4.instance_usart0.h.36.3b6138f7be7c01038525724f6c5d6c1e
                           .group:00000000 wm4.instance_usart1.h.36.137c36ec170c7ca2c1f8e046f5d0e0c9
                           .group:00000000 wm4.instance_udp.h.36.b94eabb27893117a74b4d6faebd80bc6
                           .group:00000000 wm4.instance_adc.h.36.84184448551cb0a3c52160d178904d14
                           .group:00000000 wm4.instance_dacc.h.36.28a68c12285ab1a6b24d06876c4b8807
                           .group:00000000 wm4.instance_acc.h.36.71d96a8f2214f8a9d18eec4d2d93f130
                           .group:00000000 wm4.instance_crccu.h.36.549cca511b407ab33982b56bae0c25ac
                           .group:00000000 wm4.instance_matrix.h.36.da03b47f7e819cfcead8ef1cd71b60ce
                           .group:00000000 wm4.instance_pmc.h.36.002f4765e9f18dc4b183b779163ab06e
                           .group:00000000 wm4.instance_uart0.h.36.fa62b2ed6ce17806cd77556aa65a73f5
                           .group:00000000 wm4.instance_chipid.h.36.6f5f676d52e3e21dba5d88a4bb87d922
                           .group:00000000 wm4.instance_uart1.h.36.bc11f9c4189a4ac15cce81cf9f40fcf9
                           .group:00000000 wm4.instance_efc0.h.36.67a3a70e962ac1d6ef8fcee0e9fd4a9b
                           .group:00000000 wm4.instance_pioa.h.36.27d92aa6d00d8b6a2b34acdeee1aa60a
                           .group:00000000 wm4.instance_piob.h.36.b0f95d3fb66ff01bcd91fb6a4cb54dc3
                           .group:00000000 wm4.instance_rstc.h.36.f8bcddbd3310cbb6a39c155e9e6b3cfb
                           .group:00000000 wm4.instance_supc.h.36.17878f57a77a9d368090917738ff3e02
                           .group:00000000 wm4.instance_rtt.h.36.8759ab7e2580c101b6db702769407cb0
                           .group:00000000 wm4.instance_wdt.h.36.ab83587b138c65dcd29a29119835b92a
                           .group:00000000 wm4.instance_rtc.h.36.52aa67a6a7c945bf00db9fb9d057e3e0
                           .group:00000000 wm4.instance_gpbr.h.36.b2cfd4dee03ed0c28ecb9eb233d2ac42
                           .group:00000000 wm4.sam4s2b.h.313.04ed20c80f538f8fadb9388a8469283e
                           .group:00000000 wm4.pio_sam4s2b.h.36.e1b33fead6a6e1ee98b2f4cba4bb11b4
                           .group:00000000 wm4.sam4s2b.h.450.98a9c8ea67d90470c8554ffe87c8398a

UNDEFINED SYMBOLS
_etext
_srelocate
_erelocate
memcpy
_ezero
_szero
memset
_sfixed
__libc_init_array
main
_estack
